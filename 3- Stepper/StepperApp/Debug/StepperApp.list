
StepperApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000178c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08001964  08001964  00011964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001978  08001978  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08001978  08001978  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001978  08001978  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001978  08001978  00011978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800197c  0800197c  0001197c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08001980  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00020058  2**0
                  CONTENTS
 10 .bss          00000020  20000058  20000058  00020058  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000078  20000078  00020058  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 14 .debug_info   00002e57  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000aaf  00000000  00000000  00022f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000268  00000000  00000000  000239d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000001c9  00000000  00000000  00023c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001582  00000000  00000000  00023e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001c44  00000000  00000000  0002538b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00005bf1  00000000  00000000  00026fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000838  00000000  00000000  0002cbc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000044  00000000  00000000  0002d3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000058 	.word	0x20000058
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800194c 	.word	0x0800194c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000005c 	.word	0x2000005c
 8000214:	0800194c 	.word	0x0800194c

08000218 <LIMSWI_voidSwitchInit>:
 */

#include "LIMSWI_Interface.h"

void LIMSWI_voidSwitchInit(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	GPIO_voidInitPin(&LIMSWI[0]);
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <LIMSWI_voidSwitchInit+0x14>)
 800021e:	f000 ff83 	bl	8001128 <GPIO_voidInitPin>
	GPIO_voidInitPin(&LIMSWI[1]);
 8000222:	4803      	ldr	r0, [pc, #12]	; (8000230 <LIMSWI_voidSwitchInit+0x18>)
 8000224:	f000 ff80 	bl	8001128 <GPIO_voidInitPin>
}
 8000228:	bf00      	nop
 800022a:	bd80      	pop	{r7, pc}
 800022c:	20000000 	.word	0x20000000
 8000230:	20000007 	.word	0x20000007

08000234 <LIMSWI_u8SwitchPress>:

u8 LIMSWI_u8SwitchPress(u8 A_u8SwitchPort,u8 A_u8SwitchPin)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	460a      	mov	r2, r1
 800023e:	71fb      	strb	r3, [r7, #7]
 8000240:	4613      	mov	r3, r2
 8000242:	71bb      	strb	r3, [r7, #6]
	u8 reading = GPIO_u8GetPinData(A_u8SwitchPort, A_u8SwitchPin);
 8000244:	79ba      	ldrb	r2, [r7, #6]
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	4611      	mov	r1, r2
 800024a:	4618      	mov	r0, r3
 800024c:	f000 fea0 	bl	8000f90 <GPIO_u8GetPinData>
 8000250:	4603      	mov	r3, r0
 8000252:	73fb      	strb	r3, [r7, #15]
	return reading;						//Inverted Logic: 0 -> Button is pressed 1-> Button is not pressed
 8000254:	7bfb      	ldrb	r3, [r7, #15]
}
 8000256:	4618      	mov	r0, r3
 8000258:	3710      	adds	r7, #16
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}

0800025e <STEPPER_voidInitMotor>:
#include "STEPPER_Interface.h"


/*Motor Initialization*/
void STEPPER_voidInitMotor(STEPPER_config_t* A_stepperMotor)
{
 800025e:	b580      	push	{r7, lr}
 8000260:	b08a      	sub	sp, #40	; 0x28
 8000262:	af00      	add	r7, sp, #0
 8000264:	6078      	str	r0, [r7, #4]
    /*Structs to configure the Direction, Step, USM0, and USM1 pins*/
    MGPIO_Config_t dirConfig = {
        .Port = A_stepperMotor->dir_PORT,
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	781b      	ldrb	r3, [r3, #0]
    MGPIO_Config_t dirConfig = {
 800026a:	f887 3020 	strb.w	r3, [r7, #32]
        .Pin = A_stepperMotor->dir_PIN,
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	785b      	ldrb	r3, [r3, #1]
    MGPIO_Config_t dirConfig = {
 8000272:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8000276:	2301      	movs	r3, #1
 8000278:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800027c:	2300      	movs	r3, #0
 800027e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000282:	2300      	movs	r3, #0
 8000284:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000288:	2300      	movs	r3, #0
 800028a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800028e:	2300      	movs	r3, #0
 8000290:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		.InputPull = GPIO_NO_PULL,
		.AltFunc = GPIO_AF0
    };

    MGPIO_Config_t stepConfig = {
        .Port = A_stepperMotor->step_PORT,
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	789b      	ldrb	r3, [r3, #2]
    MGPIO_Config_t stepConfig = {
 8000298:	763b      	strb	r3, [r7, #24]
        .Pin = A_stepperMotor->step_PIN,
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	78db      	ldrb	r3, [r3, #3]
    MGPIO_Config_t stepConfig = {
 800029e:	767b      	strb	r3, [r7, #25]
 80002a0:	2301      	movs	r3, #1
 80002a2:	76bb      	strb	r3, [r7, #26]
 80002a4:	2300      	movs	r3, #0
 80002a6:	76fb      	strb	r3, [r7, #27]
 80002a8:	2300      	movs	r3, #0
 80002aa:	773b      	strb	r3, [r7, #28]
 80002ac:	2300      	movs	r3, #0
 80002ae:	777b      	strb	r3, [r7, #29]
 80002b0:	2300      	movs	r3, #0
 80002b2:	77bb      	strb	r3, [r7, #30]
		.InputPull = GPIO_NO_PULL,
		.AltFunc = GPIO_AF0
    };

    MGPIO_Config_t ISENAConfig = {
        .Port = A_stepperMotor->ISENA_PORT,
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	791b      	ldrb	r3, [r3, #4]
    MGPIO_Config_t ISENAConfig = {
 80002b8:	743b      	strb	r3, [r7, #16]
        .Pin = A_stepperMotor->ISENA_PIN,
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	795b      	ldrb	r3, [r3, #5]
    MGPIO_Config_t ISENAConfig = {
 80002be:	747b      	strb	r3, [r7, #17]
 80002c0:	2300      	movs	r3, #0
 80002c2:	74bb      	strb	r3, [r7, #18]
 80002c4:	2300      	movs	r3, #0
 80002c6:	74fb      	strb	r3, [r7, #19]
 80002c8:	2300      	movs	r3, #0
 80002ca:	753b      	strb	r3, [r7, #20]
 80002cc:	2300      	movs	r3, #0
 80002ce:	757b      	strb	r3, [r7, #21]
 80002d0:	2300      	movs	r3, #0
 80002d2:	75bb      	strb	r3, [r7, #22]
		.InputPull = GPIO_NO_PULL,
		.AltFunc = GPIO_AF0
    };

    MGPIO_Config_t ISENBConfig = {
        .Port = A_stepperMotor->ISENB_PORT,
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	799b      	ldrb	r3, [r3, #6]
    MGPIO_Config_t ISENBConfig = {
 80002d8:	723b      	strb	r3, [r7, #8]
        .Pin = A_stepperMotor->ISENB_PIN,
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	79db      	ldrb	r3, [r3, #7]
    MGPIO_Config_t ISENBConfig = {
 80002de:	727b      	strb	r3, [r7, #9]
 80002e0:	2300      	movs	r3, #0
 80002e2:	72bb      	strb	r3, [r7, #10]
 80002e4:	2300      	movs	r3, #0
 80002e6:	72fb      	strb	r3, [r7, #11]
 80002e8:	2300      	movs	r3, #0
 80002ea:	733b      	strb	r3, [r7, #12]
 80002ec:	2300      	movs	r3, #0
 80002ee:	737b      	strb	r3, [r7, #13]
 80002f0:	2300      	movs	r3, #0
 80002f2:	73bb      	strb	r3, [r7, #14]
		.AltFunc = GPIO_AF0
    };

    /*Initialization for each pin using the GPIO_voidInitPin function*/

    GPIO_voidInitPin(&dirConfig);
 80002f4:	f107 0320 	add.w	r3, r7, #32
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 ff15 	bl	8001128 <GPIO_voidInitPin>
    GPIO_voidInitPin(&stepConfig);
 80002fe:	f107 0318 	add.w	r3, r7, #24
 8000302:	4618      	mov	r0, r3
 8000304:	f000 ff10 	bl	8001128 <GPIO_voidInitPin>
    GPIO_voidInitPin(&ISENAConfig);
 8000308:	f107 0310 	add.w	r3, r7, #16
 800030c:	4618      	mov	r0, r3
 800030e:	f000 ff0b 	bl	8001128 <GPIO_voidInitPin>
    GPIO_voidInitPin(&ISENBConfig);
 8000312:	f107 0308 	add.w	r3, r7, #8
 8000316:	4618      	mov	r0, r3
 8000318:	f000 ff06 	bl	8001128 <GPIO_voidInitPin>
}
 800031c:	bf00      	nop
 800031e:	3728      	adds	r7, #40	; 0x28
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}

08000324 <STEPPER_voidQuadMotorStep>:
    TIMERx_voidDelay_ms(TIM2, A_delay);
}

/*QuadMotor Movement*/
void STEPPER_voidQuadMotorStep(STEPPER_config_t* A_stepperMotor1, STEPPER_config_t* A_stepperMotor2, STEPPER_config_t* A_stepperMotor3, STEPPER_config_t* A_stepperMotor4, u8 A_dir, TIMER_RegMap_t* timerSelect, u32 A_delay)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	60f8      	str	r0, [r7, #12]
 800032c:	60b9      	str	r1, [r7, #8]
 800032e:	607a      	str	r2, [r7, #4]
 8000330:	603b      	str	r3, [r7, #0]
	/*Set the Motors Direction*/
	GPIO_voidSetPinValue(A_stepperMotor1->dir_PORT, A_stepperMotor1->dir_PIN, A_dir);
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	7818      	ldrb	r0, [r3, #0]
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	785b      	ldrb	r3, [r3, #1]
 800033a:	7e3a      	ldrb	r2, [r7, #24]
 800033c:	4619      	mov	r1, r3
 800033e:	f000 fd65 	bl	8000e0c <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(A_stepperMotor2->dir_PORT, A_stepperMotor2->dir_PIN, A_dir);
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	7818      	ldrb	r0, [r3, #0]
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	785b      	ldrb	r3, [r3, #1]
 800034a:	7e3a      	ldrb	r2, [r7, #24]
 800034c:	4619      	mov	r1, r3
 800034e:	f000 fd5d 	bl	8000e0c <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(A_stepperMotor3->dir_PORT, A_stepperMotor3->dir_PIN, A_dir);
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	7818      	ldrb	r0, [r3, #0]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	785b      	ldrb	r3, [r3, #1]
 800035a:	7e3a      	ldrb	r2, [r7, #24]
 800035c:	4619      	mov	r1, r3
 800035e:	f000 fd55 	bl	8000e0c <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(A_stepperMotor4->dir_PORT, A_stepperMotor4->dir_PIN, A_dir);
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	7818      	ldrb	r0, [r3, #0]
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	785b      	ldrb	r3, [r3, #1]
 800036a:	7e3a      	ldrb	r2, [r7, #24]
 800036c:	4619      	mov	r1, r3
 800036e:	f000 fd4d 	bl	8000e0c <GPIO_voidSetPinValue>
	/*Quick Note: If a problem occurs with missing a step due to setup time, we can simply split the direction
	 * and step ports/pins into two different initialization/movement function, this would allow for the setup time
	 * to happen during the initialization of a pin*/

	/*Set the Motor Signals High*/
	GPIO_voidSetPinValue(A_stepperMotor1->step_PORT, A_stepperMotor1->step_PIN, 1);
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	7898      	ldrb	r0, [r3, #2]
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	78db      	ldrb	r3, [r3, #3]
 800037a:	2201      	movs	r2, #1
 800037c:	4619      	mov	r1, r3
 800037e:	f000 fd45 	bl	8000e0c <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(A_stepperMotor2->step_PORT, A_stepperMotor2->step_PIN, 1);
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	7898      	ldrb	r0, [r3, #2]
 8000386:	68bb      	ldr	r3, [r7, #8]
 8000388:	78db      	ldrb	r3, [r3, #3]
 800038a:	2201      	movs	r2, #1
 800038c:	4619      	mov	r1, r3
 800038e:	f000 fd3d 	bl	8000e0c <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(A_stepperMotor3->step_PORT, A_stepperMotor3->step_PIN, 1);
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	7898      	ldrb	r0, [r3, #2]
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	78db      	ldrb	r3, [r3, #3]
 800039a:	2201      	movs	r2, #1
 800039c:	4619      	mov	r1, r3
 800039e:	f000 fd35 	bl	8000e0c <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(A_stepperMotor4->step_PORT, A_stepperMotor4->step_PIN, 1);
 80003a2:	683b      	ldr	r3, [r7, #0]
 80003a4:	7898      	ldrb	r0, [r3, #2]
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	78db      	ldrb	r3, [r3, #3]
 80003aa:	2201      	movs	r2, #1
 80003ac:	4619      	mov	r1, r3
 80003ae:	f000 fd2d 	bl	8000e0c <GPIO_voidSetPinValue>
	/*Delay for 5 ms*/
	TIMERx_voidDelay_ms(timerSelect, A_delay);
 80003b2:	6a39      	ldr	r1, [r7, #32]
 80003b4:	69f8      	ldr	r0, [r7, #28]
 80003b6:	f001 f802 	bl	80013be <TIMERx_voidDelay_ms>
	/*Set the Motor Signals to Low to Generate a step*/
	GPIO_voidSetPinValue(A_stepperMotor1->step_PORT, A_stepperMotor1->step_PIN, 0);
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	7898      	ldrb	r0, [r3, #2]
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	78db      	ldrb	r3, [r3, #3]
 80003c2:	2200      	movs	r2, #0
 80003c4:	4619      	mov	r1, r3
 80003c6:	f000 fd21 	bl	8000e0c <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(A_stepperMotor2->step_PORT, A_stepperMotor2->step_PIN, 0);
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	7898      	ldrb	r0, [r3, #2]
 80003ce:	68bb      	ldr	r3, [r7, #8]
 80003d0:	78db      	ldrb	r3, [r3, #3]
 80003d2:	2200      	movs	r2, #0
 80003d4:	4619      	mov	r1, r3
 80003d6:	f000 fd19 	bl	8000e0c <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(A_stepperMotor3->step_PORT, A_stepperMotor3->step_PIN, 0);
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	7898      	ldrb	r0, [r3, #2]
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	78db      	ldrb	r3, [r3, #3]
 80003e2:	2200      	movs	r2, #0
 80003e4:	4619      	mov	r1, r3
 80003e6:	f000 fd11 	bl	8000e0c <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(A_stepperMotor4->step_PORT, A_stepperMotor4->step_PIN, 0);
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	7898      	ldrb	r0, [r3, #2]
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	78db      	ldrb	r3, [r3, #3]
 80003f2:	2200      	movs	r2, #0
 80003f4:	4619      	mov	r1, r3
 80003f6:	f000 fd09 	bl	8000e0c <GPIO_voidSetPinValue>
	/*Delay for 5 ms*/
	TIMERx_voidDelay_ms(timerSelect, A_delay);
 80003fa:	6a39      	ldr	r1, [r7, #32]
 80003fc:	69f8      	ldr	r0, [r7, #28]
 80003fe:	f000 ffde 	bl	80013be <TIMERx_voidDelay_ms>
}
 8000402:	bf00      	nop
 8000404:	3710      	adds	r7, #16
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}

0800040a <STEPPER_voidQuadMotorHome>:

/*Homing the Motors*/
void STEPPER_voidQuadMotorHome(STEPPER_config_t* A_stepperMotor1, STEPPER_config_t* A_stepperMotor2, STEPPER_config_t* A_stepperMotor3, STEPPER_config_t* A_stepperMotor4, TIMER_RegMap_t* timerSelect)
{
 800040a:	b580      	push	{r7, lr}
 800040c:	b084      	sub	sp, #16
 800040e:	af00      	add	r7, sp, #0
 8000410:	60f8      	str	r0, [r7, #12]
 8000412:	60b9      	str	r1, [r7, #8]
 8000414:	607a      	str	r2, [r7, #4]
 8000416:	603b      	str	r3, [r7, #0]
	/*Set the Motors Direction*/
	GPIO_voidSetPinValue(A_stepperMotor1->dir_PORT, A_stepperMotor1->dir_PIN, STEPPER_DIR);
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	7818      	ldrb	r0, [r3, #0]
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	785b      	ldrb	r3, [r3, #1]
 8000420:	2200      	movs	r2, #0
 8000422:	4619      	mov	r1, r3
 8000424:	f000 fcf2 	bl	8000e0c <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(A_stepperMotor2->dir_PORT, A_stepperMotor2->dir_PIN, STEPPER_DIR);
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	7818      	ldrb	r0, [r3, #0]
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	785b      	ldrb	r3, [r3, #1]
 8000430:	2200      	movs	r2, #0
 8000432:	4619      	mov	r1, r3
 8000434:	f000 fcea 	bl	8000e0c <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(A_stepperMotor3->dir_PORT, A_stepperMotor3->dir_PIN, STEPPER_DIR);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	7818      	ldrb	r0, [r3, #0]
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	785b      	ldrb	r3, [r3, #1]
 8000440:	2200      	movs	r2, #0
 8000442:	4619      	mov	r1, r3
 8000444:	f000 fce2 	bl	8000e0c <GPIO_voidSetPinValue>
	GPIO_voidSetPinValue(A_stepperMotor4->dir_PORT, A_stepperMotor4->dir_PIN, STEPPER_DIR);
 8000448:	683b      	ldr	r3, [r7, #0]
 800044a:	7818      	ldrb	r0, [r3, #0]
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	785b      	ldrb	r3, [r3, #1]
 8000450:	2200      	movs	r2, #0
 8000452:	4619      	mov	r1, r3
 8000454:	f000 fcda 	bl	8000e0c <GPIO_voidSetPinValue>

		/*Set the Motor Signals High*/
		GPIO_voidSetPinValue(A_stepperMotor1->step_PORT, A_stepperMotor1->step_PIN, 1);
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	7898      	ldrb	r0, [r3, #2]
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	78db      	ldrb	r3, [r3, #3]
 8000460:	2201      	movs	r2, #1
 8000462:	4619      	mov	r1, r3
 8000464:	f000 fcd2 	bl	8000e0c <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(A_stepperMotor2->step_PORT, A_stepperMotor2->step_PIN, 1);
 8000468:	68bb      	ldr	r3, [r7, #8]
 800046a:	7898      	ldrb	r0, [r3, #2]
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	78db      	ldrb	r3, [r3, #3]
 8000470:	2201      	movs	r2, #1
 8000472:	4619      	mov	r1, r3
 8000474:	f000 fcca 	bl	8000e0c <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(A_stepperMotor3->step_PORT, A_stepperMotor3->step_PIN, 1);
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	7898      	ldrb	r0, [r3, #2]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	78db      	ldrb	r3, [r3, #3]
 8000480:	2201      	movs	r2, #1
 8000482:	4619      	mov	r1, r3
 8000484:	f000 fcc2 	bl	8000e0c <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(A_stepperMotor4->step_PORT, A_stepperMotor4->step_PIN, 1);
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	7898      	ldrb	r0, [r3, #2]
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	78db      	ldrb	r3, [r3, #3]
 8000490:	2201      	movs	r2, #1
 8000492:	4619      	mov	r1, r3
 8000494:	f000 fcba 	bl	8000e0c <GPIO_voidSetPinValue>
		/*Delay for 5 ms*/
		TIMERx_voidDelay_ms(timerSelect, 5);
 8000498:	2105      	movs	r1, #5
 800049a:	69b8      	ldr	r0, [r7, #24]
 800049c:	f000 ff8f 	bl	80013be <TIMERx_voidDelay_ms>
		/*Set the Motor Signals to Low to Generate a step*/
		GPIO_voidSetPinValue(A_stepperMotor1->step_PORT, A_stepperMotor1->step_PIN, 0);
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	7898      	ldrb	r0, [r3, #2]
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	78db      	ldrb	r3, [r3, #3]
 80004a8:	2200      	movs	r2, #0
 80004aa:	4619      	mov	r1, r3
 80004ac:	f000 fcae 	bl	8000e0c <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(A_stepperMotor2->step_PORT, A_stepperMotor2->step_PIN, 0);
 80004b0:	68bb      	ldr	r3, [r7, #8]
 80004b2:	7898      	ldrb	r0, [r3, #2]
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	78db      	ldrb	r3, [r3, #3]
 80004b8:	2200      	movs	r2, #0
 80004ba:	4619      	mov	r1, r3
 80004bc:	f000 fca6 	bl	8000e0c <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(A_stepperMotor3->step_PORT, A_stepperMotor3->step_PIN, 0);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	7898      	ldrb	r0, [r3, #2]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	78db      	ldrb	r3, [r3, #3]
 80004c8:	2200      	movs	r2, #0
 80004ca:	4619      	mov	r1, r3
 80004cc:	f000 fc9e 	bl	8000e0c <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(A_stepperMotor4->step_PORT, A_stepperMotor4->step_PIN, 0);
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	7898      	ldrb	r0, [r3, #2]
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	78db      	ldrb	r3, [r3, #3]
 80004d8:	2200      	movs	r2, #0
 80004da:	4619      	mov	r1, r3
 80004dc:	f000 fc96 	bl	8000e0c <GPIO_voidSetPinValue>
		/*Delay for 5 ms*/
		TIMERx_voidDelay_ms(timerSelect, 5);
 80004e0:	2105      	movs	r1, #5
 80004e2:	69b8      	ldr	r0, [r7, #24]
 80004e4:	f000 ff6b 	bl	80013be <TIMERx_voidDelay_ms>
}
 80004e8:	bf00      	nop
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <CAN_voidInit>:
 */

#include "CAN_Interface.h"

void CAN_voidInit(CAN_RegMap_t* A_canx, CAN_RxConfig_t* A_rxConfig, CAN_TxConfig_t* A_txConfig)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b08b      	sub	sp, #44	; 0x2c
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
	CAN_MSG_SRAM_t* L_msg;
	if(A_canx == CAN1)
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	4aa0      	ldr	r2, [pc, #640]	; (8000780 <CAN_voidInit+0x290>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d102      	bne.n	800050a <CAN_voidInit+0x1a>
		L_msg = CAN1_MESSAGES;
 8000504:	4b9f      	ldr	r3, [pc, #636]	; (8000784 <CAN_voidInit+0x294>)
 8000506:	627b      	str	r3, [r7, #36]	; 0x24
 8000508:	e00c      	b.n	8000524 <CAN_voidInit+0x34>
	else if(A_canx == CAN2)
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	4a9e      	ldr	r2, [pc, #632]	; (8000788 <CAN_voidInit+0x298>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d102      	bne.n	8000518 <CAN_voidInit+0x28>
		L_msg = CAN2_MESSAGES;
 8000512:	4b9e      	ldr	r3, [pc, #632]	; (800078c <CAN_voidInit+0x29c>)
 8000514:	627b      	str	r3, [r7, #36]	; 0x24
 8000516:	e005      	b.n	8000524 <CAN_voidInit+0x34>
	else if(A_canx == CAN3)
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a9d      	ldr	r2, [pc, #628]	; (8000790 <CAN_voidInit+0x2a0>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d101      	bne.n	8000524 <CAN_voidInit+0x34>
			L_msg = CAN3_MESSAGES;
 8000520:	4b9c      	ldr	r3, [pc, #624]	; (8000794 <CAN_voidInit+0x2a4>)
 8000522:	627b      	str	r3, [r7, #36]	; 0x24

	/* Enter Initialization mode */
	A_canx->CCCR |= (1 << 0);
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f043 0201 	orr.w	r2, r3, #1
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	619a      	str	r2, [r3, #24]
	while(! ((A_canx->CCCR >> 0) & 1));  // Wait to make sure INIT bit has been written (Recommendation from reference manual)
 8000530:	bf00      	nop
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0f9      	beq.n	8000532 <CAN_voidInit+0x42>

	// might configure Timeout value here
	A_canx->CCCR |= (1 << 1);
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	f043 0202 	orr.w	r2, r3, #2
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	619a      	str	r2, [r3, #24]

/* Setup General Configuration */
#if CAN_FDCAN_OPERATION == CAN_FDCAN_DISABLE
		A_canx->CCCR &= ~(1 << 8);
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 8);
#endif

#if CAN_BIT_RATE_SWITCHING == CAN_BIT_RATE_SWITCHING_DISABLE
		A_canx->CCCR &= ~(1 << 9);
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 9);
#endif

#if CAN_EDGE_FILTERING == CAN_FILTERING_DISABLE
		A_canx->CCCR &= ~(1 << 13);
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 13);
#endif

#if CAN_EXCEPTION_HANDLING == CAN_EXCEPTION_ENABLE
		A_canx->CCCR &= ~(1 << 12);
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 12);
#endif

#if CAN_BUS_MONITORING == CAN_BUS_MONITORING_DISABLE
		A_canx->CCCR &= ~(1 << 5);
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	f023 0220 	bic.w	r2, r3, #32
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 5);
#endif

#if CAN_OPERATION_MODE == CAN_MODE_NORMAL_OPERATION
		A_canx->CCCR &= ~(1 << 2);
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	f023 0204 	bic.w	r2, r3, #4
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 2);
#endif

	/* Timing Configuration */
	u32 L_timing = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	61bb      	str	r3, [r7, #24]
	L_timing |= (3 << 25);		// 3 is default value for NSJW (Nominal (re)synchronization jump width)
 8000596:	69bb      	ldr	r3, [r7, #24]
 8000598:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 800059c:	61bb      	str	r3, [r7, #24]
	// L_timing |= (0 << 16);		// 0 is the default value for NBRP (Bit rate prescaler)
	L_timing |= (10 << 8);		// 10 is the default value for NTSEG1
 800059e:	69bb      	ldr	r3, [r7, #24]
 80005a0:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 80005a4:	61bb      	str	r3, [r7, #24]
	L_timing |= (3 << 0);		// 3 is the default value for NTSEG2
 80005a6:	69bb      	ldr	r3, [r7, #24]
 80005a8:	f043 0303 	orr.w	r3, r3, #3
 80005ac:	61bb      	str	r3, [r7, #24]
	 * for 125kb  (8us)	 BRB = 8
	 * for 250kb  (4us)  BRB = 4
	 * for 500kb  (2us)  BRB = 2
	 * for 1000kb (1us)  BRB = 1
	 * */
	L_timing |= (CAN_BAUD_RATE << 16);
 80005ae:	69bb      	ldr	r3, [r7, #24]
 80005b0:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80005b4:	61bb      	str	r3, [r7, #24]

	A_canx->NBTP = L_timing;
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	69ba      	ldr	r2, [r7, #24]
 80005ba:	61da      	str	r2, [r3, #28]

	/* Receiver Configuration */
	if(A_rxConfig->nonMatchingFrames == CAN_RX_ACCEPT_FIFO0){
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d108      	bne.n	80005d6 <CAN_voidInit+0xe6>
		A_canx->RXGFC &= ~(0b11 << 4);
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80005d4:	e01c      	b.n	8000610 <CAN_voidInit+0x120>
	}
	else if(A_rxConfig->nonMatchingFrames == CAN_RX_ACCEPT_FIFO1){
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d110      	bne.n	8000600 <CAN_voidInit+0x110>
		A_canx->RXGFC &= ~(0b11 << 4);
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		A_canx->RXGFC |= (1 << 4);
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005f4:	f043 0210 	orr.w	r2, r3, #16
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80005fe:	e007      	b.n	8000610 <CAN_voidInit+0x120>
	}
	else{	// Reject
		A_canx->RXGFC |= (0b11 << 4);
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000606:	f043 0230 	orr.w	r2, r3, #48	; 0x30
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}

	if(A_rxConfig->FIFO0_Mode == CAN_RX_FIFO_BLOCKING)
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	785b      	ldrb	r3, [r3, #1]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d108      	bne.n	800062a <CAN_voidInit+0x13a>
		A_canx->RXGFC &= ~(1 << 9);
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800061e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000628:	e007      	b.n	800063a <CAN_voidInit+0x14a>
	else	// Overwrite
		A_canx->RXGFC |= (1 << 9);
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000630:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	if(A_rxConfig->FIFO1_Mode == CAN_RX_FIFO_BLOCKING)
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	789b      	ldrb	r3, [r3, #2]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d108      	bne.n	8000654 <CAN_voidInit+0x164>
			A_canx->RXGFC &= ~(1 << 8);
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000648:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000652:	e007      	b.n	8000664 <CAN_voidInit+0x174>
		else
			A_canx->RXGFC |= (1 << 8);
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800065a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	A_canx->RXGFC &= ~(0b11111 << 16);
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800066a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	A_canx->RXGFC |= ((A_rxConfig->FIFO0_numberOfIDs + A_rxConfig->FIFO1_numberOfIDs) << 16);
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	78d2      	ldrb	r2, [r2, #3]
 800067e:	4611      	mov	r1, r2
 8000680:	68ba      	ldr	r2, [r7, #8]
 8000682:	7912      	ldrb	r2, [r2, #4]
 8000684:	440a      	add	r2, r1
 8000686:	0412      	lsls	r2, r2, #16
 8000688:	431a      	orrs	r2, r3
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	/* Flush SRAM */
	u32 pointer;
	pointer = (u32)L_msg;
 8000690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000692:	623b      	str	r3, [r7, #32]
	for(u8 i = 0; i < 212; i++){
 8000694:	2300      	movs	r3, #0
 8000696:	77fb      	strb	r3, [r7, #31]
 8000698:	e008      	b.n	80006ac <CAN_voidInit+0x1bc>
		*(u32 *)(pointer) = 0x00000000U;
 800069a:	6a3b      	ldr	r3, [r7, #32]
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
		pointer += 4;
 80006a0:	6a3b      	ldr	r3, [r7, #32]
 80006a2:	3304      	adds	r3, #4
 80006a4:	623b      	str	r3, [r7, #32]
	for(u8 i = 0; i < 212; i++){
 80006a6:	7ffb      	ldrb	r3, [r7, #31]
 80006a8:	3301      	adds	r3, #1
 80006aa:	77fb      	strb	r3, [r7, #31]
 80006ac:	7ffb      	ldrb	r3, [r7, #31]
 80006ae:	2bd3      	cmp	r3, #211	; 0xd3
 80006b0:	d9f3      	bls.n	800069a <CAN_voidInit+0x1aa>
	}

	/* Store The IDs */
	u32 L_temp;
	u8 L_idIndex = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	77bb      	strb	r3, [r7, #30]
	for(u8 i = 0; i < A_rxConfig->FIFO0_numberOfIDs; i++){
 80006b6:	2300      	movs	r3, #0
 80006b8:	777b      	strb	r3, [r7, #29]
 80006ba:	e023      	b.n	8000704 <CAN_voidInit+0x214>
		L_temp = A_rxConfig->FIFO0_IDs[i];			// SID1
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	689a      	ldr	r2, [r3, #8]
 80006c0:	7f7b      	ldrb	r3, [r7, #29]
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	4413      	add	r3, r2
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	617b      	str	r3, [r7, #20]
		L_temp |= (A_rxConfig->FIFO0_IDs[i] << 16);	// SID2
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	689a      	ldr	r2, [r3, #8]
 80006ce:	7f7b      	ldrb	r3, [r7, #29]
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	4413      	add	r3, r2
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	041b      	lsls	r3, r3, #16
 80006d8:	697a      	ldr	r2, [r7, #20]
 80006da:	4313      	orrs	r3, r2
 80006dc:	617b      	str	r3, [r7, #20]
		L_temp |= (1 << 27);				// Store in FIFO0 (if filter matches)
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80006e4:	617b      	str	r3, [r7, #20]
		L_temp |= (1 << 30);				// 01: Dual ID filter for SFID1 or SFID2
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80006ec:	617b      	str	r3, [r7, #20]

		L_msg->standardID[L_idIndex++] = L_temp;
 80006ee:	7fbb      	ldrb	r3, [r7, #30]
 80006f0:	1c5a      	adds	r2, r3, #1
 80006f2:	77ba      	strb	r2, [r7, #30]
 80006f4:	4619      	mov	r1, r3
 80006f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f8:	697a      	ldr	r2, [r7, #20]
 80006fa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	for(u8 i = 0; i < A_rxConfig->FIFO0_numberOfIDs; i++){
 80006fe:	7f7b      	ldrb	r3, [r7, #29]
 8000700:	3301      	adds	r3, #1
 8000702:	777b      	strb	r3, [r7, #29]
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	78db      	ldrb	r3, [r3, #3]
 8000708:	7f7a      	ldrb	r2, [r7, #29]
 800070a:	429a      	cmp	r2, r3
 800070c:	d3d6      	bcc.n	80006bc <CAN_voidInit+0x1cc>
	}

	for(u8 i = 0; i < A_rxConfig->FIFO1_numberOfIDs; i++){
 800070e:	2300      	movs	r3, #0
 8000710:	773b      	strb	r3, [r7, #28]
 8000712:	e023      	b.n	800075c <CAN_voidInit+0x26c>
		L_temp = A_rxConfig->FIFO1_IDs[i];			// SID1
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	68da      	ldr	r2, [r3, #12]
 8000718:	7f3b      	ldrb	r3, [r7, #28]
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	4413      	add	r3, r2
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	617b      	str	r3, [r7, #20]
		L_temp |= (A_rxConfig->FIFO1_IDs[i] << 16);	// SID2
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	68da      	ldr	r2, [r3, #12]
 8000726:	7f3b      	ldrb	r3, [r7, #28]
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	4413      	add	r3, r2
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	041b      	lsls	r3, r3, #16
 8000730:	697a      	ldr	r2, [r7, #20]
 8000732:	4313      	orrs	r3, r2
 8000734:	617b      	str	r3, [r7, #20]
		L_temp |= (1 << 28);				// Store in FIFO1 (if filter matches)
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073c:	617b      	str	r3, [r7, #20]
		L_temp |= (1 << 30);				// 01: Dual ID filter for SFID1 or SFID2
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000744:	617b      	str	r3, [r7, #20]

		L_msg->standardID[L_idIndex++] = L_temp;
 8000746:	7fbb      	ldrb	r3, [r7, #30]
 8000748:	1c5a      	adds	r2, r3, #1
 800074a:	77ba      	strb	r2, [r7, #30]
 800074c:	4619      	mov	r1, r3
 800074e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000750:	697a      	ldr	r2, [r7, #20]
 8000752:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	for(u8 i = 0; i < A_rxConfig->FIFO1_numberOfIDs; i++){
 8000756:	7f3b      	ldrb	r3, [r7, #28]
 8000758:	3301      	adds	r3, #1
 800075a:	773b      	strb	r3, [r7, #28]
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	791b      	ldrb	r3, [r3, #4]
 8000760:	7f3a      	ldrb	r2, [r7, #28]
 8000762:	429a      	cmp	r2, r3
 8000764:	d3d6      	bcc.n	8000714 <CAN_voidInit+0x224>
	}

	/* Transmitter Configuration */
	if(A_txConfig->bufferType == CAN_TX_BUFFER_FIFO)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	785b      	ldrb	r3, [r3, #1]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d114      	bne.n	8000798 <CAN_voidInit+0x2a8>
		A_canx->TXBC &= ~(1 << 24);
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000774:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800077e:	e013      	b.n	80007a8 <CAN_voidInit+0x2b8>
 8000780:	40006400 	.word	0x40006400
 8000784:	4000a400 	.word	0x4000a400
 8000788:	40006800 	.word	0x40006800
 800078c:	4000a800 	.word	0x4000a800
 8000790:	40006c00 	.word	0x40006c00
 8000794:	4000ac00 	.word	0x4000ac00
	else // Queue FIFO
		A_canx->TXBC |= (1 << 24);
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800079e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	if(A_txConfig->transmitPause == CAN_TX_PAUSE_DISABLE)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d106      	bne.n	80007be <CAN_voidInit+0x2ce>
		A_canx->CCCR &= ~(1 << 14);
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	619a      	str	r2, [r3, #24]
 80007bc:	e005      	b.n	80007ca <CAN_voidInit+0x2da>
	else
		A_canx->CCCR |= (1 << 14);
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	619a      	str	r2, [r3, #24]

	if (A_txConfig->automaticTransmission == CAN_AUTOMATIC_TRANSMISSION_ENABLE)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	789b      	ldrb	r3, [r3, #2]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d106      	bne.n	80007e0 <CAN_voidInit+0x2f0>
		A_canx->CCCR &= ~(1 << 6);
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	619a      	str	r2, [r3, #24]
 80007de:	e005      	b.n	80007ec <CAN_voidInit+0x2fc>
	else
		A_canx->CCCR |= (1 << 6);
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	619a      	str	r2, [r3, #24]

	/* Exit Initialization and Enter Normal mode */
	A_canx->CCCR &= ~(1 << 1);
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f023 0202 	bic.w	r2, r3, #2
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	619a      	str	r2, [r3, #24]
	A_canx->CCCR &= ~(1 << 0);
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f023 0201 	bic.w	r2, r3, #1
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	619a      	str	r2, [r3, #24]
}
 8000804:	bf00      	nop
 8000806:	372c      	adds	r7, #44	; 0x2c
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <CAN_voidReceiveDataFrame>:

void CAN_voidReceiveDataFrame(CAN_RegMap_t* A_canx, CAN_Frame_t* A_frame, u8 A_fifox)
{
 8000810:	b480      	push	{r7}
 8000812:	b087      	sub	sp, #28
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	4613      	mov	r3, r2
 800081c:	71fb      	strb	r3, [r7, #7]
	CAN_MSG_SRAM_t* L_msg;
	if(A_canx == CAN1)
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	4a98      	ldr	r2, [pc, #608]	; (8000a84 <CAN_voidReceiveDataFrame+0x274>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d102      	bne.n	800082c <CAN_voidReceiveDataFrame+0x1c>
		L_msg = CAN1_MESSAGES;
 8000826:	4b98      	ldr	r3, [pc, #608]	; (8000a88 <CAN_voidReceiveDataFrame+0x278>)
 8000828:	617b      	str	r3, [r7, #20]
 800082a:	e00c      	b.n	8000846 <CAN_voidReceiveDataFrame+0x36>
	else if(A_canx == CAN2)
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	4a97      	ldr	r2, [pc, #604]	; (8000a8c <CAN_voidReceiveDataFrame+0x27c>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d102      	bne.n	800083a <CAN_voidReceiveDataFrame+0x2a>
		L_msg = CAN2_MESSAGES;
 8000834:	4b96      	ldr	r3, [pc, #600]	; (8000a90 <CAN_voidReceiveDataFrame+0x280>)
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	e005      	b.n	8000846 <CAN_voidReceiveDataFrame+0x36>
	else if(A_canx == CAN3)
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	4a95      	ldr	r2, [pc, #596]	; (8000a94 <CAN_voidReceiveDataFrame+0x284>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d101      	bne.n	8000846 <CAN_voidReceiveDataFrame+0x36>
			L_msg = CAN3_MESSAGES;
 8000842:	4b95      	ldr	r3, [pc, #596]	; (8000a98 <CAN_voidReceiveDataFrame+0x288>)
 8000844:	617b      	str	r3, [r7, #20]

	if(A_fifox == 0)
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2b00      	cmp	r3, #0
 800084a:	f040 8085 	bne.w	8000958 <CAN_voidReceiveDataFrame+0x148>
	{
		u8 L_getIndex = (u8)((A_canx->RXF0S & (0b11 << 8)) >> 8);
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000854:	0a1b      	lsrs	r3, r3, #8
 8000856:	b2db      	uxtb	r3, r3
 8000858:	f003 0303 	and.w	r3, r3, #3
 800085c:	743b      	strb	r3, [r7, #16]

		A_frame->ide = ((L_msg->RxFIFO0[L_getIndex].ID >> 30) & 1);
 800085e:	7c3a      	ldrb	r2, [r7, #16]
 8000860:	6979      	ldr	r1, [r7, #20]
 8000862:	4613      	mov	r3, r2
 8000864:	00db      	lsls	r3, r3, #3
 8000866:	4413      	add	r3, r2
 8000868:	00db      	lsls	r3, r3, #3
 800086a:	440b      	add	r3, r1
 800086c:	33b0      	adds	r3, #176	; 0xb0
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	0f9b      	lsrs	r3, r3, #30
 8000872:	b2db      	uxtb	r3, r3
 8000874:	f003 0301 	and.w	r3, r3, #1
 8000878:	b2da      	uxtb	r2, r3
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	719a      	strb	r2, [r3, #6]
		A_frame->rtr = ((L_msg->RxFIFO0[L_getIndex].ID >> 29) & 1);
 800087e:	7c3a      	ldrb	r2, [r7, #16]
 8000880:	6979      	ldr	r1, [r7, #20]
 8000882:	4613      	mov	r3, r2
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	4413      	add	r3, r2
 8000888:	00db      	lsls	r3, r3, #3
 800088a:	440b      	add	r3, r1
 800088c:	33b0      	adds	r3, #176	; 0xb0
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	0f5b      	lsrs	r3, r3, #29
 8000892:	b2db      	uxtb	r3, r3
 8000894:	f003 0301 	and.w	r3, r3, #1
 8000898:	b2da      	uxtb	r2, r3
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	715a      	strb	r2, [r3, #5]

		if(A_frame->ide == CAN_FRAME_STANDARD_ID)
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	799b      	ldrb	r3, [r3, #6]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d10e      	bne.n	80008c4 <CAN_voidReceiveDataFrame+0xb4>
			A_frame->id = (L_msg->RxFIFO0[L_getIndex].ID >> 18) & (0b11111111111);
 80008a6:	7c3a      	ldrb	r2, [r7, #16]
 80008a8:	6979      	ldr	r1, [r7, #20]
 80008aa:	4613      	mov	r3, r2
 80008ac:	00db      	lsls	r3, r3, #3
 80008ae:	4413      	add	r3, r2
 80008b0:	00db      	lsls	r3, r3, #3
 80008b2:	440b      	add	r3, r1
 80008b4:	33b0      	adds	r3, #176	; 0xb0
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	0c9b      	lsrs	r3, r3, #18
 80008ba:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	e00c      	b.n	80008de <CAN_voidReceiveDataFrame+0xce>
		else
			A_frame->id = L_msg->RxFIFO0[L_getIndex].ID & (0x1FFFFFFF);
 80008c4:	7c3a      	ldrb	r2, [r7, #16]
 80008c6:	6979      	ldr	r1, [r7, #20]
 80008c8:	4613      	mov	r3, r2
 80008ca:	00db      	lsls	r3, r3, #3
 80008cc:	4413      	add	r3, r2
 80008ce:	00db      	lsls	r3, r3, #3
 80008d0:	440b      	add	r3, r1
 80008d2:	33b0      	adds	r3, #176	; 0xb0
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	601a      	str	r2, [r3, #0]

		if(A_frame->rtr == CAN_FRAME_DATA)
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	795b      	ldrb	r3, [r3, #5]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d133      	bne.n	800094e <CAN_voidReceiveDataFrame+0x13e>
		{
			A_frame->dlc = (u8)((L_msg->RxFIFO0[L_getIndex].DLC >> 16) & (0b1111));
 80008e6:	7c3a      	ldrb	r2, [r7, #16]
 80008e8:	6979      	ldr	r1, [r7, #20]
 80008ea:	4613      	mov	r3, r2
 80008ec:	00db      	lsls	r3, r3, #3
 80008ee:	4413      	add	r3, r2
 80008f0:	00db      	lsls	r3, r3, #3
 80008f2:	440b      	add	r3, r1
 80008f4:	33b4      	adds	r3, #180	; 0xb4
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	0c1b      	lsrs	r3, r3, #16
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	f003 030f 	and.w	r3, r3, #15
 8000900:	b2da      	uxtb	r2, r3
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	711a      	strb	r2, [r3, #4]
			for(u8 i = 0; i < A_frame->dlc; i++)
 8000906:	2300      	movs	r3, #0
 8000908:	74fb      	strb	r3, [r7, #19]
 800090a:	e01b      	b.n	8000944 <CAN_voidReceiveDataFrame+0x134>
				A_frame->data[i] = ((L_msg->RxFIFO0[L_getIndex].data[i/4] >> (8*(i%4))) & (0xFF));
 800090c:	7c3a      	ldrb	r2, [r7, #16]
 800090e:	7cfb      	ldrb	r3, [r7, #19]
 8000910:	089b      	lsrs	r3, r3, #2
 8000912:	b2db      	uxtb	r3, r3
 8000914:	4618      	mov	r0, r3
 8000916:	6979      	ldr	r1, [r7, #20]
 8000918:	4613      	mov	r3, r2
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	4413      	add	r3, r2
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	4403      	add	r3, r0
 8000922:	332e      	adds	r3, #46	; 0x2e
 8000924:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000928:	7cfb      	ldrb	r3, [r7, #19]
 800092a:	f003 0303 	and.w	r3, r3, #3
 800092e:	00db      	lsls	r3, r3, #3
 8000930:	40da      	lsrs	r2, r3
 8000932:	7cfb      	ldrb	r3, [r7, #19]
 8000934:	b2d1      	uxtb	r1, r2
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	4413      	add	r3, r2
 800093a:	460a      	mov	r2, r1
 800093c:	71da      	strb	r2, [r3, #7]
			for(u8 i = 0; i < A_frame->dlc; i++)
 800093e:	7cfb      	ldrb	r3, [r7, #19]
 8000940:	3301      	adds	r3, #1
 8000942:	74fb      	strb	r3, [r7, #19]
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	791b      	ldrb	r3, [r3, #4]
 8000948:	7cfa      	ldrb	r2, [r7, #19]
 800094a:	429a      	cmp	r2, r3
 800094c:	d3de      	bcc.n	800090c <CAN_voidReceiveDataFrame+0xfc>
		}

		// Acknowledge Reading
		A_canx->RXF0A = L_getIndex;
 800094e:	7c3a      	ldrb	r2, [r7, #16]
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		}

		// Acknowledge Reading
		A_canx->RXF1A |= (1 << L_getIndex);
	}
}
 8000956:	e08f      	b.n	8000a78 <CAN_voidReceiveDataFrame+0x268>
		u8 L_getIndex = (u8)((A_canx->RXF1S & (0b11 << 8)) >> 8);
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800095e:	0a1b      	lsrs	r3, r3, #8
 8000960:	b2db      	uxtb	r3, r3
 8000962:	f003 0303 	and.w	r3, r3, #3
 8000966:	747b      	strb	r3, [r7, #17]
		A_frame->ide = ((L_msg->RxFIFO1[L_getIndex].ID >> 30) & 1);
 8000968:	7c7a      	ldrb	r2, [r7, #17]
 800096a:	6979      	ldr	r1, [r7, #20]
 800096c:	4613      	mov	r3, r2
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	4413      	add	r3, r2
 8000972:	00db      	lsls	r3, r3, #3
 8000974:	440b      	add	r3, r1
 8000976:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	0f9b      	lsrs	r3, r3, #30
 800097e:	b2db      	uxtb	r3, r3
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	b2da      	uxtb	r2, r3
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	719a      	strb	r2, [r3, #6]
		A_frame->rtr = ((L_msg->RxFIFO1[L_getIndex].ID >> 29) & 1);
 800098a:	7c7a      	ldrb	r2, [r7, #17]
 800098c:	6979      	ldr	r1, [r7, #20]
 800098e:	4613      	mov	r3, r2
 8000990:	00db      	lsls	r3, r3, #3
 8000992:	4413      	add	r3, r2
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	440b      	add	r3, r1
 8000998:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	0f5b      	lsrs	r3, r3, #29
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	715a      	strb	r2, [r3, #5]
		if(A_frame->ide == CAN_FRAME_STANDARD_ID)
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	799b      	ldrb	r3, [r3, #6]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d10f      	bne.n	80009d4 <CAN_voidReceiveDataFrame+0x1c4>
			A_frame->id = (L_msg->RxFIFO1[L_getIndex].ID >> 18) & (0b11111111111);
 80009b4:	7c7a      	ldrb	r2, [r7, #17]
 80009b6:	6979      	ldr	r1, [r7, #20]
 80009b8:	4613      	mov	r3, r2
 80009ba:	00db      	lsls	r3, r3, #3
 80009bc:	4413      	add	r3, r2
 80009be:	00db      	lsls	r3, r3, #3
 80009c0:	440b      	add	r3, r1
 80009c2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	0c9b      	lsrs	r3, r3, #18
 80009ca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	e00d      	b.n	80009f0 <CAN_voidReceiveDataFrame+0x1e0>
			A_frame->id = L_msg->RxFIFO1[L_getIndex].ID & (0x1FFFFFFF);
 80009d4:	7c7a      	ldrb	r2, [r7, #17]
 80009d6:	6979      	ldr	r1, [r7, #20]
 80009d8:	4613      	mov	r3, r2
 80009da:	00db      	lsls	r3, r3, #3
 80009dc:	4413      	add	r3, r2
 80009de:	00db      	lsls	r3, r3, #3
 80009e0:	440b      	add	r3, r1
 80009e2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	601a      	str	r2, [r3, #0]
		if(A_frame->rtr == CAN_FRAME_DATA)
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	795b      	ldrb	r3, [r3, #5]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d134      	bne.n	8000a62 <CAN_voidReceiveDataFrame+0x252>
			A_frame->dlc = (u8)((L_msg->RxFIFO1[L_getIndex].DLC >> 16) & (0b1111));
 80009f8:	7c7a      	ldrb	r2, [r7, #17]
 80009fa:	6979      	ldr	r1, [r7, #20]
 80009fc:	4613      	mov	r3, r2
 80009fe:	00db      	lsls	r3, r3, #3
 8000a00:	4413      	add	r3, r2
 8000a02:	00db      	lsls	r3, r3, #3
 8000a04:	440b      	add	r3, r1
 8000a06:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	0c1b      	lsrs	r3, r3, #16
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	f003 030f 	and.w	r3, r3, #15
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	711a      	strb	r2, [r3, #4]
			for(u8 i = 0; i < A_frame->dlc; i++)
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	74bb      	strb	r3, [r7, #18]
 8000a1e:	e01b      	b.n	8000a58 <CAN_voidReceiveDataFrame+0x248>
				A_frame->data[i] = ((L_msg->RxFIFO1[L_getIndex].data[i/4] >> (8*(i%4))) & (0xFF));
 8000a20:	7c7a      	ldrb	r2, [r7, #17]
 8000a22:	7cbb      	ldrb	r3, [r7, #18]
 8000a24:	089b      	lsrs	r3, r3, #2
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	4618      	mov	r0, r3
 8000a2a:	6979      	ldr	r1, [r7, #20]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	00db      	lsls	r3, r3, #3
 8000a30:	4413      	add	r3, r2
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	4403      	add	r3, r0
 8000a36:	3364      	adds	r3, #100	; 0x64
 8000a38:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000a3c:	7cbb      	ldrb	r3, [r7, #18]
 8000a3e:	f003 0303 	and.w	r3, r3, #3
 8000a42:	00db      	lsls	r3, r3, #3
 8000a44:	40da      	lsrs	r2, r3
 8000a46:	7cbb      	ldrb	r3, [r7, #18]
 8000a48:	b2d1      	uxtb	r1, r2
 8000a4a:	68ba      	ldr	r2, [r7, #8]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	460a      	mov	r2, r1
 8000a50:	71da      	strb	r2, [r3, #7]
			for(u8 i = 0; i < A_frame->dlc; i++)
 8000a52:	7cbb      	ldrb	r3, [r7, #18]
 8000a54:	3301      	adds	r3, #1
 8000a56:	74bb      	strb	r3, [r7, #18]
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	791b      	ldrb	r3, [r3, #4]
 8000a5c:	7cba      	ldrb	r2, [r7, #18]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d3de      	bcc.n	8000a20 <CAN_voidReceiveDataFrame+0x210>
		A_canx->RXF1A |= (1 << L_getIndex);
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000a68:	7c7a      	ldrb	r2, [r7, #17]
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a70:	431a      	orrs	r2, r3
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 8000a78:	bf00      	nop
 8000a7a:	371c      	adds	r7, #28
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	40006400 	.word	0x40006400
 8000a88:	4000a400 	.word	0x4000a400
 8000a8c:	40006800 	.word	0x40006800
 8000a90:	4000a800 	.word	0x4000a800
 8000a94:	40006c00 	.word	0x40006c00
 8000a98:	4000ac00 	.word	0x4000ac00

08000a9c <CAN_u8GetReceivedMessagesCount>:

u8 CAN_u8GetReceivedMessagesCount(CAN_RegMap_t* A_canx, u8 A_fifox)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	70fb      	strb	r3, [r7, #3]
	u8 L_result;
	if(A_fifox == CAN_RX_FIFO0)
 8000aa8:	78fb      	ldrb	r3, [r7, #3]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d107      	bne.n	8000abe <CAN_u8GetReceivedMessagesCount+0x22>
		L_result = (u8)(A_canx->RXF0S & (0b1111 << 0));
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	f003 030f 	and.w	r3, r3, #15
 8000aba:	73fb      	strb	r3, [r7, #15]
 8000abc:	e006      	b.n	8000acc <CAN_u8GetReceivedMessagesCount+0x30>
	else
		L_result = (u8)(A_canx->RXF1S & (0b1111 << 0));
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	f003 030f 	and.w	r3, r3, #15
 8000aca:	73fb      	strb	r3, [r7, #15]
	return L_result;
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3714      	adds	r7, #20
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
	...

08000adc <CAN_voidSendDataFrame>:
		L_result = (A_canx->RXF1S & (1 << 24)) >> 24;
	return L_result;
}

void CAN_voidSendDataFrame(CAN_RegMap_t* A_canx, CAN_Frame_t* A_frame)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b089      	sub	sp, #36	; 0x24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
	CAN_MSG_SRAM_t* L_msg;
	if(A_canx == CAN1)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a54      	ldr	r2, [pc, #336]	; (8000c3c <CAN_voidSendDataFrame+0x160>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d102      	bne.n	8000af4 <CAN_voidSendDataFrame+0x18>
		L_msg = CAN1_MESSAGES;
 8000aee:	4b54      	ldr	r3, [pc, #336]	; (8000c40 <CAN_voidSendDataFrame+0x164>)
 8000af0:	61fb      	str	r3, [r7, #28]
 8000af2:	e00c      	b.n	8000b0e <CAN_voidSendDataFrame+0x32>
	else if(A_canx == CAN2)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4a53      	ldr	r2, [pc, #332]	; (8000c44 <CAN_voidSendDataFrame+0x168>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d102      	bne.n	8000b02 <CAN_voidSendDataFrame+0x26>
		L_msg = CAN2_MESSAGES;
 8000afc:	4b52      	ldr	r3, [pc, #328]	; (8000c48 <CAN_voidSendDataFrame+0x16c>)
 8000afe:	61fb      	str	r3, [r7, #28]
 8000b00:	e005      	b.n	8000b0e <CAN_voidSendDataFrame+0x32>
	else if(A_canx == CAN3)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a51      	ldr	r2, [pc, #324]	; (8000c4c <CAN_voidSendDataFrame+0x170>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d101      	bne.n	8000b0e <CAN_voidSendDataFrame+0x32>
			L_msg = CAN3_MESSAGES;
 8000b0a:	4b51      	ldr	r3, [pc, #324]	; (8000c50 <CAN_voidSendDataFrame+0x174>)
 8000b0c:	61fb      	str	r3, [r7, #28]

	// Define the put index
	u8 L_putIndex = (u8)((A_canx->TXFQS >> 16) & 0b11);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000b14:	0c1b      	lsrs	r3, r3, #16
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	f003 0303 	and.w	r3, r3, #3
 8000b1c:	73bb      	strb	r3, [r7, #14]

	// write the message
	u32 L_tmp = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61bb      	str	r3, [r7, #24]
	if(A_frame->ide == CAN_FRAME_EXTENDED_ID){
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	799b      	ldrb	r3, [r3, #6]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d107      	bne.n	8000b3a <CAN_voidSendDataFrame+0x5e>
		L_tmp = A_frame->id;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	61bb      	str	r3, [r7, #24]
		L_tmp |= (1 << 30); // XTD bit
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000b36:	61bb      	str	r3, [r7, #24]
 8000b38:	e003      	b.n	8000b42 <CAN_voidSendDataFrame+0x66>
	}
	else{
		L_tmp = A_frame->id << 18;
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	049b      	lsls	r3, r3, #18
 8000b40:	61bb      	str	r3, [r7, #24]
	}
	if(A_frame->rtr == CAN_FRAME_REMOTE){
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	795b      	ldrb	r3, [r3, #5]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d106      	bne.n	8000b58 <CAN_voidSendDataFrame+0x7c>
		L_tmp |= (1 << 29);
 8000b4a:	69bb      	ldr	r3, [r7, #24]
 8000b4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b50:	61bb      	str	r3, [r7, #24]
		A_frame->dlc = 0;
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	2200      	movs	r2, #0
 8000b56:	711a      	strb	r2, [r3, #4]
	}
	L_msg->TxBuffer[L_putIndex].ID = L_tmp;
 8000b58:	7bba      	ldrb	r2, [r7, #14]
 8000b5a:	69f9      	ldr	r1, [r7, #28]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	00db      	lsls	r3, r3, #3
 8000b60:	4413      	add	r3, r2
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	440b      	add	r3, r1
 8000b66:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000b6a:	69ba      	ldr	r2, [r7, #24]
 8000b6c:	601a      	str	r2, [r3, #0]
	L_msg->TxBuffer[L_putIndex].DLC &= ~(1 << 23); // Don't store event
	L_msg->TxBuffer[L_putIndex].DLC &= ~(1 << 21); // Classic Can
	L_msg->TxBuffer[L_putIndex].DLC &= ~(1 << 20); // No bit rate switching
*/

	L_msg->TxBuffer[L_putIndex].DLC = (A_frame->dlc << 16); // write DLC
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	791b      	ldrb	r3, [r3, #4]
 8000b72:	041b      	lsls	r3, r3, #16
 8000b74:	7bba      	ldrb	r2, [r7, #14]
 8000b76:	4618      	mov	r0, r3
 8000b78:	69f9      	ldr	r1, [r7, #28]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	4413      	add	r3, r2
 8000b80:	00db      	lsls	r3, r3, #3
 8000b82:	440b      	add	r3, r1
 8000b84:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000b88:	6018      	str	r0, [r3, #0]

	u32 data0 = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
	u32 data1 = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
	for(u8 i = 0; i < A_frame->dlc; i++)
 8000b92:	2300      	movs	r3, #0
 8000b94:	73fb      	strb	r3, [r7, #15]
 8000b96:	e024      	b.n	8000be2 <CAN_voidSendDataFrame+0x106>
	{
		 if(i < 4)
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
 8000b9a:	2b03      	cmp	r3, #3
 8000b9c:	d80f      	bhi.n	8000bbe <CAN_voidSendDataFrame+0xe2>
			 data0 |= (u32)(A_frame->data[i] << (8 * (i%4)));
 8000b9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ba0:	683a      	ldr	r2, [r7, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	79db      	ldrb	r3, [r3, #7]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	f003 0303 	and.w	r3, r3, #3
 8000bae:	00db      	lsls	r3, r3, #3
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	e00e      	b.n	8000bdc <CAN_voidSendDataFrame+0x100>
		 else
			 data1 |= (u32)(A_frame->data[i] << (8 * (i%4)));
 8000bbe:	7bfb      	ldrb	r3, [r7, #15]
 8000bc0:	683a      	ldr	r2, [r7, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	79db      	ldrb	r3, [r3, #7]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
 8000bca:	f003 0303 	and.w	r3, r3, #3
 8000bce:	00db      	lsls	r3, r3, #3
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	693b      	ldr	r3, [r7, #16]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]
	for(u8 i = 0; i < A_frame->dlc; i++)
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
 8000bde:	3301      	adds	r3, #1
 8000be0:	73fb      	strb	r3, [r7, #15]
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	791b      	ldrb	r3, [r3, #4]
 8000be6:	7bfa      	ldrb	r2, [r7, #15]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d3d5      	bcc.n	8000b98 <CAN_voidSendDataFrame+0xbc>
	}
	L_msg->TxBuffer[L_putIndex].data[0] = data0;
 8000bec:	7bba      	ldrb	r2, [r7, #14]
 8000bee:	69f9      	ldr	r1, [r7, #28]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	00db      	lsls	r3, r3, #3
 8000bf4:	4413      	add	r3, r2
 8000bf6:	00db      	lsls	r3, r3, #3
 8000bf8:	440b      	add	r3, r1
 8000bfa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000bfe:	697a      	ldr	r2, [r7, #20]
 8000c00:	601a      	str	r2, [r3, #0]
	L_msg->TxBuffer[L_putIndex].data[1] = data1;
 8000c02:	7bba      	ldrb	r2, [r7, #14]
 8000c04:	69f9      	ldr	r1, [r7, #28]
 8000c06:	4613      	mov	r3, r2
 8000c08:	00db      	lsls	r3, r3, #3
 8000c0a:	4413      	add	r3, r2
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	440b      	add	r3, r1
 8000c10:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	601a      	str	r2, [r3, #0]

	// Request Transmission
	A_canx->TXBAR |= (1 << L_putIndex);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000c1e:	7bba      	ldrb	r2, [r7, #14]
 8000c20:	2101      	movs	r1, #1
 8000c22:	fa01 f202 	lsl.w	r2, r1, r2
 8000c26:	431a      	orrs	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	// Wait for transmission to be done
	//while(! ((A_canx->TXBTO >> L_putIndex) & 1) );
}
 8000c2e:	bf00      	nop
 8000c30:	3724      	adds	r7, #36	; 0x24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	40006400 	.word	0x40006400
 8000c40:	4000a400 	.word	0x4000a400
 8000c44:	40006800 	.word	0x40006800
 8000c48:	4000a800 	.word	0x4000a800
 8000c4c:	40006c00 	.word	0x40006c00
 8000c50:	4000ac00 	.word	0x4000ac00

08000c54 <GPIO_voidSetPinMode>:
/************************************************************/
static void GPIO_voidSetPinPUPD(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8PullU_D);
static void GPIO_voidAltFunc(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8AltFunc);

static void GPIO_voidSetPinMode(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8Mode)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
 8000c5e:	460b      	mov	r3, r1
 8000c60:	71bb      	strb	r3, [r7, #6]
 8000c62:	4613      	mov	r3, r2
 8000c64:	717b      	strb	r3, [r7, #5]
	GPIO_RegMap_t *GPIOx = NULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
	switch(A_u8PortID)
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	2b06      	cmp	r3, #6
 8000c6e:	d827      	bhi.n	8000cc0 <GPIO_voidSetPinMode+0x6c>
 8000c70:	a201      	add	r2, pc, #4	; (adr r2, 8000c78 <GPIO_voidSetPinMode+0x24>)
 8000c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c76:	bf00      	nop
 8000c78:	08000c95 	.word	0x08000c95
 8000c7c:	08000c9d 	.word	0x08000c9d
 8000c80:	08000ca3 	.word	0x08000ca3
 8000c84:	08000ca9 	.word	0x08000ca9
 8000c88:	08000caf 	.word	0x08000caf
 8000c8c:	08000cb5 	.word	0x08000cb5
 8000c90:	08000cbb 	.word	0x08000cbb
	{
	case GPIO_PORTA:
		GPIOx = GPIOA;
 8000c94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c98:	60fb      	str	r3, [r7, #12]
		break;
 8000c9a:	e012      	b.n	8000cc2 <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTB:
		GPIOx = GPIOB;
 8000c9c:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <GPIO_voidSetPinMode+0xa4>)
 8000c9e:	60fb      	str	r3, [r7, #12]
		break;
 8000ca0:	e00f      	b.n	8000cc2 <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTC:
		GPIOx = GPIOC;
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <GPIO_voidSetPinMode+0xa8>)
 8000ca4:	60fb      	str	r3, [r7, #12]
		break;
 8000ca6:	e00c      	b.n	8000cc2 <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTD:
		GPIOx = GPIOD;
 8000ca8:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <GPIO_voidSetPinMode+0xac>)
 8000caa:	60fb      	str	r3, [r7, #12]
		break;
 8000cac:	e009      	b.n	8000cc2 <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTE:
		GPIOx = GPIOE;
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <GPIO_voidSetPinMode+0xb0>)
 8000cb0:	60fb      	str	r3, [r7, #12]
		break;
 8000cb2:	e006      	b.n	8000cc2 <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTF:
		GPIOx = GPIOF;
 8000cb4:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <GPIO_voidSetPinMode+0xb4>)
 8000cb6:	60fb      	str	r3, [r7, #12]
		break;
 8000cb8:	e003      	b.n	8000cc2 <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTG:
		GPIOx = GPIOG;
 8000cba:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <GPIO_voidSetPinMode+0xb8>)
 8000cbc:	60fb      	str	r3, [r7, #12]
		break;
 8000cbe:	e000      	b.n	8000cc2 <GPIO_voidSetPinMode+0x6e>
	default:
		/* Port ID out of range */
		break;
 8000cc0:	bf00      	nop
	}
	GPIOx->MODER &= ~(0b11<<(2*A_u8PinNo));
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	79ba      	ldrb	r2, [r7, #6]
 8000cc8:	0052      	lsls	r2, r2, #1
 8000cca:	2103      	movs	r1, #3
 8000ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8000cd0:	43d2      	mvns	r2, r2
 8000cd2:	401a      	ands	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	601a      	str	r2, [r3, #0]
	GPIOx->MODER |= (A_u8Mode<<(2*A_u8PinNo));
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	7979      	ldrb	r1, [r7, #5]
 8000cde:	79ba      	ldrb	r2, [r7, #6]
 8000ce0:	0052      	lsls	r2, r2, #1
 8000ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce6:	431a      	orrs	r2, r3
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	601a      	str	r2, [r3, #0]
}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	48000400 	.word	0x48000400
 8000cfc:	48000800 	.word	0x48000800
 8000d00:	48000c00 	.word	0x48000c00
 8000d04:	48001000 	.word	0x48001000
 8000d08:	48001400 	.word	0x48001400
 8000d0c:	48001800 	.word	0x48001800

08000d10 <GPIO_voidSetPinOutput_typ_spd>:
static void GPIO_voidSetPinOutput_typ_spd(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8Output_t, u8 A_u8OutputSpeed)
{
 8000d10:	b490      	push	{r4, r7}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4604      	mov	r4, r0
 8000d18:	4608      	mov	r0, r1
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4623      	mov	r3, r4
 8000d20:	71fb      	strb	r3, [r7, #7]
 8000d22:	4603      	mov	r3, r0
 8000d24:	71bb      	strb	r3, [r7, #6]
 8000d26:	460b      	mov	r3, r1
 8000d28:	717b      	strb	r3, [r7, #5]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	713b      	strb	r3, [r7, #4]
	GPIO_RegMap_t *GPIOx = NULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
	switch(A_u8PortID)
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	2b06      	cmp	r3, #6
 8000d36:	d827      	bhi.n	8000d88 <GPIO_voidSetPinOutput_typ_spd+0x78>
 8000d38:	a201      	add	r2, pc, #4	; (adr r2, 8000d40 <GPIO_voidSetPinOutput_typ_spd+0x30>)
 8000d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d3e:	bf00      	nop
 8000d40:	08000d5d 	.word	0x08000d5d
 8000d44:	08000d65 	.word	0x08000d65
 8000d48:	08000d6b 	.word	0x08000d6b
 8000d4c:	08000d71 	.word	0x08000d71
 8000d50:	08000d77 	.word	0x08000d77
 8000d54:	08000d7d 	.word	0x08000d7d
 8000d58:	08000d83 	.word	0x08000d83
	{
	case GPIO_PORTA:
		GPIOx = GPIOA;
 8000d5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000d60:	60fb      	str	r3, [r7, #12]
		break;
 8000d62:	e012      	b.n	8000d8a <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTB:
		GPIOx = GPIOB;
 8000d64:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <GPIO_voidSetPinOutput_typ_spd+0xe4>)
 8000d66:	60fb      	str	r3, [r7, #12]
		break;
 8000d68:	e00f      	b.n	8000d8a <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTC:
		GPIOx = GPIOC;
 8000d6a:	4b23      	ldr	r3, [pc, #140]	; (8000df8 <GPIO_voidSetPinOutput_typ_spd+0xe8>)
 8000d6c:	60fb      	str	r3, [r7, #12]
		break;
 8000d6e:	e00c      	b.n	8000d8a <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTD:
		GPIOx = GPIOD;
 8000d70:	4b22      	ldr	r3, [pc, #136]	; (8000dfc <GPIO_voidSetPinOutput_typ_spd+0xec>)
 8000d72:	60fb      	str	r3, [r7, #12]
		break;
 8000d74:	e009      	b.n	8000d8a <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTE:
		GPIOx = GPIOE;
 8000d76:	4b22      	ldr	r3, [pc, #136]	; (8000e00 <GPIO_voidSetPinOutput_typ_spd+0xf0>)
 8000d78:	60fb      	str	r3, [r7, #12]
		break;
 8000d7a:	e006      	b.n	8000d8a <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTF:
		GPIOx = GPIOF;
 8000d7c:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <GPIO_voidSetPinOutput_typ_spd+0xf4>)
 8000d7e:	60fb      	str	r3, [r7, #12]
		break;
 8000d80:	e003      	b.n	8000d8a <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTG:
		GPIOx = GPIOG;
 8000d82:	4b21      	ldr	r3, [pc, #132]	; (8000e08 <GPIO_voidSetPinOutput_typ_spd+0xf8>)
 8000d84:	60fb      	str	r3, [r7, #12]
		break;
 8000d86:	e000      	b.n	8000d8a <GPIO_voidSetPinOutput_typ_spd+0x7a>
	default:
		/* Port ID out of range */
		break;
 8000d88:	bf00      	nop
	}
	if(A_u8Output_t == GPIO_OT_PUSHPULL)
 8000d8a:	797b      	ldrb	r3, [r7, #5]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d10a      	bne.n	8000da6 <GPIO_voidSetPinOutput_typ_spd+0x96>
	{
		/* Set pin type */
		CLR_BIT(GPIOx->OTYPER,A_u8PinNo);
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	79ba      	ldrb	r2, [r7, #6]
 8000d96:	2101      	movs	r1, #1
 8000d98:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9c:	43d2      	mvns	r2, r2
 8000d9e:	401a      	ands	r2, r3
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	e00b      	b.n	8000dbe <GPIO_voidSetPinOutput_typ_spd+0xae>

	}else if(A_u8Output_t == GPIO_OT_OPEN_DRAIN)
 8000da6:	797b      	ldrb	r3, [r7, #5]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d108      	bne.n	8000dbe <GPIO_voidSetPinOutput_typ_spd+0xae>
	{
		SET_BIT(GPIOx->OTYPER,A_u8PinNo);
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	79ba      	ldrb	r2, [r7, #6]
 8000db2:	2101      	movs	r1, #1
 8000db4:	fa01 f202 	lsl.w	r2, r1, r2
 8000db8:	431a      	orrs	r2, r3
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	605a      	str	r2, [r3, #4]
	}
	/* Set pin speed */
	GPIOx->OSPEEDR &= ~(0b11<<(2*A_u8PinNo));
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	79ba      	ldrb	r2, [r7, #6]
 8000dc4:	0052      	lsls	r2, r2, #1
 8000dc6:	2103      	movs	r1, #3
 8000dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dcc:	43d2      	mvns	r2, r2
 8000dce:	401a      	ands	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	609a      	str	r2, [r3, #8]
	GPIOx->OSPEEDR |= (A_u8OutputSpeed<<(2*A_u8PinNo));
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	7939      	ldrb	r1, [r7, #4]
 8000dda:	79ba      	ldrb	r2, [r7, #6]
 8000ddc:	0052      	lsls	r2, r2, #1
 8000dde:	fa01 f202 	lsl.w	r2, r1, r2
 8000de2:	431a      	orrs	r2, r3
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	609a      	str	r2, [r3, #8]
}
 8000de8:	bf00      	nop
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc90      	pop	{r4, r7}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	48000400 	.word	0x48000400
 8000df8:	48000800 	.word	0x48000800
 8000dfc:	48000c00 	.word	0x48000c00
 8000e00:	48001000 	.word	0x48001000
 8000e04:	48001400 	.word	0x48001400
 8000e08:	48001800 	.word	0x48001800

08000e0c <GPIO_voidSetPinValue>:
void GPIO_voidSetPinValue(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8PinValue)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
 8000e16:	460b      	mov	r3, r1
 8000e18:	71bb      	strb	r3, [r7, #6]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	717b      	strb	r3, [r7, #5]
	GPIO_RegMap_t *GPIOx = NULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
	switch(A_u8PortID)
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	2b06      	cmp	r3, #6
 8000e26:	d827      	bhi.n	8000e78 <GPIO_voidSetPinValue+0x6c>
 8000e28:	a201      	add	r2, pc, #4	; (adr r2, 8000e30 <GPIO_voidSetPinValue+0x24>)
 8000e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e2e:	bf00      	nop
 8000e30:	08000e4d 	.word	0x08000e4d
 8000e34:	08000e55 	.word	0x08000e55
 8000e38:	08000e5b 	.word	0x08000e5b
 8000e3c:	08000e61 	.word	0x08000e61
 8000e40:	08000e67 	.word	0x08000e67
 8000e44:	08000e6d 	.word	0x08000e6d
 8000e48:	08000e73 	.word	0x08000e73
	{
	case GPIO_PORTA:
		GPIOx = GPIOA;
 8000e4c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e50:	60fb      	str	r3, [r7, #12]
		break;
 8000e52:	e012      	b.n	8000e7a <GPIO_voidSetPinValue+0x6e>
	case GPIO_PORTB:
		GPIOx = GPIOB;
 8000e54:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <GPIO_voidSetPinValue+0xb0>)
 8000e56:	60fb      	str	r3, [r7, #12]
		break;
 8000e58:	e00f      	b.n	8000e7a <GPIO_voidSetPinValue+0x6e>
	case GPIO_PORTC:
		GPIOx = GPIOC;
 8000e5a:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <GPIO_voidSetPinValue+0xb4>)
 8000e5c:	60fb      	str	r3, [r7, #12]
		break;
 8000e5e:	e00c      	b.n	8000e7a <GPIO_voidSetPinValue+0x6e>
	case GPIO_PORTD:
		GPIOx = GPIOD;
 8000e60:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <GPIO_voidSetPinValue+0xb8>)
 8000e62:	60fb      	str	r3, [r7, #12]
		break;
 8000e64:	e009      	b.n	8000e7a <GPIO_voidSetPinValue+0x6e>
	case GPIO_PORTE:
		GPIOx = GPIOE;
 8000e66:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <GPIO_voidSetPinValue+0xbc>)
 8000e68:	60fb      	str	r3, [r7, #12]
		break;
 8000e6a:	e006      	b.n	8000e7a <GPIO_voidSetPinValue+0x6e>
	case GPIO_PORTF:
		GPIOx = GPIOF;
 8000e6c:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <GPIO_voidSetPinValue+0xc0>)
 8000e6e:	60fb      	str	r3, [r7, #12]
		break;
 8000e70:	e003      	b.n	8000e7a <GPIO_voidSetPinValue+0x6e>
	case GPIO_PORTG:
		GPIOx = GPIOG;
 8000e72:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <GPIO_voidSetPinValue+0xc4>)
 8000e74:	60fb      	str	r3, [r7, #12]
		break;
 8000e76:	e000      	b.n	8000e7a <GPIO_voidSetPinValue+0x6e>
	default:
		/* Port ID out of range */
		break;
 8000e78:	bf00      	nop
	}
	if(A_u8PinValue == GPIO_VALUE_HIGH)
 8000e7a:	797b      	ldrb	r3, [r7, #5]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d109      	bne.n	8000e94 <GPIO_voidSetPinValue+0x88>
	{
		SET_BIT(GPIOx->ODR,A_u8PinNo);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	79ba      	ldrb	r2, [r7, #6]
 8000e86:	2101      	movs	r1, #1
 8000e88:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8c:	431a      	orrs	r2, r3
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	615a      	str	r2, [r3, #20]
	}
	else if(A_u8PinValue == GPIO_VALUE_LOW)
	{
		CLR_BIT(GPIOx->ODR,A_u8PinNo);
	}
}
 8000e92:	e00c      	b.n	8000eae <GPIO_voidSetPinValue+0xa2>
	else if(A_u8PinValue == GPIO_VALUE_LOW)
 8000e94:	797b      	ldrb	r3, [r7, #5]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d109      	bne.n	8000eae <GPIO_voidSetPinValue+0xa2>
		CLR_BIT(GPIOx->ODR,A_u8PinNo);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	79ba      	ldrb	r2, [r7, #6]
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea6:	43d2      	mvns	r2, r2
 8000ea8:	401a      	ands	r2, r3
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	615a      	str	r2, [r3, #20]
}
 8000eae:	bf00      	nop
 8000eb0:	3714      	adds	r7, #20
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	48000400 	.word	0x48000400
 8000ec0:	48000800 	.word	0x48000800
 8000ec4:	48000c00 	.word	0x48000c00
 8000ec8:	48001000 	.word	0x48001000
 8000ecc:	48001400 	.word	0x48001400
 8000ed0:	48001800 	.word	0x48001800

08000ed4 <GPIO_voidSetPinPUPD>:
static void GPIO_voidSetPinPUPD(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8PullU_D)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	71bb      	strb	r3, [r7, #6]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	717b      	strb	r3, [r7, #5]
	GPIO_RegMap_t *GPIOx = NULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
	switch(A_u8PortID)
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	2b06      	cmp	r3, #6
 8000eee:	d827      	bhi.n	8000f40 <GPIO_voidSetPinPUPD+0x6c>
 8000ef0:	a201      	add	r2, pc, #4	; (adr r2, 8000ef8 <GPIO_voidSetPinPUPD+0x24>)
 8000ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef6:	bf00      	nop
 8000ef8:	08000f15 	.word	0x08000f15
 8000efc:	08000f1d 	.word	0x08000f1d
 8000f00:	08000f23 	.word	0x08000f23
 8000f04:	08000f29 	.word	0x08000f29
 8000f08:	08000f2f 	.word	0x08000f2f
 8000f0c:	08000f35 	.word	0x08000f35
 8000f10:	08000f3b 	.word	0x08000f3b
	{
	case GPIO_PORTA:
		GPIOx = GPIOA;
 8000f14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f18:	60fb      	str	r3, [r7, #12]
		break;
 8000f1a:	e012      	b.n	8000f42 <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTB:
		GPIOx = GPIOB;
 8000f1c:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <GPIO_voidSetPinPUPD+0xa4>)
 8000f1e:	60fb      	str	r3, [r7, #12]
		break;
 8000f20:	e00f      	b.n	8000f42 <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTC:
		GPIOx = GPIOC;
 8000f22:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <GPIO_voidSetPinPUPD+0xa8>)
 8000f24:	60fb      	str	r3, [r7, #12]
		break;
 8000f26:	e00c      	b.n	8000f42 <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTD:
		GPIOx = GPIOD;
 8000f28:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <GPIO_voidSetPinPUPD+0xac>)
 8000f2a:	60fb      	str	r3, [r7, #12]
		break;
 8000f2c:	e009      	b.n	8000f42 <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTE:
		GPIOx = GPIOE;
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <GPIO_voidSetPinPUPD+0xb0>)
 8000f30:	60fb      	str	r3, [r7, #12]
		break;
 8000f32:	e006      	b.n	8000f42 <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTF:
		GPIOx = GPIOF;
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <GPIO_voidSetPinPUPD+0xb4>)
 8000f36:	60fb      	str	r3, [r7, #12]
		break;
 8000f38:	e003      	b.n	8000f42 <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTG:
		GPIOx = GPIOG;
 8000f3a:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <GPIO_voidSetPinPUPD+0xb8>)
 8000f3c:	60fb      	str	r3, [r7, #12]
		break;
 8000f3e:	e000      	b.n	8000f42 <GPIO_voidSetPinPUPD+0x6e>
	default:
		/* Port ID out of range */
		break;
 8000f40:	bf00      	nop
	}
	GPIOx->PUPDR &= ~(0b11<<(2*A_u8PinNo));
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	79ba      	ldrb	r2, [r7, #6]
 8000f48:	0052      	lsls	r2, r2, #1
 8000f4a:	2103      	movs	r1, #3
 8000f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f50:	43d2      	mvns	r2, r2
 8000f52:	401a      	ands	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	60da      	str	r2, [r3, #12]
	GPIOx->PUPDR |= (A_u8PullU_D<<(2*A_u8PinNo));
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	7979      	ldrb	r1, [r7, #5]
 8000f5e:	79ba      	ldrb	r2, [r7, #6]
 8000f60:	0052      	lsls	r2, r2, #1
 8000f62:	fa01 f202 	lsl.w	r2, r1, r2
 8000f66:	431a      	orrs	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	60da      	str	r2, [r3, #12]
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	48000400 	.word	0x48000400
 8000f7c:	48000800 	.word	0x48000800
 8000f80:	48000c00 	.word	0x48000c00
 8000f84:	48001000 	.word	0x48001000
 8000f88:	48001400 	.word	0x48001400
 8000f8c:	48001800 	.word	0x48001800

08000f90 <GPIO_u8GetPinData>:
u8  GPIO_u8GetPinData(u8 A_u8PortID, u8 A_u8PinNo)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	460a      	mov	r2, r1
 8000f9a:	71fb      	strb	r3, [r7, #7]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	71bb      	strb	r3, [r7, #6]
	u8 L_u8PinData;
	GPIO_RegMap_t *GPIOx = NULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
	switch(A_u8PortID)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2b06      	cmp	r3, #6
 8000fa8:	d826      	bhi.n	8000ff8 <GPIO_u8GetPinData+0x68>
 8000faa:	a201      	add	r2, pc, #4	; (adr r2, 8000fb0 <GPIO_u8GetPinData+0x20>)
 8000fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb0:	08000fcd 	.word	0x08000fcd
 8000fb4:	08000fd5 	.word	0x08000fd5
 8000fb8:	08000fdb 	.word	0x08000fdb
 8000fbc:	08000fe1 	.word	0x08000fe1
 8000fc0:	08000fe7 	.word	0x08000fe7
 8000fc4:	08000fed 	.word	0x08000fed
 8000fc8:	08000ff3 	.word	0x08000ff3
	{
	case GPIO_PORTA:
		GPIOx = GPIOA;
 8000fcc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fd0:	60fb      	str	r3, [r7, #12]
		break;
 8000fd2:	e012      	b.n	8000ffa <GPIO_u8GetPinData+0x6a>
	case GPIO_PORTB:
		GPIOx = GPIOB;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <GPIO_u8GetPinData+0x8c>)
 8000fd6:	60fb      	str	r3, [r7, #12]
		break;
 8000fd8:	e00f      	b.n	8000ffa <GPIO_u8GetPinData+0x6a>
	case GPIO_PORTC:
		GPIOx = GPIOC;
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <GPIO_u8GetPinData+0x90>)
 8000fdc:	60fb      	str	r3, [r7, #12]
		break;
 8000fde:	e00c      	b.n	8000ffa <GPIO_u8GetPinData+0x6a>
	case GPIO_PORTD:
		GPIOx = GPIOD;
 8000fe0:	4b10      	ldr	r3, [pc, #64]	; (8001024 <GPIO_u8GetPinData+0x94>)
 8000fe2:	60fb      	str	r3, [r7, #12]
		break;
 8000fe4:	e009      	b.n	8000ffa <GPIO_u8GetPinData+0x6a>
	case GPIO_PORTE:
		GPIOx = GPIOE;
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <GPIO_u8GetPinData+0x98>)
 8000fe8:	60fb      	str	r3, [r7, #12]
		break;
 8000fea:	e006      	b.n	8000ffa <GPIO_u8GetPinData+0x6a>
	case GPIO_PORTF:
		GPIOx = GPIOF;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	; (800102c <GPIO_u8GetPinData+0x9c>)
 8000fee:	60fb      	str	r3, [r7, #12]
		break;
 8000ff0:	e003      	b.n	8000ffa <GPIO_u8GetPinData+0x6a>
	case GPIO_PORTG:
		GPIOx = GPIOG;
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <GPIO_u8GetPinData+0xa0>)
 8000ff4:	60fb      	str	r3, [r7, #12]
		break;
 8000ff6:	e000      	b.n	8000ffa <GPIO_u8GetPinData+0x6a>
	default:
		/* Port ID out of range */
		break;
 8000ff8:	bf00      	nop
	}
	L_u8PinData = GET_BIT(GPIOx->IDR,A_u8PinNo);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	691a      	ldr	r2, [r3, #16]
 8000ffe:	79bb      	ldrb	r3, [r7, #6]
 8001000:	fa22 f303 	lsr.w	r3, r2, r3
 8001004:	b2db      	uxtb	r3, r3
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	72fb      	strb	r3, [r7, #11]
	return L_u8PinData;
 800100c:	7afb      	ldrb	r3, [r7, #11]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	48000400 	.word	0x48000400
 8001020:	48000800 	.word	0x48000800
 8001024:	48000c00 	.word	0x48000c00
 8001028:	48001000 	.word	0x48001000
 800102c:	48001400 	.word	0x48001400
 8001030:	48001800 	.word	0x48001800

08001034 <GPIO_voidAltFunc>:
		break;
	}
	TOG_BIT(GPIOx->ODR,A_u8PinNo);
}
static void GPIO_voidAltFunc(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8AltFunc)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
 800103e:	460b      	mov	r3, r1
 8001040:	71bb      	strb	r3, [r7, #6]
 8001042:	4613      	mov	r3, r2
 8001044:	717b      	strb	r3, [r7, #5]
	GPIO_RegMap_t *GPIOx = NULL;
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
	switch(A_u8PortID)
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	2b06      	cmp	r3, #6
 800104e:	d827      	bhi.n	80010a0 <GPIO_voidAltFunc+0x6c>
 8001050:	a201      	add	r2, pc, #4	; (adr r2, 8001058 <GPIO_voidAltFunc+0x24>)
 8001052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001056:	bf00      	nop
 8001058:	08001075 	.word	0x08001075
 800105c:	0800107d 	.word	0x0800107d
 8001060:	08001083 	.word	0x08001083
 8001064:	08001089 	.word	0x08001089
 8001068:	0800108f 	.word	0x0800108f
 800106c:	08001095 	.word	0x08001095
 8001070:	0800109b 	.word	0x0800109b
	{
	case GPIO_PORTA:
		GPIOx = GPIOA;
 8001074:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001078:	60fb      	str	r3, [r7, #12]
		break;
 800107a:	e012      	b.n	80010a2 <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTB:
		GPIOx = GPIOB;
 800107c:	4b24      	ldr	r3, [pc, #144]	; (8001110 <GPIO_voidAltFunc+0xdc>)
 800107e:	60fb      	str	r3, [r7, #12]
		break;
 8001080:	e00f      	b.n	80010a2 <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTC:
		GPIOx = GPIOC;
 8001082:	4b24      	ldr	r3, [pc, #144]	; (8001114 <GPIO_voidAltFunc+0xe0>)
 8001084:	60fb      	str	r3, [r7, #12]
		break;
 8001086:	e00c      	b.n	80010a2 <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTD:
		GPIOx = GPIOD;
 8001088:	4b23      	ldr	r3, [pc, #140]	; (8001118 <GPIO_voidAltFunc+0xe4>)
 800108a:	60fb      	str	r3, [r7, #12]
		break;
 800108c:	e009      	b.n	80010a2 <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTE:
		GPIOx = GPIOE;
 800108e:	4b23      	ldr	r3, [pc, #140]	; (800111c <GPIO_voidAltFunc+0xe8>)
 8001090:	60fb      	str	r3, [r7, #12]
		break;
 8001092:	e006      	b.n	80010a2 <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTF:
		GPIOx = GPIOF;
 8001094:	4b22      	ldr	r3, [pc, #136]	; (8001120 <GPIO_voidAltFunc+0xec>)
 8001096:	60fb      	str	r3, [r7, #12]
		break;
 8001098:	e003      	b.n	80010a2 <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTG:
		GPIOx = GPIOG;
 800109a:	4b22      	ldr	r3, [pc, #136]	; (8001124 <GPIO_voidAltFunc+0xf0>)
 800109c:	60fb      	str	r3, [r7, #12]
		break;
 800109e:	e000      	b.n	80010a2 <GPIO_voidAltFunc+0x6e>
	default:
		/* Port ID out of range */
		break;
 80010a0:	bf00      	nop
	}
	if(A_u8PinNo < 8)
 80010a2:	79bb      	ldrb	r3, [r7, #6]
 80010a4:	2b07      	cmp	r3, #7
 80010a6:	d815      	bhi.n	80010d4 <GPIO_voidAltFunc+0xa0>
	{
		GPIOx->AFRL &= ~(0b1111<<(4*A_u8PinNo));
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	79ba      	ldrb	r2, [r7, #6]
 80010ae:	0092      	lsls	r2, r2, #2
 80010b0:	210f      	movs	r1, #15
 80010b2:	fa01 f202 	lsl.w	r2, r1, r2
 80010b6:	43d2      	mvns	r2, r2
 80010b8:	401a      	ands	r2, r3
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	621a      	str	r2, [r3, #32]
		GPIOx->AFRL |= (A_u8AltFunc<<(4*A_u8PinNo));
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6a1b      	ldr	r3, [r3, #32]
 80010c2:	7979      	ldrb	r1, [r7, #5]
 80010c4:	79ba      	ldrb	r2, [r7, #6]
 80010c6:	0092      	lsls	r2, r2, #2
 80010c8:	fa01 f202 	lsl.w	r2, r1, r2
 80010cc:	431a      	orrs	r2, r3
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	621a      	str	r2, [r3, #32]
	{
		GPIOx->AFRH &= ~(0b1111<<(4*(A_u8PinNo-8)));
		GPIOx->AFRH |= (A_u8AltFunc<<(4*(A_u8PinNo-8)));
	}

}
 80010d2:	e016      	b.n	8001102 <GPIO_voidAltFunc+0xce>
		GPIOx->AFRH &= ~(0b1111<<(4*(A_u8PinNo-8)));
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d8:	79ba      	ldrb	r2, [r7, #6]
 80010da:	3a08      	subs	r2, #8
 80010dc:	0092      	lsls	r2, r2, #2
 80010de:	210f      	movs	r1, #15
 80010e0:	fa01 f202 	lsl.w	r2, r1, r2
 80010e4:	43d2      	mvns	r2, r2
 80010e6:	401a      	ands	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	625a      	str	r2, [r3, #36]	; 0x24
		GPIOx->AFRH |= (A_u8AltFunc<<(4*(A_u8PinNo-8)));
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f0:	7979      	ldrb	r1, [r7, #5]
 80010f2:	79ba      	ldrb	r2, [r7, #6]
 80010f4:	3a08      	subs	r2, #8
 80010f6:	0092      	lsls	r2, r2, #2
 80010f8:	fa01 f202 	lsl.w	r2, r1, r2
 80010fc:	431a      	orrs	r2, r3
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001102:	bf00      	nop
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	48000400 	.word	0x48000400
 8001114:	48000800 	.word	0x48000800
 8001118:	48000c00 	.word	0x48000c00
 800111c:	48001000 	.word	0x48001000
 8001120:	48001400 	.word	0x48001400
 8001124:	48001800 	.word	0x48001800

08001128 <GPIO_voidInitPin>:
		break;
	}
	GPIOx->ODR ^= 0xFFFF;
}
void GPIO_voidInitPin(MGPIO_Config_t *A_xPin_Port_Config)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	GPIO_voidSetPinMode(A_xPin_Port_Config->Port, A_xPin_Port_Config->Pin, A_xPin_Port_Config->Mode);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	7818      	ldrb	r0, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7859      	ldrb	r1, [r3, #1]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	789b      	ldrb	r3, [r3, #2]
 800113c:	461a      	mov	r2, r3
 800113e:	f7ff fd89 	bl	8000c54 <GPIO_voidSetPinMode>
	GPIO_voidSetPinOutput_typ_spd(A_xPin_Port_Config->Port, A_xPin_Port_Config->Pin, A_xPin_Port_Config->OutputType,A_xPin_Port_Config->OutputSpeed);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	7818      	ldrb	r0, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	7859      	ldrb	r1, [r3, #1]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	78da      	ldrb	r2, [r3, #3]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	791b      	ldrb	r3, [r3, #4]
 8001152:	f7ff fddd 	bl	8000d10 <GPIO_voidSetPinOutput_typ_spd>
	GPIO_voidSetPinPUPD(A_xPin_Port_Config->Port, A_xPin_Port_Config->Pin, A_xPin_Port_Config->InputPull);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7818      	ldrb	r0, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	7859      	ldrb	r1, [r3, #1]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	795b      	ldrb	r3, [r3, #5]
 8001162:	461a      	mov	r2, r3
 8001164:	f7ff feb6 	bl	8000ed4 <GPIO_voidSetPinPUPD>
	GPIO_voidAltFunc(A_xPin_Port_Config->Port, A_xPin_Port_Config->Pin, A_xPin_Port_Config->AltFunc);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	7818      	ldrb	r0, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	7859      	ldrb	r1, [r3, #1]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	799b      	ldrb	r3, [r3, #6]
 8001174:	461a      	mov	r2, r3
 8001176:	f7ff ff5d 	bl	8001034 <GPIO_voidAltFunc>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <RCC_voidInit>:

/****************************************************************************/
/*							Function Implementation							*/
/****************************************************************************/
void RCC_voidInit(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
	/*Clear All Registers To Avoid Errors*/
	RCC->CR = 0x00000000;
 8001188:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <RCC_voidInit+0xb0>)
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
	RCC->ICSCR = 0x00000000;
 800118e:	4b29      	ldr	r3, [pc, #164]	; (8001234 <RCC_voidInit+0xb0>)
 8001190:	2200      	movs	r2, #0
 8001192:	605a      	str	r2, [r3, #4]
	RCC->CFGR = 0x00000000;
 8001194:	4b27      	ldr	r3, [pc, #156]	; (8001234 <RCC_voidInit+0xb0>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
	RCC->PLLCFGR = 0x00000000;
 800119a:	4b26      	ldr	r3, [pc, #152]	; (8001234 <RCC_voidInit+0xb0>)
 800119c:	2200      	movs	r2, #0
 800119e:	60da      	str	r2, [r3, #12]
	RCC->BDCR = 0x00000000;
 80011a0:	4b24      	ldr	r3, [pc, #144]	; (8001234 <RCC_voidInit+0xb0>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	RCC->CSR = 0x00000000;
 80011a8:	4b22      	ldr	r3, [pc, #136]	; (8001234 <RCC_voidInit+0xb0>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	RCC->CRRCR = 0x00000000;
 80011b0:	4b20      	ldr	r3, [pc, #128]	; (8001234 <RCC_voidInit+0xb0>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	/*Turn on the different clocks*/
	RCC->CR |= (RCC_HSI_ON<<8);			//HSI Clock ON
 80011b8:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <RCC_voidInit+0xb0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a1d      	ldr	r2, [pc, #116]	; (8001234 <RCC_voidInit+0xb0>)
 80011be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c2:	6013      	str	r3, [r2, #0]
	RCC->CR |= (RCC_HSIKER_ON<<9);		//HSIKER Clock ON
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <RCC_voidInit+0xb0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a1a      	ldr	r2, [pc, #104]	; (8001234 <RCC_voidInit+0xb0>)
 80011ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ce:	6013      	str	r3, [r2, #0]
	RCC->CR |= (RCC_HSE_ON<<16);		//HSE Clock ON
 80011d0:	4b18      	ldr	r3, [pc, #96]	; (8001234 <RCC_voidInit+0xb0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a17      	ldr	r2, [pc, #92]	; (8001234 <RCC_voidInit+0xb0>)
 80011d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011da:	6013      	str	r3, [r2, #0]
	RCC->CR |= (RCC_HSEBYP_ON<<18);		//HSE BYP ON
 80011dc:	4b15      	ldr	r3, [pc, #84]	; (8001234 <RCC_voidInit+0xb0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a14      	ldr	r2, [pc, #80]	; (8001234 <RCC_voidInit+0xb0>)
 80011e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e6:	6013      	str	r3, [r2, #0]
	//RCC->CR |= (RCC_PLL_ON<<24);		//PLL Clock ON

	/*HSI Trimming Value Adjust*/
	RCC->ICSCR |= (RCC_HSITRIM_VAL<<24);
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <RCC_voidInit+0xb0>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	4a11      	ldr	r2, [pc, #68]	; (8001234 <RCC_voidInit+0xb0>)
 80011ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80011f2:	6053      	str	r3, [r2, #4]

	/*Select System Clock*/
	RCC->CFGR |= (RCC_SYSCLK_SEL<<0);
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <RCC_voidInit+0xb0>)
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <RCC_voidInit+0xb0>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	6093      	str	r3, [r2, #8]
	/*Select Micro-controller Output Clock*/
	RCC->CFGR |= (RCC_MCO_SEL<<24);
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <RCC_voidInit+0xb0>)
 8001202:	4a0c      	ldr	r2, [pc, #48]	; (8001234 <RCC_voidInit+0xb0>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	6093      	str	r3, [r2, #8]

	/*Select Micro-controller Output Prescaler*/
	RCC->CFGR |= (RCC_MCO_PRE<<28);
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <RCC_voidInit+0xb0>)
 800120a:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <RCC_voidInit+0xb0>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	6093      	str	r3, [r2, #8]
	/*Select AHB Prescaler*/
	RCC->CFGR |= (RCC_AHB_PRE<<4);
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <RCC_voidInit+0xb0>)
 8001212:	4a08      	ldr	r2, [pc, #32]	; (8001234 <RCC_voidInit+0xb0>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	6093      	str	r3, [r2, #8]
	/*Select APB1 Prescaler*/
	RCC->CFGR |= (RCC_APB1_PRE<<8);
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <RCC_voidInit+0xb0>)
 800121a:	4a06      	ldr	r2, [pc, #24]	; (8001234 <RCC_voidInit+0xb0>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	6093      	str	r3, [r2, #8]
	/*Select APB2 Prescaler*/
	RCC->CFGR |= (RCC_APB2_PRE<<11);
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <RCC_voidInit+0xb0>)
 8001222:	4a04      	ldr	r2, [pc, #16]	; (8001234 <RCC_voidInit+0xb0>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	6093      	str	r3, [r2, #8]


}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40021000 	.word	0x40021000

08001238 <RCC_voidPeripheralClockEnable>:
void RCC_voidPeripheralClockEnable(u8 A_u8BusName, RCC_Peripheral_t A_tPeripheral)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	460a      	mov	r2, r1
 8001242:	71fb      	strb	r3, [r7, #7]
 8001244:	4613      	mov	r3, r2
 8001246:	71bb      	strb	r3, [r7, #6]
	switch(A_u8BusName)
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	2b05      	cmp	r3, #5
 800124c:	d850      	bhi.n	80012f0 <RCC_voidPeripheralClockEnable+0xb8>
 800124e:	a201      	add	r2, pc, #4	; (adr r2, 8001254 <RCC_voidPeripheralClockEnable+0x1c>)
 8001250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001254:	0800126d 	.word	0x0800126d
 8001258:	08001283 	.word	0x08001283
 800125c:	08001299 	.word	0x08001299
 8001260:	080012af 	.word	0x080012af
 8001264:	080012c5 	.word	0x080012c5
 8001268:	080012db 	.word	0x080012db
	{
		case RCC_AHB1:
			SET_BIT(RCC->AHB1ENR, A_tPeripheral);
 800126c:	4b23      	ldr	r3, [pc, #140]	; (80012fc <RCC_voidPeripheralClockEnable+0xc4>)
 800126e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001270:	79ba      	ldrb	r2, [r7, #6]
 8001272:	2101      	movs	r1, #1
 8001274:	fa01 f202 	lsl.w	r2, r1, r2
 8001278:	4611      	mov	r1, r2
 800127a:	4a20      	ldr	r2, [pc, #128]	; (80012fc <RCC_voidPeripheralClockEnable+0xc4>)
 800127c:	430b      	orrs	r3, r1
 800127e:	6493      	str	r3, [r2, #72]	; 0x48
			break;
 8001280:	e036      	b.n	80012f0 <RCC_voidPeripheralClockEnable+0xb8>

		case RCC_AHB2:
			SET_BIT(RCC->AHB2ENR, A_tPeripheral);
 8001282:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <RCC_voidPeripheralClockEnable+0xc4>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	79ba      	ldrb	r2, [r7, #6]
 8001288:	2101      	movs	r1, #1
 800128a:	fa01 f202 	lsl.w	r2, r1, r2
 800128e:	4611      	mov	r1, r2
 8001290:	4a1a      	ldr	r2, [pc, #104]	; (80012fc <RCC_voidPeripheralClockEnable+0xc4>)
 8001292:	430b      	orrs	r3, r1
 8001294:	64d3      	str	r3, [r2, #76]	; 0x4c
			break;
 8001296:	e02b      	b.n	80012f0 <RCC_voidPeripheralClockEnable+0xb8>

		case RCC_AHB3:
			SET_BIT(RCC->AHB3ENR, A_tPeripheral);
 8001298:	4b18      	ldr	r3, [pc, #96]	; (80012fc <RCC_voidPeripheralClockEnable+0xc4>)
 800129a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800129c:	79ba      	ldrb	r2, [r7, #6]
 800129e:	2101      	movs	r1, #1
 80012a0:	fa01 f202 	lsl.w	r2, r1, r2
 80012a4:	4611      	mov	r1, r2
 80012a6:	4a15      	ldr	r2, [pc, #84]	; (80012fc <RCC_voidPeripheralClockEnable+0xc4>)
 80012a8:	430b      	orrs	r3, r1
 80012aa:	6513      	str	r3, [r2, #80]	; 0x50
			break;
 80012ac:	e020      	b.n	80012f0 <RCC_voidPeripheralClockEnable+0xb8>

		case RCC_APB1_1:
			SET_BIT(RCC->APB1ENR1, A_tPeripheral);
 80012ae:	4b13      	ldr	r3, [pc, #76]	; (80012fc <RCC_voidPeripheralClockEnable+0xc4>)
 80012b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b2:	79ba      	ldrb	r2, [r7, #6]
 80012b4:	2101      	movs	r1, #1
 80012b6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ba:	4611      	mov	r1, r2
 80012bc:	4a0f      	ldr	r2, [pc, #60]	; (80012fc <RCC_voidPeripheralClockEnable+0xc4>)
 80012be:	430b      	orrs	r3, r1
 80012c0:	6593      	str	r3, [r2, #88]	; 0x58
			break;
 80012c2:	e015      	b.n	80012f0 <RCC_voidPeripheralClockEnable+0xb8>

		case RCC_APB1_2:
			SET_BIT(RCC->APB1ENR2, A_tPeripheral);
 80012c4:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <RCC_voidPeripheralClockEnable+0xc4>)
 80012c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c8:	79ba      	ldrb	r2, [r7, #6]
 80012ca:	2101      	movs	r1, #1
 80012cc:	fa01 f202 	lsl.w	r2, r1, r2
 80012d0:	4611      	mov	r1, r2
 80012d2:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <RCC_voidPeripheralClockEnable+0xc4>)
 80012d4:	430b      	orrs	r3, r1
 80012d6:	65d3      	str	r3, [r2, #92]	; 0x5c
			break;
 80012d8:	e00a      	b.n	80012f0 <RCC_voidPeripheralClockEnable+0xb8>

		case RCC_APB2:
			SET_BIT(RCC->APB2ENR, A_tPeripheral);
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <RCC_voidPeripheralClockEnable+0xc4>)
 80012dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012de:	79ba      	ldrb	r2, [r7, #6]
 80012e0:	2101      	movs	r1, #1
 80012e2:	fa01 f202 	lsl.w	r2, r1, r2
 80012e6:	4611      	mov	r1, r2
 80012e8:	4a04      	ldr	r2, [pc, #16]	; (80012fc <RCC_voidPeripheralClockEnable+0xc4>)
 80012ea:	430b      	orrs	r3, r1
 80012ec:	6613      	str	r3, [r2, #96]	; 0x60
			break;
 80012ee:	bf00      	nop
	}
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	40021000 	.word	0x40021000

08001300 <TIMERx_voidStartCounter>:
	L_xPWM.Time_OnPeriod = L_xPWM.DutyCycle * 1/FREQUENCY;
	return L_xPWM;
}

void TIMERx_voidStartCounter(TIMER_RegMap_t *TIMx)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	SET_BIT(TIMx->CR1,CEN);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f043 0201 	orr.w	r2, r3, #1
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	601a      	str	r2, [r3, #0]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <TIMERx_voidStopCounter>:
void TIMERx_voidStopCounter(TIMER_RegMap_t *TIMx)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	CLR_BIT(TIMx->CR1,CEN);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f023 0201 	bic.w	r2, r3, #1
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	601a      	str	r2, [r3, #0]
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <TIMERx_voidCounter_Init>:
void TIMERx_voidCounter_Init(TIMER_RegMap_t *TIMx,TIMx_Counter_Cfg_t *A_xCNT_Cfg)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
	/* ------------ Edge-aligned mode is used ------------ */
	/* Set Counting Direction */
	switch(A_xCNT_Cfg->Count_Direction)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	78db      	ldrb	r3, [r3, #3]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d002      	beq.n	8001358 <TIMERx_voidCounter_Init+0x18>
 8001352:	2b01      	cmp	r3, #1
 8001354:	d007      	beq.n	8001366 <TIMERx_voidCounter_Init+0x26>
		break;
	case TIMER_COUNT_DOWN:
		SET_BIT(TIMx->CR1,DIR);
		break;
	default:
		break;
 8001356:	e00d      	b.n	8001374 <TIMERx_voidCounter_Init+0x34>
		CLR_BIT(TIMx->CR1,DIR);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f023 0210 	bic.w	r2, r3, #16
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	601a      	str	r2, [r3, #0]
		break;
 8001364:	e006      	b.n	8001374 <TIMERx_voidCounter_Init+0x34>
		SET_BIT(TIMx->CR1,DIR);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f043 0210 	orr.w	r2, r3, #16
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	601a      	str	r2, [r3, #0]
		break;
 8001372:	bf00      	nop
	}

	/* Set prescaler */
	if(A_xCNT_Cfg->prescaler>0 && A_xCNT_Cfg->prescaler<=65536)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d005      	beq.n	8001388 <TIMERx_voidCounter_Init+0x48>
	{
		/* CK_CNT = bus_clk / (PSC + 1) */
		TIMx->PSC = A_xCNT_Cfg->prescaler - 1;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	3b01      	subs	r3, #1
 8001382:	461a      	mov	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Set auto-reload set up */
	switch(A_xCNT_Cfg->auto_reload_EN)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	789b      	ldrb	r3, [r3, #2]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d008      	beq.n	80013a2 <TIMERx_voidCounter_Init+0x62>
 8001390:	2b01      	cmp	r3, #1
 8001392:	d10d      	bne.n	80013b0 <TIMERx_voidCounter_Init+0x70>
	{
	case TIMER_AUTORELOAD_ENABLE:
		SET_BIT(TIMx->CR1,ARPE);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	601a      	str	r2, [r3, #0]
		break;
 80013a0:	e007      	b.n	80013b2 <TIMERx_voidCounter_Init+0x72>
	case TIMER_AUTORELOAD_DISABLE:
		CLR_BIT(TIMx->CR1,ARPE);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	601a      	str	r2, [r3, #0]
		break;
 80013ae:	e000      	b.n	80013b2 <TIMERx_voidCounter_Init+0x72>
	default:
		break;
 80013b0:	bf00      	nop
	}
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <TIMERx_voidDelay_ms>:
void TIMERx_voidDelay_ms(TIMER_RegMap_t *TIMx,u32 A_u32Time_in_ms)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b084      	sub	sp, #16
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	6039      	str	r1, [r7, #0]
	/* Count down */
	SET_BIT(TIMx->CR1,DIR);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f043 0210 	orr.w	r2, r3, #16
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	601a      	str	r2, [r3, #0]

	/* PSC = (bus_clk / CK_CNT)-1       CK_CNT = 10Mhz =>time base = 1us  */
	TIMx->PSC = (FREQUENCY/1000000)-1;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	220f      	movs	r2, #15
 80013d8:	629a      	str	r2, [r3, #40]	; 0x28

	/*Set auto reload value */
	TIMx->ARR = 1000;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013e0:	62da      	str	r2, [r3, #44]	; 0x2c

	TIMERx_voidStartCounter(TIMx);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ff8c 	bl	8001300 <TIMERx_voidStartCounter>

	for(u32 L_u32Index =0; L_u32Index < A_u32Time_in_ms; L_u32Index++)
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	e00f      	b.n	800140e <TIMERx_voidDelay_ms+0x50>
	{
		while(GET_BIT(TIMx->SR,UIF) == 0);
 80013ee:	bf00      	nop
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0f9      	beq.n	80013f0 <TIMERx_voidDelay_ms+0x32>
		CLR_BIT(TIMx->SR,UIF);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	f023 0201 	bic.w	r2, r3, #1
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	611a      	str	r2, [r3, #16]
	for(u32 L_u32Index =0; L_u32Index < A_u32Time_in_ms; L_u32Index++)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	3301      	adds	r3, #1
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	429a      	cmp	r2, r3
 8001414:	d3eb      	bcc.n	80013ee <TIMERx_voidDelay_ms+0x30>
	}

	TIMERx_voidStopCounter(TIMx);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff ff82 	bl	8001320 <TIMERx_voidStopCounter>

}
 800141c:	bf00      	nop
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <main>:




int main(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08e      	sub	sp, #56	; 0x38
 8001428:	af04      	add	r7, sp, #16
	APP_voidSystemClockInit();
 800142a:	f000 f8d3 	bl	80015d4 <APP_voidSystemClockInit>
	APP_voidGpioInit();
 800142e:	f000 f901 	bl	8001634 <APP_voidGpioInit>
	APP_voidCanInit();
 8001432:	f000 f9b3 	bl	800179c <APP_voidCanInit>
//	APP_voidADCInit();

	CAN_Frame_t receiveFrame;
	receiveFrame.id = 0x00;
 8001436:	2300      	movs	r3, #0
 8001438:	607b      	str	r3, [r7, #4]
	receiveFrame.dlc = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	723b      	strb	r3, [r7, #8]

	while(1)
	{
		LimSwitch = LIMSWI_u8SwitchPress(LIMSWI[1].Port, LIMSWI[1].Pin);
 800143e:	4b5d      	ldr	r3, [pc, #372]	; (80015b4 <main+0x190>)
 8001440:	79db      	ldrb	r3, [r3, #7]
 8001442:	4a5c      	ldr	r2, [pc, #368]	; (80015b4 <main+0x190>)
 8001444:	7a12      	ldrb	r2, [r2, #8]
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f7fe fef3 	bl	8000234 <LIMSWI_u8SwitchPress>
 800144e:	4603      	mov	r3, r0
 8001450:	461a      	mov	r2, r3
 8001452:	4b59      	ldr	r3, [pc, #356]	; (80015b8 <main+0x194>)
 8001454:	701a      	strb	r2, [r3, #0]
		APP_voidEnsureSafety();	// Return back to homing position only if the plate is excessively pressuring the base
 8001456:	f000 fa23 	bl	80018a0 <APP_voidEnsureSafety>
//		GPIO_voidTogglePin(GPIO_PORTB, GPIO_PIN0);
//		GPIO_voidSetPinValue(GPIO_PORTB, GPIO_PIN1, GPIO_VALUE_LOW);

		if(CAN_u8GetReceivedMessagesCount(CAN1, CAN_RX_FIFO0) > 0)
 800145a:	2100      	movs	r1, #0
 800145c:	4857      	ldr	r0, [pc, #348]	; (80015bc <main+0x198>)
 800145e:	f7ff fb1d 	bl	8000a9c <CAN_u8GetReceivedMessagesCount>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d005      	beq.n	8001474 <main+0x50>
			CAN_voidReceiveDataFrame(CAN1, &receiveFrame, CAN_RX_FIFO0);
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	2200      	movs	r2, #0
 800146c:	4619      	mov	r1, r3
 800146e:	4853      	ldr	r0, [pc, #332]	; (80015bc <main+0x198>)
 8001470:	f7ff f9ce 	bl	8000810 <CAN_voidReceiveDataFrame>

		/*Switch case according to CAN Message received*/
		switch(receiveFrame.id)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3b21      	subs	r3, #33	; 0x21
 8001478:	2b08      	cmp	r3, #8
 800147a:	f200 8095 	bhi.w	80015a8 <main+0x184>
 800147e:	a201      	add	r2, pc, #4	; (adr r2, 8001484 <main+0x60>)
 8001480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001484:	080014a9 	.word	0x080014a9
 8001488:	080014b5 	.word	0x080014b5
 800148c:	0800155d 	.word	0x0800155d
 8001490:	080015a9 	.word	0x080015a9
 8001494:	080015a9 	.word	0x080015a9
 8001498:	080015a9 	.word	0x080015a9
 800149c:	080015a9 	.word	0x080015a9
 80014a0:	080015a9 	.word	0x080015a9
 80014a4:	0800159d 	.word	0x0800159d
		{
			case 0x21:		/* Motion to Home case */
				APP_voidHoming();
 80014a8:	f000 f9c8 	bl	800183c <APP_voidHoming>
				currentPosition = 0;
 80014ac:	4b44      	ldr	r3, [pc, #272]	; (80015c0 <main+0x19c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
				break;
 80014b2:	e07c      	b.n	80015ae <main+0x18a>

			case 0x22:		/* Motion in (any direction / any speed) case */
				u8 stepDir = receiveFrame.data[0] - '0';
 80014b4:	7afb      	ldrb	r3, [r7, #11]
 80014b6:	3b30      	subs	r3, #48	; 0x30
 80014b8:	77fb      	strb	r3, [r7, #31]
				u32 stepDelay = receiveFrame.data[1] - '0';
 80014ba:	7b3b      	ldrb	r3, [r7, #12]
 80014bc:	3b30      	subs	r3, #48	; 0x30
 80014be:	61bb      	str	r3, [r7, #24]
				u8 stepRot = receiveFrame.data[2] - '0';
 80014c0:	7b7b      	ldrb	r3, [r7, #13]
 80014c2:	3b30      	subs	r3, #48	; 0x30
 80014c4:	75fb      	strb	r3, [r7, #23]

				for(int i=0; i< stepRot *200; i++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
 80014ca:	e026      	b.n	800151a <main+0xf6>

					/*receiveData[0] -> Stepper Direction
					 * recieveData[1] -> Stepper Delay
					 * recieveData[2] -> Number of Stepper Cycles*/

					STEPPER_voidQuadMotorStep(&STEPPER_mod[0], &STEPPER_mod[1], &STEPPER_mod[2], &STEPPER_mod[3], stepDir, TIM2, stepDelay);
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	9302      	str	r3, [sp, #8]
 80014d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014d4:	9301      	str	r3, [sp, #4]
 80014d6:	7ffb      	ldrb	r3, [r7, #31]
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	4b3a      	ldr	r3, [pc, #232]	; (80015c4 <main+0x1a0>)
 80014dc:	4a3a      	ldr	r2, [pc, #232]	; (80015c8 <main+0x1a4>)
 80014de:	493b      	ldr	r1, [pc, #236]	; (80015cc <main+0x1a8>)
 80014e0:	483b      	ldr	r0, [pc, #236]	; (80015d0 <main+0x1ac>)
 80014e2:	f7fe ff1f 	bl	8000324 <STEPPER_voidQuadMotorStep>
						LimSwitch = LIMSWI_u8SwitchPress(LIMSWI[1].Port, LIMSWI[1].Pin);						//Check for the current state of the limit switch
 80014e6:	4b33      	ldr	r3, [pc, #204]	; (80015b4 <main+0x190>)
 80014e8:	79db      	ldrb	r3, [r3, #7]
 80014ea:	4a32      	ldr	r2, [pc, #200]	; (80015b4 <main+0x190>)
 80014ec:	7a12      	ldrb	r2, [r2, #8]
 80014ee:	4611      	mov	r1, r2
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7fe fe9f 	bl	8000234 <LIMSWI_u8SwitchPress>
 80014f6:	4603      	mov	r3, r0
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b2f      	ldr	r3, [pc, #188]	; (80015b8 <main+0x194>)
 80014fc:	701a      	strb	r2, [r3, #0]
						if(LimSwitch == 0)																			//If the limit switch is pressed -> break the motion + store the value of i as it shows what the current position is
 80014fe:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <main+0x194>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d106      	bne.n	8001514 <main+0xf0>
						{
							currentPosition = currentPosition - i;												//Negative only because the switch being pressed means that the direction of motion is downwards
 8001506:	4b2e      	ldr	r3, [pc, #184]	; (80015c0 <main+0x19c>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	4a2c      	ldr	r2, [pc, #176]	; (80015c0 <main+0x19c>)
 8001510:	6013      	str	r3, [r2, #0]
							break;
 8001512:	e009      	b.n	8001528 <main+0x104>
				for(int i=0; i< stepRot *200; i++)
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	3301      	adds	r3, #1
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
 800151a:	7dfb      	ldrb	r3, [r7, #23]
 800151c:	22c8      	movs	r2, #200	; 0xc8
 800151e:	fb02 f303 	mul.w	r3, r2, r3
 8001522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001524:	429a      	cmp	r2, r3
 8001526:	dbd1      	blt.n	80014cc <main+0xa8>
						}
				}
					if(receiveFrame.data[0] == 1)																//Check for the direction
 8001528:	7afb      	ldrb	r3, [r7, #11]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d10b      	bne.n	8001546 <main+0x122>
						currentPosition = currentPosition + receiveFrame.data[2] * 200;
 800152e:	7b7b      	ldrb	r3, [r7, #13]
 8001530:	461a      	mov	r2, r3
 8001532:	23c8      	movs	r3, #200	; 0xc8
 8001534:	fb02 f303 	mul.w	r3, r2, r3
 8001538:	461a      	mov	r2, r3
 800153a:	4b21      	ldr	r3, [pc, #132]	; (80015c0 <main+0x19c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4413      	add	r3, r2
 8001540:	4a1f      	ldr	r2, [pc, #124]	; (80015c0 <main+0x19c>)
 8001542:	6013      	str	r3, [r2, #0]
					else
						currentPosition = currentPosition - receiveFrame.data[2] * 200;
				break;
 8001544:	e033      	b.n	80015ae <main+0x18a>
						currentPosition = currentPosition - receiveFrame.data[2] * 200;
 8001546:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <main+0x19c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	7b7a      	ldrb	r2, [r7, #13]
 800154c:	4611      	mov	r1, r2
 800154e:	22c8      	movs	r2, #200	; 0xc8
 8001550:	fb01 f202 	mul.w	r2, r1, r2
 8001554:	1a9b      	subs	r3, r3, r2
 8001556:	4a1a      	ldr	r2, [pc, #104]	; (80015c0 <main+0x19c>)
 8001558:	6013      	str	r3, [r2, #0]
				break;
 800155a:	e028      	b.n	80015ae <main+0x18a>


			case 0x23:	/* Current Position Case */
				for(int i =0; i<5; i++)
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
 8001560:	e018      	b.n	8001594 <main+0x170>
				{
					GPIO_voidSetPinValue(GPIO_PORTC, GPIO_PIN13, 1);
 8001562:	2201      	movs	r2, #1
 8001564:	210d      	movs	r1, #13
 8001566:	2002      	movs	r0, #2
 8001568:	f7ff fc50 	bl	8000e0c <GPIO_voidSetPinValue>
					TIMERx_voidDelay_ms(TIM2, 500);
 800156c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001570:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001574:	f7ff ff23 	bl	80013be <TIMERx_voidDelay_ms>
					GPIO_voidSetPinValue(GPIO_PORTC, GPIO_PIN13, 0);
 8001578:	2200      	movs	r2, #0
 800157a:	210d      	movs	r1, #13
 800157c:	2002      	movs	r0, #2
 800157e:	f7ff fc45 	bl	8000e0c <GPIO_voidSetPinValue>
					TIMERx_voidDelay_ms(TIM2, 500);
 8001582:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001586:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800158a:	f7ff ff18 	bl	80013be <TIMERx_voidDelay_ms>
				for(int i =0; i<5; i++)
 800158e:	6a3b      	ldr	r3, [r7, #32]
 8001590:	3301      	adds	r3, #1
 8001592:	623b      	str	r3, [r7, #32]
 8001594:	6a3b      	ldr	r3, [r7, #32]
 8001596:	2b04      	cmp	r3, #4
 8001598:	dde3      	ble.n	8001562 <main+0x13e>
				}
				break;
 800159a:	e008      	b.n	80015ae <main+0x18a>

			/* Current Sense Case */
			case 0x29:
				if (receiveFrame.rtr == CAN_FRAME_REMOTE) //empty frame, rtr =1
 800159c:	7a7b      	ldrb	r3, [r7, #9]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d104      	bne.n	80015ac <main+0x188>
				{
					APP_voidCurrentSense();
 80015a2:	f000 f8ab 	bl	80016fc <APP_voidCurrentSense>
				}
				break;
 80015a6:	e001      	b.n	80015ac <main+0x188>

			default:
				break;
 80015a8:	bf00      	nop
 80015aa:	e000      	b.n	80015ae <main+0x18a>
				break;
 80015ac:	bf00      	nop
		}
		receiveFrame.id = 0x00;
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
		LimSwitch = LIMSWI_u8SwitchPress(LIMSWI[1].Port, LIMSWI[1].Pin);
 80015b2:	e744      	b.n	800143e <main+0x1a>
 80015b4:	20000030 	.word	0x20000030
 80015b8:	20000054 	.word	0x20000054
 80015bc:	40006400 	.word	0x40006400
 80015c0:	20000074 	.word	0x20000074
 80015c4:	20000028 	.word	0x20000028
 80015c8:	20000020 	.word	0x20000020
 80015cc:	20000018 	.word	0x20000018
 80015d0:	20000010 	.word	0x20000010

080015d4 <APP_voidSystemClockInit>:
	}
}

void APP_voidSystemClockInit(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
	RCC_voidInit();
 80015d8:	f7ff fdd4 	bl	8001184 <RCC_voidInit>
	RCC->CCIPR |= (1 << 25);
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <APP_voidSystemClockInit+0x5c>)
 80015de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015e2:	4a13      	ldr	r2, [pc, #76]	; (8001630 <APP_voidSystemClockInit+0x5c>)
 80015e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	//Initialize RCC
	RCC_voidPeripheralClockEnable(RCC_AHB2, GPIO_A);
 80015ec:	2100      	movs	r1, #0
 80015ee:	2001      	movs	r0, #1
 80015f0:	f7ff fe22 	bl	8001238 <RCC_voidPeripheralClockEnable>
	RCC_voidPeripheralClockEnable(RCC_AHB2, GPIO_B);
 80015f4:	2101      	movs	r1, #1
 80015f6:	2001      	movs	r0, #1
 80015f8:	f7ff fe1e 	bl	8001238 <RCC_voidPeripheralClockEnable>
	RCC_voidPeripheralClockEnable(RCC_AHB2, GPIO_C);
 80015fc:	2102      	movs	r1, #2
 80015fe:	2001      	movs	r0, #1
 8001600:	f7ff fe1a 	bl	8001238 <RCC_voidPeripheralClockEnable>
	RCC_voidPeripheralClockEnable(RCC_APB1_1, TIM_2);
 8001604:	2100      	movs	r1, #0
 8001606:	2003      	movs	r0, #3
 8001608:	f7ff fe16 	bl	8001238 <RCC_voidPeripheralClockEnable>
	RCC_voidPeripheralClockEnable(RCC_APB1_1, FDCAN);
 800160c:	2119      	movs	r1, #25
 800160e:	2003      	movs	r0, #3
 8001610:	f7ff fe12 	bl	8001238 <RCC_voidPeripheralClockEnable>
//	RCC_voidPeripheralClockEnable(RCC_AHB2, ADC12);
	RCC->AHB2ENR |= (1<<13);
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <APP_voidSystemClockInit+0x5c>)
 8001616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001618:	4a05      	ldr	r2, [pc, #20]	; (8001630 <APP_voidSystemClockInit+0x5c>)
 800161a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800161e:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->AHB2ENR |= (1<<14);
 8001620:	4b03      	ldr	r3, [pc, #12]	; (8001630 <APP_voidSystemClockInit+0x5c>)
 8001622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001624:	4a02      	ldr	r2, [pc, #8]	; (8001630 <APP_voidSystemClockInit+0x5c>)
 8001626:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800162a:	64d3      	str	r3, [r2, #76]	; 0x4c



}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40021000 	.word	0x40021000

08001634 <APP_voidGpioInit>:

void APP_voidGpioInit(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08c      	sub	sp, #48	; 0x30
 8001638:	af00      	add	r7, sp, #0
	//Only for led blinking test, should be removed form final version
	MGPIO_Config_t Test3 = {
 800163a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	f8c3 2003 	str.w	r2, [r3, #3]
 8001646:	2302      	movs	r3, #2
 8001648:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800164c:	230d      	movs	r3, #13
 800164e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001652:	2301      	movs	r3, #1
 8001654:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		GPIO_NO_PULL,
		GPIO_AF0
	};

	//Timer configuration outside main function
	TIMx_Counter_Cfg_t timer2 = {
 8001658:	4b23      	ldr	r3, [pc, #140]	; (80016e8 <APP_voidGpioInit+0xb4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
		TIMER_AUTORELOAD_ENABLE,
		TIMER_COUNT_DOWN
	};

	//ADC configration outside main function
		MGPIO_Config_t adc_1 = {
 800165e:	f107 031c 	add.w	r3, r7, #28
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	f8c3 2003 	str.w	r2, [r3, #3]
 800166a:	2303      	movs	r3, #3
 800166c:	773b      	strb	r3, [r7, #28]
			GPIO_MODE_ANALOG,
			GPIO_SPEED_LOW,
			GPIO_NO_PULL,
			GPIO_AF0
		};
	    MGPIO_Config_t adc_2 = {
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	f8c3 2003 	str.w	r2, [r3, #3]
 800167a:	2304      	movs	r3, #4
 800167c:	757b      	strb	r3, [r7, #21]
 800167e:	2303      	movs	r3, #3
 8001680:	75bb      	strb	r3, [r7, #22]
			GPIO_MODE_ANALOG,
			GPIO_SPEED_LOW,
			GPIO_NO_PULL,
			GPIO_AF0
		};
		MGPIO_Config_t adc_3 = {
 8001682:	f107 030c 	add.w	r3, r7, #12
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	f8c3 2003 	str.w	r2, [r3, #3]
 800168e:	2306      	movs	r3, #6
 8001690:	737b      	strb	r3, [r7, #13]
 8001692:	2303      	movs	r3, #3
 8001694:	73bb      	strb	r3, [r7, #14]
			GPIO_MODE_ANALOG,
			GPIO_SPEED_LOW,
			GPIO_NO_PULL,
			GPIO_AF0
		};
		MGPIO_Config_t adc_4 = {
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	f8c3 2003 	str.w	r2, [r3, #3]
 80016a0:	2301      	movs	r3, #1
 80016a2:	713b      	strb	r3, [r7, #4]
 80016a4:	2301      	movs	r3, #1
 80016a6:	717b      	strb	r3, [r7, #5]
 80016a8:	2303      	movs	r3, #3
 80016aa:	71bb      	strb	r3, [r7, #6]
			GPIO_SPEED_LOW,
			GPIO_NO_PULL,
			GPIO_AF0
		};

	TIMERx_voidCounter_Init(TIM2, &timer2);
 80016ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b0:	4619      	mov	r1, r3
 80016b2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80016b6:	f7ff fe43 	bl	8001340 <TIMERx_voidCounter_Init>
	STEPPER_voidInitMotor(&STEPPER_mod[0]);
 80016ba:	480c      	ldr	r0, [pc, #48]	; (80016ec <APP_voidGpioInit+0xb8>)
 80016bc:	f7fe fdcf 	bl	800025e <STEPPER_voidInitMotor>
	STEPPER_voidInitMotor(&STEPPER_mod[1]);
 80016c0:	480b      	ldr	r0, [pc, #44]	; (80016f0 <APP_voidGpioInit+0xbc>)
 80016c2:	f7fe fdcc 	bl	800025e <STEPPER_voidInitMotor>
	STEPPER_voidInitMotor(&STEPPER_mod[2]);
 80016c6:	480b      	ldr	r0, [pc, #44]	; (80016f4 <APP_voidGpioInit+0xc0>)
 80016c8:	f7fe fdc9 	bl	800025e <STEPPER_voidInitMotor>
	STEPPER_voidInitMotor(&STEPPER_mod[3]);
 80016cc:	480a      	ldr	r0, [pc, #40]	; (80016f8 <APP_voidGpioInit+0xc4>)
 80016ce:	f7fe fdc6 	bl	800025e <STEPPER_voidInitMotor>
	LIMSWI_voidSwitchInit();
 80016d2:	f7fe fda1 	bl	8000218 <LIMSWI_voidSwitchInit>
//	GPIO_voidInitPin(&adc_1);
//	GPIO_voidInitPin(&adc_2);
//	GPIO_voidInitPin(&adc_3);
//	GPIO_voidInitPin(&adc_4);
	//only for led blinking test
	GPIO_voidInitPin(&Test3);
 80016d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fd24 	bl	8001128 <GPIO_voidInitPin>
}
 80016e0:	bf00      	nop
 80016e2:	3730      	adds	r7, #48	; 0x30
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	08001964 	.word	0x08001964
 80016ec:	20000010 	.word	0x20000010
 80016f0:	20000018 	.word	0x20000018
 80016f4:	20000020 	.word	0x20000020
 80016f8:	20000028 	.word	0x20000028

080016fc <APP_voidCurrentSense>:
	//ADC_voidInit(&adcConfig[1]);

}

void APP_voidCurrentSense(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08a      	sub	sp, #40	; 0x28
 8001700:	af00      	add	r7, sp, #0
	/*Reading ADC values*/
    u16 adcValues1[4] = {'0', '1', '5', '7'};
 8001702:	4a23      	ldr	r2, [pc, #140]	; (8001790 <APP_voidCurrentSense+0x94>)
 8001704:	f107 031c 	add.w	r3, r7, #28
 8001708:	e892 0003 	ldmia.w	r2, {r0, r1}
 800170c:	e883 0003 	stmia.w	r3, {r0, r1}
    u16 adcValues2[4] = {'7', '4', '3', '1'};
 8001710:	4a20      	ldr	r2, [pc, #128]	; (8001794 <APP_voidCurrentSense+0x98>)
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	e892 0003 	ldmia.w	r2, {r0, r1}
 800171a:	e883 0003 	stmia.w	r3, {r0, r1}
	//ADC_voidSingleRead(&adcConfig[0], adcValues1);
	//ADC_voidSingleRead(&adcConfig[1], adcValues2);

	/*Creating CAN frame*/
	CAN_Frame_t adcFrame = {
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	2329      	movs	r3, #41	; 0x29
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	2308      	movs	r3, #8
 8001730:	723b      	strb	r3, [r7, #8]
		.id = 0x029,  /////
		.dlc = 8,
		.rtr = CAN_FRAME_DATA,
		.ide = CAN_FRAME_STANDARD_ID
	};
    for (int i=0; i<4; i++)
 8001732:	2300      	movs	r3, #0
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
 8001736:	e01f      	b.n	8001778 <APP_voidCurrentSense+0x7c>
	{
	    adcFrame.data[i*2] = (u8)(adcValues1[i] >> 8); //the higher byte
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	3328      	adds	r3, #40	; 0x28
 800173e:	443b      	add	r3, r7
 8001740:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8001744:	0a1b      	lsrs	r3, r3, #8
 8001746:	b29a      	uxth	r2, r3
 8001748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	3328      	adds	r3, #40	; 0x28
 8001750:	443b      	add	r3, r7
 8001752:	f803 2c1d 	strb.w	r2, [r3, #-29]
        adcFrame.data[i*2 + 1] = (u8)(adcValues1[i] & 0xFF); //the lower byte
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	3328      	adds	r3, #40	; 0x28
 800175c:	443b      	add	r3, r7
 800175e:	f833 2c0c 	ldrh.w	r2, [r3, #-12]
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	3301      	adds	r3, #1
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	3328      	adds	r3, #40	; 0x28
 800176c:	443b      	add	r3, r7
 800176e:	f803 2c1d 	strb.w	r2, [r3, #-29]
    for (int i=0; i<4; i++)
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	3301      	adds	r3, #1
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	2b03      	cmp	r3, #3
 800177c:	dddc      	ble.n	8001738 <APP_voidCurrentSense+0x3c>

	}
	CAN_voidSendDataFrame(CAN1, &adcFrame);
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	4619      	mov	r1, r3
 8001782:	4805      	ldr	r0, [pc, #20]	; (8001798 <APP_voidCurrentSense+0x9c>)
 8001784:	f7ff f9aa 	bl	8000adc <CAN_voidSendDataFrame>
}
 8001788:	bf00      	nop
 800178a:	3728      	adds	r7, #40	; 0x28
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	08001968 	.word	0x08001968
 8001794:	08001970 	.word	0x08001970
 8001798:	40006400 	.word	0x40006400

0800179c <APP_voidCanInit>:

void APP_voidCanInit(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	; 0x28
 80017a0:	af00      	add	r7, sp, #0
	MGPIO_Config_t canTxPin = {.Port = GPIO_PORTB, .Pin = GPIO_PIN9, .Mode = GPIO_MODE_ALTF,.AltFunc = GPIO_AF9,.OutputSpeed = GPIO_SPEED_LOW,.OutputType = GPIO_OT_PUSHPULL};
 80017a2:	f107 0320 	add.w	r3, r7, #32
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	f8c3 2003 	str.w	r2, [r3, #3]
 80017ae:	2301      	movs	r3, #1
 80017b0:	f887 3020 	strb.w	r3, [r7, #32]
 80017b4:	2309      	movs	r3, #9
 80017b6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80017ba:	2302      	movs	r3, #2
 80017bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80017c0:	2309      	movs	r3, #9
 80017c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	MGPIO_Config_t canRxPin = {.Port = GPIO_PORTB, .Pin = GPIO_PIN8, .Mode = GPIO_MODE_ALTF,.AltFunc = GPIO_AF9,.OutputSpeed = GPIO_SPEED_LOW,.OutputType = GPIO_OT_PUSHPULL};
 80017c6:	f107 0318 	add.w	r3, r7, #24
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	f8c3 2003 	str.w	r2, [r3, #3]
 80017d2:	2301      	movs	r3, #1
 80017d4:	763b      	strb	r3, [r7, #24]
 80017d6:	2308      	movs	r3, #8
 80017d8:	767b      	strb	r3, [r7, #25]
 80017da:	2302      	movs	r3, #2
 80017dc:	76bb      	strb	r3, [r7, #26]
 80017de:	2309      	movs	r3, #9
 80017e0:	77bb      	strb	r3, [r7, #30]

	CAN_TxConfig_t txCfg;
	txCfg.automaticTransmission = CAN_AUTOMATIC_TRANSMISSION_DISABLE;
 80017e2:	2301      	movs	r3, #1
 80017e4:	75bb      	strb	r3, [r7, #22]
	txCfg.bufferType = CAN_TX_BUFFER_FIFO;
 80017e6:	2300      	movs	r3, #0
 80017e8:	757b      	strb	r3, [r7, #21]
	txCfg.transmitPause = CAN_TX_PAUSE_DISABLE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	753b      	strb	r3, [r7, #20]

	CAN_RxConfig_t rxCfg;
	rxCfg.FIFO0_Mode = CAN_RX_FIFO_OVERWRITE;
 80017ee:	2301      	movs	r3, #1
 80017f0:	717b      	strb	r3, [r7, #5]
	rxCfg.FIFO1_Mode = CAN_RX_FIFO_OVERWRITE;
 80017f2:	2301      	movs	r3, #1
 80017f4:	71bb      	strb	r3, [r7, #6]
	rxCfg.FIFO0_numberOfIDs = CAN_IDS_COUNT;
 80017f6:	2305      	movs	r3, #5
 80017f8:	71fb      	strb	r3, [r7, #7]
	rxCfg.FIFO1_numberOfIDs = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	723b      	strb	r3, [r7, #8]
	rxCfg.FIFO0_IDs = IDs;
 80017fe:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <APP_voidCanInit+0x98>)
 8001800:	60fb      	str	r3, [r7, #12]
	rxCfg.FIFO1_IDs = NULL;
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
	rxCfg.nonMatchingFrames = CAN_RX_REJECT;
 8001806:	2302      	movs	r3, #2
 8001808:	713b      	strb	r3, [r7, #4]

	GPIO_voidInitPin(&canTxPin);
 800180a:	f107 0320 	add.w	r3, r7, #32
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fc8a 	bl	8001128 <GPIO_voidInitPin>
	GPIO_voidInitPin(&canRxPin);
 8001814:	f107 0318 	add.w	r3, r7, #24
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff fc85 	bl	8001128 <GPIO_voidInitPin>
	CAN_voidInit(CAN1, &rxCfg, &txCfg);
 800181e:	f107 0214 	add.w	r2, r7, #20
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	4619      	mov	r1, r3
 8001826:	4804      	ldr	r0, [pc, #16]	; (8001838 <APP_voidCanInit+0x9c>)
 8001828:	f7fe fe62 	bl	80004f0 <CAN_voidInit>
}
 800182c:	bf00      	nop
 800182e:	3728      	adds	r7, #40	; 0x28
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000040 	.word	0x20000040
 8001838:	40006400 	.word	0x40006400

0800183c <APP_voidHoming>:

void APP_voidHoming(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af02      	add	r7, sp, #8
	while(LimSwitch == 1)																			//While the switch isn't pressed, exits once it is pressed
 8001842:	e014      	b.n	800186e <APP_voidHoming+0x32>
	{
		STEPPER_voidQuadMotorHome(&STEPPER_mod[0], &STEPPER_mod[1], &STEPPER_mod[2], &STEPPER_mod[3], TIM2);		//Take one step towards homing position
 8001844:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <APP_voidHoming+0x48>)
 800184c:	4a0e      	ldr	r2, [pc, #56]	; (8001888 <APP_voidHoming+0x4c>)
 800184e:	490f      	ldr	r1, [pc, #60]	; (800188c <APP_voidHoming+0x50>)
 8001850:	480f      	ldr	r0, [pc, #60]	; (8001890 <APP_voidHoming+0x54>)
 8001852:	f7fe fdda 	bl	800040a <STEPPER_voidQuadMotorHome>
		LimSwitch = LIMSWI_u8SwitchPress(LIMSWI[1].Port, LIMSWI[1].Pin);											//Update the status of the switch
 8001856:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <APP_voidHoming+0x58>)
 8001858:	79db      	ldrb	r3, [r3, #7]
 800185a:	4a0e      	ldr	r2, [pc, #56]	; (8001894 <APP_voidHoming+0x58>)
 800185c:	7a12      	ldrb	r2, [r2, #8]
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fce7 	bl	8000234 <LIMSWI_u8SwitchPress>
 8001866:	4603      	mov	r3, r0
 8001868:	461a      	mov	r2, r3
 800186a:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <APP_voidHoming+0x5c>)
 800186c:	701a      	strb	r2, [r3, #0]
	while(LimSwitch == 1)																			//While the switch isn't pressed, exits once it is pressed
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <APP_voidHoming+0x5c>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d0e6      	beq.n	8001844 <APP_voidHoming+0x8>
	}
	currentPosition = 0;
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <APP_voidHoming+0x60>)
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000028 	.word	0x20000028
 8001888:	20000020 	.word	0x20000020
 800188c:	20000018 	.word	0x20000018
 8001890:	20000010 	.word	0x20000010
 8001894:	20000030 	.word	0x20000030
 8001898:	20000054 	.word	0x20000054
 800189c:	20000074 	.word	0x20000074

080018a0 <APP_voidEnsureSafety>:

void APP_voidEnsureSafety(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
		{
			STEPPER_voidQuadMotorHome(&STEPPER_mod[0], &STEPPER_mod[1], &STEPPER_mod[2], &STEPPER_mod[3], TIM2);
			currentPosition+= 4;
		}
	}
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
	...

080018b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018b0:	480d      	ldr	r0, [pc, #52]	; (80018e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80018b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018b8:	480c      	ldr	r0, [pc, #48]	; (80018ec <LoopForever+0x6>)
  ldr r1, =_edata
 80018ba:	490d      	ldr	r1, [pc, #52]	; (80018f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018bc:	4a0d      	ldr	r2, [pc, #52]	; (80018f4 <LoopForever+0xe>)
  movs r3, #0
 80018be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c0:	e002      	b.n	80018c8 <LoopCopyDataInit>

080018c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c6:	3304      	adds	r3, #4

080018c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018cc:	d3f9      	bcc.n	80018c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018d0:	4c0a      	ldr	r4, [pc, #40]	; (80018fc <LoopForever+0x16>)
  movs r3, #0
 80018d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d4:	e001      	b.n	80018da <LoopFillZerobss>

080018d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d8:	3204      	adds	r2, #4

080018da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018dc:	d3fb      	bcc.n	80018d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80018de:	f000 f811 	bl	8001904 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018e2:	f7ff fd9f 	bl	8001424 <main>

080018e6 <LoopForever>:

LoopForever:
  b LoopForever
 80018e6:	e7fe      	b.n	80018e6 <LoopForever>
  ldr   r0, =_estack
 80018e8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80018ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f0:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 80018f4:	08001980 	.word	0x08001980
  ldr r2, =_sbss
 80018f8:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 80018fc:	20000078 	.word	0x20000078

08001900 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001900:	e7fe      	b.n	8001900 <ADC1_2_IRQHandler>
	...

08001904 <__libc_init_array>:
 8001904:	b570      	push	{r4, r5, r6, lr}
 8001906:	4d0d      	ldr	r5, [pc, #52]	; (800193c <__libc_init_array+0x38>)
 8001908:	4c0d      	ldr	r4, [pc, #52]	; (8001940 <__libc_init_array+0x3c>)
 800190a:	1b64      	subs	r4, r4, r5
 800190c:	10a4      	asrs	r4, r4, #2
 800190e:	2600      	movs	r6, #0
 8001910:	42a6      	cmp	r6, r4
 8001912:	d109      	bne.n	8001928 <__libc_init_array+0x24>
 8001914:	4d0b      	ldr	r5, [pc, #44]	; (8001944 <__libc_init_array+0x40>)
 8001916:	4c0c      	ldr	r4, [pc, #48]	; (8001948 <__libc_init_array+0x44>)
 8001918:	f000 f818 	bl	800194c <_init>
 800191c:	1b64      	subs	r4, r4, r5
 800191e:	10a4      	asrs	r4, r4, #2
 8001920:	2600      	movs	r6, #0
 8001922:	42a6      	cmp	r6, r4
 8001924:	d105      	bne.n	8001932 <__libc_init_array+0x2e>
 8001926:	bd70      	pop	{r4, r5, r6, pc}
 8001928:	f855 3b04 	ldr.w	r3, [r5], #4
 800192c:	4798      	blx	r3
 800192e:	3601      	adds	r6, #1
 8001930:	e7ee      	b.n	8001910 <__libc_init_array+0xc>
 8001932:	f855 3b04 	ldr.w	r3, [r5], #4
 8001936:	4798      	blx	r3
 8001938:	3601      	adds	r6, #1
 800193a:	e7f2      	b.n	8001922 <__libc_init_array+0x1e>
 800193c:	08001978 	.word	0x08001978
 8001940:	08001978 	.word	0x08001978
 8001944:	08001978 	.word	0x08001978
 8001948:	0800197c 	.word	0x0800197c

0800194c <_init>:
 800194c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800194e:	bf00      	nop
 8001950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001952:	bc08      	pop	{r3}
 8001954:	469e      	mov	lr, r3
 8001956:	4770      	bx	lr

08001958 <_fini>:
 8001958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800195a:	bf00      	nop
 800195c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800195e:	bc08      	pop	{r3}
 8001960:	469e      	mov	lr, r3
 8001962:	4770      	bx	lr
