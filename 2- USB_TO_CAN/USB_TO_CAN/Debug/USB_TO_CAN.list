
USB_TO_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fbc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008194  08008194  00018194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081f4  080081f4  000201a8  2**0
                  CONTENTS
  4 .ARM          00000000  080081f4  080081f4  000201a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080081f4  080081f4  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081f4  080081f4  000181f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081f8  080081f8  000181f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a8  20000000  080081fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011c0  200001a8  080083a4  000201a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001368  080083a4  00021368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eea6  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a36  00000000  00000000  0002f07e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  00031ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a70  00000000  00000000  00032670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f279  00000000  00000000  000330e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f60a  00000000  00000000  00052359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b618b  00000000  00000000  00061963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00117aee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dbc  00000000  00000000  00117b40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001a8 	.word	0x200001a8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800817c 	.word	0x0800817c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001ac 	.word	0x200001ac
 8000214:	0800817c 	.word	0x0800817c

08000218 <delay>:
u32 IDs[CAN_IDS_COUNT] = {0x01, 0x02, 0x003, 0x008, 0x009, 0x00A, 0x00F}; // Should Contain All UpStream IDs
uint8_t buffer[14] = "0000000000000\n";

#if CAN_DEBUG_USING_LED
void delay(u32 ms)
{
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	for(u32 i = 0; i < ms; i++)
 8000220:	2300      	movs	r3, #0
 8000222:	60fb      	str	r3, [r7, #12]
 8000224:	e00c      	b.n	8000240 <delay+0x28>
		for(u32 j = 0; j < 1080; j++);
 8000226:	2300      	movs	r3, #0
 8000228:	60bb      	str	r3, [r7, #8]
 800022a:	e002      	b.n	8000232 <delay+0x1a>
 800022c:	68bb      	ldr	r3, [r7, #8]
 800022e:	3301      	adds	r3, #1
 8000230:	60bb      	str	r3, [r7, #8]
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
 8000238:	d3f8      	bcc.n	800022c <delay+0x14>
	for(u32 i = 0; i < ms; i++)
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	3301      	adds	r3, #1
 800023e:	60fb      	str	r3, [r7, #12]
 8000240:	68fa      	ldr	r2, [r7, #12]
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	429a      	cmp	r2, r3
 8000246:	d3ee      	bcc.n	8000226 <delay+0xe>
}
 8000248:	bf00      	nop
 800024a:	bf00      	nop
 800024c:	3714      	adds	r7, #20
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr
	...

08000258 <main>:
#endif

int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b094      	sub	sp, #80	; 0x50
 800025c:	af00      	add	r7, sp, #0
	// Clock System Initialize
	APP_voidSystemClockInit();
 800025e:	f000 f8df 	bl	8000420 <APP_voidSystemClockInit>

	// Initialize Peripherals
	MGPIO_Config_t PC13 = {.Port = GPIO_PORTC, .Pin = GPIO_PIN13, .Mode = GPIO_MODE_OUTPUT,.AltFunc = GPIO_AF9,.OutputSpeed = GPIO_SPEED_LOW,.OutputType = GPIO_OT_PUSHPULL};
 8000262:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	f8c3 2003 	str.w	r2, [r3, #3]
 800026e:	2302      	movs	r3, #2
 8000270:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8000274:	230d      	movs	r3, #13
 8000276:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800027a:	2301      	movs	r3, #1
 800027c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8000280:	2309      	movs	r3, #9
 8000282:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	GPIO_voidInitPin(&PC13);
 8000286:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800028a:	4618      	mov	r0, r3
 800028c:	f005 fc06 	bl	8005a9c <GPIO_voidInitPin>
	APP_voidCanInit();
 8000290:	f000 f8ee 	bl	8000470 <APP_voidCanInit>
	MX_USB_Device_Init();
 8000294:	f007 fa3a 	bl	800770c <MX_USB_Device_Init>

	// Initialize Variables
	CAN_Frame_t receiveFrame;
	receiveFrame.id = 0x00;
 8000298:	2300      	movs	r3, #0
 800029a:	637b      	str	r3, [r7, #52]	; 0x34

	CAN_Frame_t transmitFrame;
	transmitFrame.ide = CAN_FRAME_STANDARD_ID;
 800029c:	2300      	movs	r3, #0
 800029e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	transmitFrame.data[0] = 'W';
 80002a2:	2357      	movs	r3, #87	; 0x57
 80002a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	transmitFrame.data[1] = 'a';
 80002a8:	2361      	movs	r3, #97	; 0x61
 80002aa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	transmitFrame.data[2] = 'k';
 80002ae:	236b      	movs	r3, #107	; 0x6b
 80002b0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	transmitFrame.data[3] = 'e';
 80002b4:	2365      	movs	r3, #101	; 0x65
 80002b6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	transmitFrame.data[4] = 'U';
 80002ba:	2355      	movs	r3, #85	; 0x55
 80002bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	transmitFrame.data[5] = 'p';
 80002c0:	2370      	movs	r3, #112	; 0x70
 80002c2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	USB_RX_t currentMessage, previousMessage;
	previousMessage.msg_id = 0x000;
 80002c6:	2300      	movs	r3, #0
 80002c8:	607b      	str	r3, [r7, #4]
	currentMessage.msg_id = 0x000;
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]

	u8 receivedMsgCount = 0;
 80002ce:	2300      	movs	r3, #0
 80002d0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	u8 sameMsg;

	transmitFrame.id = 0x000;
 80002d4:	2300      	movs	r3, #0
 80002d6:	627b      	str	r3, [r7, #36]	; 0x24
	transmitFrame.rtr = CAN_FRAME_DATA;
 80002d8:	2300      	movs	r3, #0
 80002da:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	transmitFrame.dlc = 8;
 80002de:	2308      	movs	r3, #8
 80002e0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

#if CAN_DEBUG_USING_LED
	delay(1000);
 80002e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002e8:	f7ff ff96 	bl	8000218 <delay>
	GPIO_voidSetPinValue(GPIO_PORTC, 13, 1);
 80002ec:	2201      	movs	r2, #1
 80002ee:	210d      	movs	r1, #13
 80002f0:	2002      	movs	r0, #2
 80002f2:	f005 fa97 	bl	8005824 <GPIO_voidSetPinValue>
	delay(1000);
 80002f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002fa:	f7ff ff8d 	bl	8000218 <delay>

	//CAN_voidSendDataFrame(CAN1, &transmitFrame);
	while(1)
	{
		// Receive from USB
		APP_voidReceiveDataUSB(buffer, &currentMessage);
 80002fe:	f107 0314 	add.w	r3, r7, #20
 8000302:	4619      	mov	r1, r3
 8000304:	4844      	ldr	r0, [pc, #272]	; (8000418 <main+0x1c0>)
 8000306:	f000 f965 	bl	80005d4 <APP_voidReceiveDataUSB>

		// Check if the message is new
		//sameMsg = APP_u8SameMessage(&previousMessage, &currentMessage);

		// Send CAN Message
		if(currentMessage.msg_id != 0x000)
 800030a:	697b      	ldr	r3, [r7, #20]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d05f      	beq.n	80003d0 <main+0x178>
		{
			// Send CAN message
			transmitFrame.id   = currentMessage.msg_id;
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	627b      	str	r3, [r7, #36]	; 0x24
			transmitFrame.rtr  = currentMessage.rtr;
 8000314:	7e3b      	ldrb	r3, [r7, #24]
 8000316:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			transmitFrame.dlc  = currentMessage.dlc;
 800031a:	7e7b      	ldrb	r3, [r7, #25]
 800031c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			for(u8 i = 0; i < transmitFrame.dlc; i++)
 8000320:	2300      	movs	r3, #0
 8000322:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000326:	e010      	b.n	800034a <main+0xf2>
				transmitFrame.data[i] = currentMessage.data[i];
 8000328:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800032c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000330:	3250      	adds	r2, #80	; 0x50
 8000332:	443a      	add	r2, r7
 8000334:	f812 2c36 	ldrb.w	r2, [r2, #-54]
 8000338:	3350      	adds	r3, #80	; 0x50
 800033a:	443b      	add	r3, r7
 800033c:	f803 2c25 	strb.w	r2, [r3, #-37]
			for(u8 i = 0; i < transmitFrame.dlc; i++)
 8000340:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000344:	3301      	adds	r3, #1
 8000346:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800034a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800034e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000352:	429a      	cmp	r2, r3
 8000354:	d3e8      	bcc.n	8000328 <main+0xd0>
				}
			}
#endif
*/

			CAN_voidSendDataFrame(CAN1, &transmitFrame);
 8000356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800035a:	4619      	mov	r1, r3
 800035c:	482f      	ldr	r0, [pc, #188]	; (800041c <main+0x1c4>)
 800035e:	f005 f8c9 	bl	80054f4 <CAN_voidSendDataFrame>

			// Update previous message
			buffer[0] = '0';
 8000362:	4b2d      	ldr	r3, [pc, #180]	; (8000418 <main+0x1c0>)
 8000364:	2230      	movs	r2, #48	; 0x30
 8000366:	701a      	strb	r2, [r3, #0]
			buffer[1] = '0';
 8000368:	4b2b      	ldr	r3, [pc, #172]	; (8000418 <main+0x1c0>)
 800036a:	2230      	movs	r2, #48	; 0x30
 800036c:	705a      	strb	r2, [r3, #1]
			buffer[2] = '0';
 800036e:	4b2a      	ldr	r3, [pc, #168]	; (8000418 <main+0x1c0>)
 8000370:	2230      	movs	r2, #48	; 0x30
 8000372:	709a      	strb	r2, [r3, #2]
			buffer[3] = '0';
 8000374:	4b28      	ldr	r3, [pc, #160]	; (8000418 <main+0x1c0>)
 8000376:	2230      	movs	r2, #48	; 0x30
 8000378:	70da      	strb	r2, [r3, #3]


			delay(50);
 800037a:	2032      	movs	r0, #50	; 0x32
 800037c:	f7ff ff4c 	bl	8000218 <delay>
			// Check CAN Receive Buffer
			receivedMsgCount = CAN_u8GetReceivedMessagesCount(CAN1, CAN_RX_FIFO0);
 8000380:	2100      	movs	r1, #0
 8000382:	4826      	ldr	r0, [pc, #152]	; (800041c <main+0x1c4>)
 8000384:	f005 f896 	bl	80054b4 <CAN_u8GetReceivedMessagesCount>
 8000388:	4603      	mov	r3, r0
 800038a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

			// Send USB Acknowledge (Containing whether we will send or receive)
			if(receivedMsgCount == 0){
 800038e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000392:	2b00      	cmp	r3, #0
 8000394:	d108      	bne.n	80003a8 <main+0x150>
				APP_voidSendAckUSB(1);
 8000396:	2001      	movs	r0, #1
 8000398:	f000 f8ba 	bl	8000510 <APP_voidSendAckUSB>
				GPIO_voidSetPinValue(GPIO_PORTC, 13, 1);
 800039c:	2201      	movs	r2, #1
 800039e:	210d      	movs	r1, #13
 80003a0:	2002      	movs	r0, #2
 80003a2:	f005 fa3f 	bl	8005824 <GPIO_voidSetPinValue>
 80003a6:	e013      	b.n	80003d0 <main+0x178>
			}
			else{
				APP_voidSendAckUSB(2);
 80003a8:	2002      	movs	r0, #2
 80003aa:	f000 f8b1 	bl	8000510 <APP_voidSendAckUSB>
				GPIO_voidSetPinValue(GPIO_PORTC, 13, 0);
 80003ae:	2200      	movs	r2, #0
 80003b0:	210d      	movs	r1, #13
 80003b2:	2002      	movs	r0, #2
 80003b4:	f005 fa36 	bl	8005824 <GPIO_voidSetPinValue>
				CAN_voidReceiveDataFrame(CAN1, &receiveFrame, CAN_RX_FIFO0);
 80003b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80003bc:	2200      	movs	r2, #0
 80003be:	4619      	mov	r1, r3
 80003c0:	4816      	ldr	r0, [pc, #88]	; (800041c <main+0x1c4>)
 80003c2:	f004 ff31 	bl	8005228 <CAN_voidReceiveDataFrame>
				APP_voidSendDataUSB(&receiveFrame);
 80003c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 f8be 	bl	800054c <APP_voidSendDataUSB>
			}

		}

		delay(50);
 80003d0:	2032      	movs	r0, #50	; 0x32
 80003d2:	f7ff ff21 	bl	8000218 <delay>
		// Check CAN Receive Buffer
		receivedMsgCount = CAN_u8GetReceivedMessagesCount(CAN1, CAN_RX_FIFO0);
 80003d6:	2100      	movs	r1, #0
 80003d8:	4810      	ldr	r0, [pc, #64]	; (800041c <main+0x1c4>)
 80003da:	f005 f86b 	bl	80054b4 <CAN_u8GetReceivedMessagesCount>
 80003de:	4603      	mov	r3, r0
 80003e0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

		// Send USB Acknowledge (Containing whether we will send or receive)
		if(receivedMsgCount != 0){
 80003e4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d088      	beq.n	80002fe <main+0xa6>
			APP_voidSendAckUSB(2);
 80003ec:	2002      	movs	r0, #2
 80003ee:	f000 f88f 	bl	8000510 <APP_voidSendAckUSB>
			GPIO_voidSetPinValue(GPIO_PORTC, 13, 0);
 80003f2:	2200      	movs	r2, #0
 80003f4:	210d      	movs	r1, #13
 80003f6:	2002      	movs	r0, #2
 80003f8:	f005 fa14 	bl	8005824 <GPIO_voidSetPinValue>
			CAN_voidReceiveDataFrame(CAN1, &receiveFrame, CAN_RX_FIFO0);
 80003fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000400:	2200      	movs	r2, #0
 8000402:	4619      	mov	r1, r3
 8000404:	4805      	ldr	r0, [pc, #20]	; (800041c <main+0x1c4>)
 8000406:	f004 ff0f 	bl	8005228 <CAN_voidReceiveDataFrame>
			APP_voidSendDataUSB(&receiveFrame);
 800040a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800040e:	4618      	mov	r0, r3
 8000410:	f000 f89c 	bl	800054c <APP_voidSendDataUSB>
		APP_voidReceiveDataUSB(buffer, &currentMessage);
 8000414:	e773      	b.n	80002fe <main+0xa6>
 8000416:	bf00      	nop
 8000418:	2000001c 	.word	0x2000001c
 800041c:	40006400 	.word	0x40006400

08000420 <APP_voidSystemClockInit>:
		}
	}
}

void APP_voidSystemClockInit(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	RCC_voidInit();
 8000424:	f005 fb68 	bl	8005af8 <RCC_voidInit>
	//RCC_voidPeripheralClockCfg(RCC_CCIPR_REG1, FDCAN_Cfg);
	RCC->CCIPR |= (1 << 25);
 8000428:	4b10      	ldr	r3, [pc, #64]	; (800046c <APP_voidSystemClockInit+0x4c>)
 800042a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800042e:	4a0f      	ldr	r2, [pc, #60]	; (800046c <APP_voidSystemClockInit+0x4c>)
 8000430:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000434:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC_voidPeripheralClockCfg(RCC_CCIPR_REG1,CLK48_Cfg);
 8000438:	211a      	movs	r1, #26
 800043a:	2001      	movs	r0, #1
 800043c:	f005 fc24 	bl	8005c88 <RCC_voidPeripheralClockCfg>


	// Enable Peripherals
	RCC_voidPeripheralClockEnable(RCC_AHB2, RCC_GPIO_A);
 8000440:	2100      	movs	r1, #0
 8000442:	2001      	movs	r0, #1
 8000444:	f005 fbbc 	bl	8005bc0 <RCC_voidPeripheralClockEnable>
	RCC_voidPeripheralClockEnable(RCC_AHB2, RCC_GPIO_B);
 8000448:	2101      	movs	r1, #1
 800044a:	2001      	movs	r0, #1
 800044c:	f005 fbb8 	bl	8005bc0 <RCC_voidPeripheralClockEnable>
	RCC_voidPeripheralClockEnable(RCC_AHB2, RCC_GPIO_C);
 8000450:	2102      	movs	r1, #2
 8000452:	2001      	movs	r0, #1
 8000454:	f005 fbb4 	bl	8005bc0 <RCC_voidPeripheralClockEnable>
	RCC_voidPeripheralClockEnable(RCC_APB1_1, RCC_FDCAN);
 8000458:	2119      	movs	r1, #25
 800045a:	2003      	movs	r0, #3
 800045c:	f005 fbb0 	bl	8005bc0 <RCC_voidPeripheralClockEnable>
	RCC_voidPeripheralClockEnable(RCC_APB1_1, RCC_USB);
 8000460:	2117      	movs	r1, #23
 8000462:	2003      	movs	r0, #3
 8000464:	f005 fbac 	bl	8005bc0 <RCC_voidPeripheralClockEnable>
}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40021000 	.word	0x40021000

08000470 <APP_voidCanInit>:

void APP_voidCanInit(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b08a      	sub	sp, #40	; 0x28
 8000474:	af00      	add	r7, sp, #0
	MGPIO_Config_t canTxPin = {.Port = GPIO_PORTB, .Pin = GPIO_PIN9, .Mode = GPIO_MODE_ALTF,.AltFunc = GPIO_AF9,.OutputSpeed = GPIO_SPEED_LOW,.OutputType = GPIO_OT_PUSHPULL};
 8000476:	f107 0320 	add.w	r3, r7, #32
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	f8c3 2003 	str.w	r2, [r3, #3]
 8000482:	2301      	movs	r3, #1
 8000484:	f887 3020 	strb.w	r3, [r7, #32]
 8000488:	2309      	movs	r3, #9
 800048a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800048e:	2302      	movs	r3, #2
 8000490:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8000494:	2309      	movs	r3, #9
 8000496:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	MGPIO_Config_t canRxPin = {.Port = GPIO_PORTB, .Pin = GPIO_PIN8, .Mode = GPIO_MODE_ALTF,.AltFunc = GPIO_AF9,.OutputSpeed = GPIO_SPEED_LOW,.OutputType = GPIO_OT_PUSHPULL};
 800049a:	f107 0318 	add.w	r3, r7, #24
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	f8c3 2003 	str.w	r2, [r3, #3]
 80004a6:	2301      	movs	r3, #1
 80004a8:	763b      	strb	r3, [r7, #24]
 80004aa:	2308      	movs	r3, #8
 80004ac:	767b      	strb	r3, [r7, #25]
 80004ae:	2302      	movs	r3, #2
 80004b0:	76bb      	strb	r3, [r7, #26]
 80004b2:	2309      	movs	r3, #9
 80004b4:	77bb      	strb	r3, [r7, #30]

	CAN_TxConfig_t txCfg;
	txCfg.automaticTransmission = CAN_AUTOMATIC_TRANSMISSION_DISABLE;
 80004b6:	2301      	movs	r3, #1
 80004b8:	75bb      	strb	r3, [r7, #22]
	txCfg.bufferType = CAN_TX_BUFFER_FIFO;
 80004ba:	2300      	movs	r3, #0
 80004bc:	757b      	strb	r3, [r7, #21]
	txCfg.transmitPause = CAN_TX_PAUSE_DISABLE;
 80004be:	2300      	movs	r3, #0
 80004c0:	753b      	strb	r3, [r7, #20]

	CAN_RxConfig_t rxCfg;
	rxCfg.FIFO0_Mode = CAN_RX_FIFO_OVERWRITE;
 80004c2:	2301      	movs	r3, #1
 80004c4:	717b      	strb	r3, [r7, #5]
	rxCfg.FIFO1_Mode = CAN_RX_FIFO_OVERWRITE;
 80004c6:	2301      	movs	r3, #1
 80004c8:	71bb      	strb	r3, [r7, #6]
	rxCfg.FIFO0_numberOfIDs = CAN_IDS_COUNT;
 80004ca:	2307      	movs	r3, #7
 80004cc:	71fb      	strb	r3, [r7, #7]
	rxCfg.FIFO1_numberOfIDs = 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	723b      	strb	r3, [r7, #8]
	rxCfg.FIFO0_IDs = IDs;
 80004d2:	4b0d      	ldr	r3, [pc, #52]	; (8000508 <APP_voidCanInit+0x98>)
 80004d4:	60fb      	str	r3, [r7, #12]
	rxCfg.FIFO1_IDs = NULL;
 80004d6:	2300      	movs	r3, #0
 80004d8:	613b      	str	r3, [r7, #16]
	rxCfg.nonMatchingFrames = CAN_RX_REJECT;
 80004da:	2302      	movs	r3, #2
 80004dc:	713b      	strb	r3, [r7, #4]

	GPIO_voidInitPin(&canTxPin);
 80004de:	f107 0320 	add.w	r3, r7, #32
 80004e2:	4618      	mov	r0, r3
 80004e4:	f005 fada 	bl	8005a9c <GPIO_voidInitPin>
	GPIO_voidInitPin(&canRxPin);
 80004e8:	f107 0318 	add.w	r3, r7, #24
 80004ec:	4618      	mov	r0, r3
 80004ee:	f005 fad5 	bl	8005a9c <GPIO_voidInitPin>
	CAN_voidInit(CAN1, &rxCfg, &txCfg);
 80004f2:	f107 0214 	add.w	r2, r7, #20
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	4619      	mov	r1, r3
 80004fa:	4804      	ldr	r0, [pc, #16]	; (800050c <APP_voidCanInit+0x9c>)
 80004fc:	f004 fd04 	bl	8004f08 <CAN_voidInit>
}
 8000500:	bf00      	nop
 8000502:	3728      	adds	r7, #40	; 0x28
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000000 	.word	0x20000000
 800050c:	40006400 	.word	0x40006400

08000510 <APP_voidSendAckUSB>:

	return L_result;
}

void APP_voidSendAckUSB(u8 A_ack)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	71fb      	strb	r3, [r7, #7]
	u8 msg[5] = "0000\n";
 800051a:	4a0b      	ldr	r2, [pc, #44]	; (8000548 <APP_voidSendAckUSB+0x38>)
 800051c:	f107 0308 	add.w	r3, r7, #8
 8000520:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000524:	6018      	str	r0, [r3, #0]
 8000526:	3304      	adds	r3, #4
 8000528:	7019      	strb	r1, [r3, #0]
	msg[3] = '0' + A_ack;
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	3330      	adds	r3, #48	; 0x30
 800052e:	b2db      	uxtb	r3, r3
 8000530:	72fb      	strb	r3, [r7, #11]
	CDC_Transmit_FS(msg, 5);
 8000532:	f107 0308 	add.w	r3, r7, #8
 8000536:	2105      	movs	r1, #5
 8000538:	4618      	mov	r0, r3
 800053a:	f007 f9a5 	bl	8007888 <CDC_Transmit_FS>
}
 800053e:	bf00      	nop
 8000540:	3710      	adds	r7, #16
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	08008194 	.word	0x08008194

0800054c <APP_voidSendDataUSB>:

void APP_voidSendDataUSB(CAN_Frame_t* A_frame)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	 *  ID  RTR DLC data       end
	 *  000  0   0   00000000	\n
	 */

	// ID
	APP_voidDecimalToHex(A_frame->id, msg);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f107 0208 	add.w	r2, r7, #8
 800055c:	4611      	mov	r1, r2
 800055e:	4618      	mov	r0, r3
 8000560:	f000 f880 	bl	8000664 <APP_voidDecimalToHex>

	// RTR
	msg[3] = '0' + A_frame->rtr;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	795b      	ldrb	r3, [r3, #5]
 8000568:	3330      	adds	r3, #48	; 0x30
 800056a:	b2db      	uxtb	r3, r3
 800056c:	72fb      	strb	r3, [r7, #11]

	// DLC
	msg[4] = '0' + A_frame->dlc;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	791b      	ldrb	r3, [r3, #4]
 8000572:	3330      	adds	r3, #48	; 0x30
 8000574:	b2db      	uxtb	r3, r3
 8000576:	733b      	strb	r3, [r7, #12]

	// Data
	u8 i = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	75fb      	strb	r3, [r7, #23]
	for(i = 0; i < 8; i++){
 800057c:	2300      	movs	r3, #0
 800057e:	75fb      	strb	r3, [r7, #23]
 8000580:	e019      	b.n	80005b6 <APP_voidSendDataUSB+0x6a>
		if(i < A_frame->dlc)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	791b      	ldrb	r3, [r3, #4]
 8000586:	7dfa      	ldrb	r2, [r7, #23]
 8000588:	429a      	cmp	r2, r3
 800058a:	d20a      	bcs.n	80005a2 <APP_voidSendDataUSB+0x56>
			msg[5 + i] = A_frame->data[i];
 800058c:	7dfa      	ldrb	r2, [r7, #23]
 800058e:	7dfb      	ldrb	r3, [r7, #23]
 8000590:	3305      	adds	r3, #5
 8000592:	6879      	ldr	r1, [r7, #4]
 8000594:	440a      	add	r2, r1
 8000596:	79d2      	ldrb	r2, [r2, #7]
 8000598:	3318      	adds	r3, #24
 800059a:	443b      	add	r3, r7
 800059c:	f803 2c10 	strb.w	r2, [r3, #-16]
 80005a0:	e006      	b.n	80005b0 <APP_voidSendDataUSB+0x64>
		else
			msg[5 + i] = '0';
 80005a2:	7dfb      	ldrb	r3, [r7, #23]
 80005a4:	3305      	adds	r3, #5
 80005a6:	3318      	adds	r3, #24
 80005a8:	443b      	add	r3, r7
 80005aa:	2230      	movs	r2, #48	; 0x30
 80005ac:	f803 2c10 	strb.w	r2, [r3, #-16]
	for(i = 0; i < 8; i++){
 80005b0:	7dfb      	ldrb	r3, [r7, #23]
 80005b2:	3301      	adds	r3, #1
 80005b4:	75fb      	strb	r3, [r7, #23]
 80005b6:	7dfb      	ldrb	r3, [r7, #23]
 80005b8:	2b07      	cmp	r3, #7
 80005ba:	d9e2      	bls.n	8000582 <APP_voidSendDataUSB+0x36>
	}

	// End
	msg[13] = '\n';
 80005bc:	230a      	movs	r3, #10
 80005be:	757b      	strb	r3, [r7, #21]

	// Send Message Via USB
	CDC_Transmit_FS(msg, 14);
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	210e      	movs	r1, #14
 80005c6:	4618      	mov	r0, r3
 80005c8:	f007 f95e 	bl	8007888 <CDC_Transmit_FS>
}
 80005cc:	bf00      	nop
 80005ce:	3718      	adds	r7, #24
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <APP_voidReceiveDataUSB>:

void APP_voidReceiveDataUSB(uint8_t* buffer, USB_RX_t *A_xDecoded_data)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
	u32 len = 14;
 80005de:	230e      	movs	r3, #14
 80005e0:	613b      	str	r3, [r7, #16]
	CDC_Receive_FS(buffer, &len);
 80005e2:	f107 0310 	add.w	r3, r7, #16
 80005e6:	4619      	mov	r1, r3
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f007 f939 	bl	8007860 <CDC_Receive_FS>
	u8 hex_str[3];
	hex_str[0] = buffer[0] ;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	733b      	strb	r3, [r7, #12]
	hex_str[1] = buffer[1] ;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	785b      	ldrb	r3, [r3, #1]
 80005f8:	737b      	strb	r3, [r7, #13]
	hex_str[2] = buffer[2] ;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	789b      	ldrb	r3, [r3, #2]
 80005fe:	73bb      	strb	r3, [r7, #14]

	A_xDecoded_data->msg_id = APP_u32StringToHex(hex_str);
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	4618      	mov	r0, r3
 8000606:	f000 f85b 	bl	80006c0 <APP_u32StringToHex>
 800060a:	4602      	mov	r2, r0
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	601a      	str	r2, [r3, #0]

	A_xDecoded_data->rtr = buffer[3] - '0';
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3303      	adds	r3, #3
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	3b30      	subs	r3, #48	; 0x30
 8000618:	b2da      	uxtb	r2, r3
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	711a      	strb	r2, [r3, #4]

	A_xDecoded_data->dlc = buffer[4] - '0';
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	3304      	adds	r3, #4
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	3b30      	subs	r3, #48	; 0x30
 8000626:	b2da      	uxtb	r2, r3
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	715a      	strb	r2, [r3, #5]

	for (u8 i = 0; i < A_xDecoded_data->dlc; i++) {
 800062c:	2300      	movs	r3, #0
 800062e:	75fb      	strb	r3, [r7, #23]
 8000630:	e00d      	b.n	800064e <APP_voidReceiveDataUSB+0x7a>
		A_xDecoded_data->data[i] = buffer[5 + i];
 8000632:	7dfb      	ldrb	r3, [r7, #23]
 8000634:	3305      	adds	r3, #5
 8000636:	461a      	mov	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	441a      	add	r2, r3
 800063c:	7dfb      	ldrb	r3, [r7, #23]
 800063e:	7811      	ldrb	r1, [r2, #0]
 8000640:	683a      	ldr	r2, [r7, #0]
 8000642:	4413      	add	r3, r2
 8000644:	460a      	mov	r2, r1
 8000646:	719a      	strb	r2, [r3, #6]
	for (u8 i = 0; i < A_xDecoded_data->dlc; i++) {
 8000648:	7dfb      	ldrb	r3, [r7, #23]
 800064a:	3301      	adds	r3, #1
 800064c:	75fb      	strb	r3, [r7, #23]
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	795b      	ldrb	r3, [r3, #5]
 8000652:	7dfa      	ldrb	r2, [r7, #23]
 8000654:	429a      	cmp	r2, r3
 8000656:	d3ec      	bcc.n	8000632 <APP_voidReceiveDataUSB+0x5e>
	}
}
 8000658:	bf00      	nop
 800065a:	bf00      	nop
 800065c:	3718      	adds	r7, #24
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <APP_voidDecimalToHex>:

void APP_voidDecimalToHex(u32 decimal, u8* hex)
{
 8000664:	b490      	push	{r4, r7}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
	u8 h[16] = {'0', '1', '2', '3', '4',
 800066e:	4b13      	ldr	r3, [pc, #76]	; (80006bc <APP_voidDecimalToHex+0x58>)
 8000670:	f107 0408 	add.w	r4, r7, #8
 8000674:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000676:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			'5', '6', '7', '8', '9',
			'A', 'B', 'C', 'D', 'E',
			'F'};
	hex[2] = h[decimal % 16];
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	f003 020f 	and.w	r2, r3, #15
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	3302      	adds	r3, #2
 8000684:	3218      	adds	r2, #24
 8000686:	443a      	add	r2, r7
 8000688:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800068c:	701a      	strb	r2, [r3, #0]
	hex[1] = h[(decimal % 256) / 16];
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	b2db      	uxtb	r3, r3
 8000692:	091a      	lsrs	r2, r3, #4
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	3301      	adds	r3, #1
 8000698:	3218      	adds	r2, #24
 800069a:	443a      	add	r2, r7
 800069c:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80006a0:	701a      	strb	r2, [r3, #0]
	hex[0] = h[decimal / 256];
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	0a1b      	lsrs	r3, r3, #8
 80006a6:	3318      	adds	r3, #24
 80006a8:	443b      	add	r3, r7
 80006aa:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	701a      	strb	r2, [r3, #0]
}
 80006b2:	bf00      	nop
 80006b4:	3718      	adds	r7, #24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc90      	pop	{r4, r7}
 80006ba:	4770      	bx	lr
 80006bc:	0800819c 	.word	0x0800819c

080006c0 <APP_u32StringToHex>:


u32 APP_u32StringToHex(u8 *A_u8str)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	u32 hex = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
	for(u8 i = 0; i<3; i++)
 80006cc:	2300      	movs	r3, #0
 80006ce:	72fb      	strb	r3, [r7, #11]
 80006d0:	e02d      	b.n	800072e <APP_u32StringToHex+0x6e>
	{
		if(A_u8str[i]>='0' && A_u8str[i]<= '9')
 80006d2:	7afb      	ldrb	r3, [r7, #11]
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	4413      	add	r3, r2
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b2f      	cmp	r3, #47	; 0x2f
 80006dc:	d90f      	bls.n	80006fe <APP_u32StringToHex+0x3e>
 80006de:	7afb      	ldrb	r3, [r7, #11]
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	4413      	add	r3, r2
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b39      	cmp	r3, #57	; 0x39
 80006e8:	d809      	bhi.n	80006fe <APP_u32StringToHex+0x3e>
		{
			hex = hex *16 +  (A_u8str[i]-'0');
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	011b      	lsls	r3, r3, #4
 80006ee:	7afa      	ldrb	r2, [r7, #11]
 80006f0:	6879      	ldr	r1, [r7, #4]
 80006f2:	440a      	add	r2, r1
 80006f4:	7812      	ldrb	r2, [r2, #0]
 80006f6:	4413      	add	r3, r2
 80006f8:	3b30      	subs	r3, #48	; 0x30
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	e014      	b.n	8000728 <APP_u32StringToHex+0x68>
		}else if(A_u8str[i]>='A' && A_u8str[i]<= 'F')
 80006fe:	7afb      	ldrb	r3, [r7, #11]
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	4413      	add	r3, r2
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b40      	cmp	r3, #64	; 0x40
 8000708:	d90e      	bls.n	8000728 <APP_u32StringToHex+0x68>
 800070a:	7afb      	ldrb	r3, [r7, #11]
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	4413      	add	r3, r2
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b46      	cmp	r3, #70	; 0x46
 8000714:	d808      	bhi.n	8000728 <APP_u32StringToHex+0x68>
		{
			hex = hex *16 +  (A_u8str[i]-'A' + 10);
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	011b      	lsls	r3, r3, #4
 800071a:	7afa      	ldrb	r2, [r7, #11]
 800071c:	6879      	ldr	r1, [r7, #4]
 800071e:	440a      	add	r2, r1
 8000720:	7812      	ldrb	r2, [r2, #0]
 8000722:	4413      	add	r3, r2
 8000724:	3b37      	subs	r3, #55	; 0x37
 8000726:	60fb      	str	r3, [r7, #12]
	for(u8 i = 0; i<3; i++)
 8000728:	7afb      	ldrb	r3, [r7, #11]
 800072a:	3301      	adds	r3, #1
 800072c:	72fb      	strb	r3, [r7, #11]
 800072e:	7afb      	ldrb	r3, [r7, #11]
 8000730:	2b02      	cmp	r3, #2
 8000732:	d9ce      	bls.n	80006d2 <APP_u32StringToHex+0x12>
		}
	}
	return hex;
 8000734:	68fb      	ldr	r3, [r7, #12]
}
 8000736:	4618      	mov	r0, r3
 8000738:	3714      	adds	r7, #20
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr

08000742 <Error_Handler>:

void Error_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000746:	b672      	cpsid	i
}
 8000748:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_CAN_DEBUG_USING_LED */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800074a:	e7fe      	b.n	800074a <Error_Handler+0x8>

0800074c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000750:	e7fe      	b.n	8000750 <NMI_Handler+0x4>

08000752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000756:	e7fe      	b.n	8000756 <HardFault_Handler+0x4>

08000758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800075c:	e7fe      	b.n	800075c <MemManage_Handler+0x4>

0800075e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000762:	e7fe      	b.n	8000762 <BusFault_Handler+0x4>

08000764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000768:	e7fe      	b.n	8000768 <UsageFault_Handler+0x4>

0800076a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr

08000778 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000798:	f000 f848 	bl	800082c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}

080007a0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80007a4:	4802      	ldr	r0, [pc, #8]	; (80007b0 <USB_LP_IRQHandler+0x10>)
 80007a6:	f000 fa00 	bl	8000baa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000e6c 	.word	0x20000e6c

080007b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <SystemInit+0x20>)
 80007ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007be:	4a05      	ldr	r2, [pc, #20]	; (80007d4 <SystemInit+0x20>)
 80007c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007d8:	480d      	ldr	r0, [pc, #52]	; (8000810 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007da:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80007dc:	f7ff ffea 	bl	80007b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e0:	480c      	ldr	r0, [pc, #48]	; (8000814 <LoopForever+0x6>)
  ldr r1, =_edata
 80007e2:	490d      	ldr	r1, [pc, #52]	; (8000818 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007e4:	4a0d      	ldr	r2, [pc, #52]	; (800081c <LoopForever+0xe>)
  movs r3, #0
 80007e6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80007e8:	e002      	b.n	80007f0 <LoopCopyDataInit>

080007ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ee:	3304      	adds	r3, #4

080007f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f4:	d3f9      	bcc.n	80007ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007f6:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007f8:	4c0a      	ldr	r4, [pc, #40]	; (8000824 <LoopForever+0x16>)
  movs r3, #0
 80007fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007fc:	e001      	b.n	8000802 <LoopFillZerobss>

080007fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000800:	3204      	adds	r2, #4

08000802 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000802:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000804:	d3fb      	bcc.n	80007fe <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000806:	f007 fc8d 	bl	8008124 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800080a:	f7ff fd25 	bl	8000258 <main>

0800080e <LoopForever>:

LoopForever:
    b LoopForever
 800080e:	e7fe      	b.n	800080e <LoopForever>
  ldr   r0, =_estack
 8000810:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000818:	200001a8 	.word	0x200001a8
  ldr r2, =_sidata
 800081c:	080081fc 	.word	0x080081fc
  ldr r2, =_sbss
 8000820:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8000824:	20001368 	.word	0x20001368

08000828 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000828:	e7fe      	b.n	8000828 <ADC1_2_IRQHandler>
	...

0800082c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <HAL_IncTick+0x1c>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4b05      	ldr	r3, [pc, #20]	; (800084c <HAL_IncTick+0x20>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4413      	add	r3, r2
 800083a:	4a03      	ldr	r2, [pc, #12]	; (8000848 <HAL_IncTick+0x1c>)
 800083c:	6013      	str	r3, [r2, #0]
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	200001c4 	.word	0x200001c4
 800084c:	2000002c 	.word	0x2000002c

08000850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  return uwTick;
 8000854:	4b03      	ldr	r3, [pc, #12]	; (8000864 <HAL_GetTick+0x14>)
 8000856:	681b      	ldr	r3, [r3, #0]
}
 8000858:	4618      	mov	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	200001c4 	.word	0x200001c4

08000868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800086c:	4b04      	ldr	r3, [pc, #16]	; (8000880 <__NVIC_GetPriorityGrouping+0x18>)
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	0a1b      	lsrs	r3, r3, #8
 8000872:	f003 0307 	and.w	r3, r3, #7
}
 8000876:	4618      	mov	r0, r3
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800088e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000892:	2b00      	cmp	r3, #0
 8000894:	db0b      	blt.n	80008ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	f003 021f 	and.w	r2, r3, #31
 800089c:	4907      	ldr	r1, [pc, #28]	; (80008bc <__NVIC_EnableIRQ+0x38>)
 800089e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a2:	095b      	lsrs	r3, r3, #5
 80008a4:	2001      	movs	r0, #1
 80008a6:	fa00 f202 	lsl.w	r2, r0, r2
 80008aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000e100 	.word	0xe000e100

080008c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	6039      	str	r1, [r7, #0]
 80008ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	db0a      	blt.n	80008ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	490c      	ldr	r1, [pc, #48]	; (800090c <__NVIC_SetPriority+0x4c>)
 80008da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008de:	0112      	lsls	r2, r2, #4
 80008e0:	b2d2      	uxtb	r2, r2
 80008e2:	440b      	add	r3, r1
 80008e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e8:	e00a      	b.n	8000900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	4908      	ldr	r1, [pc, #32]	; (8000910 <__NVIC_SetPriority+0x50>)
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	f003 030f 	and.w	r3, r3, #15
 80008f6:	3b04      	subs	r3, #4
 80008f8:	0112      	lsls	r2, r2, #4
 80008fa:	b2d2      	uxtb	r2, r2
 80008fc:	440b      	add	r3, r1
 80008fe:	761a      	strb	r2, [r3, #24]
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	e000e100 	.word	0xe000e100
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000914:	b480      	push	{r7}
 8000916:	b089      	sub	sp, #36	; 0x24
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	60b9      	str	r1, [r7, #8]
 800091e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	f003 0307 	and.w	r3, r3, #7
 8000926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	f1c3 0307 	rsb	r3, r3, #7
 800092e:	2b04      	cmp	r3, #4
 8000930:	bf28      	it	cs
 8000932:	2304      	movcs	r3, #4
 8000934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	3304      	adds	r3, #4
 800093a:	2b06      	cmp	r3, #6
 800093c:	d902      	bls.n	8000944 <NVIC_EncodePriority+0x30>
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	3b03      	subs	r3, #3
 8000942:	e000      	b.n	8000946 <NVIC_EncodePriority+0x32>
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000948:	f04f 32ff 	mov.w	r2, #4294967295
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	43da      	mvns	r2, r3
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	401a      	ands	r2, r3
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800095c:	f04f 31ff 	mov.w	r1, #4294967295
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	fa01 f303 	lsl.w	r3, r1, r3
 8000966:	43d9      	mvns	r1, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800096c:	4313      	orrs	r3, r2
         );
}
 800096e:	4618      	mov	r0, r3
 8000970:	3724      	adds	r7, #36	; 0x24
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b086      	sub	sp, #24
 800097e:	af00      	add	r7, sp, #0
 8000980:	4603      	mov	r3, r0
 8000982:	60b9      	str	r1, [r7, #8]
 8000984:	607a      	str	r2, [r7, #4]
 8000986:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000988:	f7ff ff6e 	bl	8000868 <__NVIC_GetPriorityGrouping>
 800098c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	68b9      	ldr	r1, [r7, #8]
 8000992:	6978      	ldr	r0, [r7, #20]
 8000994:	f7ff ffbe 	bl	8000914 <NVIC_EncodePriority>
 8000998:	4602      	mov	r2, r0
 800099a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800099e:	4611      	mov	r1, r2
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff ff8d 	bl	80008c0 <__NVIC_SetPriority>
}
 80009a6:	bf00      	nop
 80009a8:	3718      	adds	r7, #24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b082      	sub	sp, #8
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	4603      	mov	r3, r0
 80009b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff ff61 	bl	8000884 <__NVIC_EnableIRQ>
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b084      	sub	sp, #16
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d101      	bne.n	80009dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80009d8:	2301      	movs	r3, #1
 80009da:	e0c0      	b.n	8000b5e <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d106      	bne.n	80009f6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2200      	movs	r2, #0
 80009ec:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f007 f891 	bl	8007b18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2203      	movs	r2, #3
 80009fa:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 ff1d 	bl	8002842 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a08:	2300      	movs	r3, #0
 8000a0a:	73fb      	strb	r3, [r7, #15]
 8000a0c:	e03e      	b.n	8000a8c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000a0e:	7bfa      	ldrb	r2, [r7, #15]
 8000a10:	6879      	ldr	r1, [r7, #4]
 8000a12:	4613      	mov	r3, r2
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	4413      	add	r3, r2
 8000a18:	00db      	lsls	r3, r3, #3
 8000a1a:	440b      	add	r3, r1
 8000a1c:	3311      	adds	r3, #17
 8000a1e:	2201      	movs	r2, #1
 8000a20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000a22:	7bfa      	ldrb	r2, [r7, #15]
 8000a24:	6879      	ldr	r1, [r7, #4]
 8000a26:	4613      	mov	r3, r2
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	4413      	add	r3, r2
 8000a2c:	00db      	lsls	r3, r3, #3
 8000a2e:	440b      	add	r3, r1
 8000a30:	3310      	adds	r3, #16
 8000a32:	7bfa      	ldrb	r2, [r7, #15]
 8000a34:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000a36:	7bfa      	ldrb	r2, [r7, #15]
 8000a38:	6879      	ldr	r1, [r7, #4]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	4413      	add	r3, r2
 8000a40:	00db      	lsls	r3, r3, #3
 8000a42:	440b      	add	r3, r1
 8000a44:	3313      	adds	r3, #19
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000a4a:	7bfa      	ldrb	r2, [r7, #15]
 8000a4c:	6879      	ldr	r1, [r7, #4]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	4413      	add	r3, r2
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	440b      	add	r3, r1
 8000a58:	3320      	adds	r3, #32
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000a5e:	7bfa      	ldrb	r2, [r7, #15]
 8000a60:	6879      	ldr	r1, [r7, #4]
 8000a62:	4613      	mov	r3, r2
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	4413      	add	r3, r2
 8000a68:	00db      	lsls	r3, r3, #3
 8000a6a:	440b      	add	r3, r1
 8000a6c:	3324      	adds	r3, #36	; 0x24
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000a72:	7bfb      	ldrb	r3, [r7, #15]
 8000a74:	6879      	ldr	r1, [r7, #4]
 8000a76:	1c5a      	adds	r2, r3, #1
 8000a78:	4613      	mov	r3, r2
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	4413      	add	r3, r2
 8000a7e:	00db      	lsls	r3, r3, #3
 8000a80:	440b      	add	r3, r1
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	73fb      	strb	r3, [r7, #15]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	791b      	ldrb	r3, [r3, #4]
 8000a90:	7bfa      	ldrb	r2, [r7, #15]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d3bb      	bcc.n	8000a0e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000a96:	2300      	movs	r3, #0
 8000a98:	73fb      	strb	r3, [r7, #15]
 8000a9a:	e044      	b.n	8000b26 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000a9c:	7bfa      	ldrb	r2, [r7, #15]
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	4413      	add	r3, r2
 8000aa6:	00db      	lsls	r3, r3, #3
 8000aa8:	440b      	add	r3, r1
 8000aaa:	f203 1351 	addw	r3, r3, #337	; 0x151
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000ab2:	7bfa      	ldrb	r2, [r7, #15]
 8000ab4:	6879      	ldr	r1, [r7, #4]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	4413      	add	r3, r2
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	440b      	add	r3, r1
 8000ac0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000ac4:	7bfa      	ldrb	r2, [r7, #15]
 8000ac6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000ac8:	7bfa      	ldrb	r2, [r7, #15]
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	4613      	mov	r3, r2
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	4413      	add	r3, r2
 8000ad2:	00db      	lsls	r3, r3, #3
 8000ad4:	440b      	add	r3, r1
 8000ad6:	f203 1353 	addw	r3, r3, #339	; 0x153
 8000ada:	2200      	movs	r2, #0
 8000adc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000ade:	7bfa      	ldrb	r2, [r7, #15]
 8000ae0:	6879      	ldr	r1, [r7, #4]
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	4413      	add	r3, r2
 8000ae8:	00db      	lsls	r3, r3, #3
 8000aea:	440b      	add	r3, r1
 8000aec:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000af4:	7bfa      	ldrb	r2, [r7, #15]
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	4613      	mov	r3, r2
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	4413      	add	r3, r2
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	440b      	add	r3, r1
 8000b02:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000b0a:	7bfa      	ldrb	r2, [r7, #15]
 8000b0c:	6879      	ldr	r1, [r7, #4]
 8000b0e:	4613      	mov	r3, r2
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	4413      	add	r3, r2
 8000b14:	00db      	lsls	r3, r3, #3
 8000b16:	440b      	add	r3, r1
 8000b18:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
 8000b22:	3301      	adds	r3, #1
 8000b24:	73fb      	strb	r3, [r7, #15]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	791b      	ldrb	r3, [r3, #4]
 8000b2a:	7bfa      	ldrb	r2, [r7, #15]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d3b5      	bcc.n	8000a9c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6818      	ldr	r0, [r3, #0]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3304      	adds	r3, #4
 8000b38:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000b3c:	f001 fe9c 	bl	8002878 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2200      	movs	r2, #0
 8000b44:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	7a9b      	ldrb	r3, [r3, #10]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d102      	bne.n	8000b5c <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f001 fc41 	bl	80023de <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b082      	sub	sp, #8
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d101      	bne.n	8000b7c <HAL_PCD_Start+0x16>
 8000b78:	2302      	movs	r3, #2
 8000b7a:	e012      	b.n	8000ba2 <HAL_PCD_Start+0x3c>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2201      	movs	r2, #1
 8000b80:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f001 fe43 	bl	8002814 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f004 f903 	bl	8004d9e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b084      	sub	sp, #16
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f004 f908 	bl	8004dcc <USB_ReadInterrupts>
 8000bbc:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d003      	beq.n	8000bd0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f000 fb04 	bl	80011d6 <PCD_EP_ISR_Handler>

    return;
 8000bce:	e110      	b.n	8000df2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d013      	beq.n	8000c02 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000bec:	b292      	uxth	r2, r2
 8000bee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f007 f821 	bl	8007c3a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f000 f8fc 	bl	8000df8 <HAL_PCD_SetAddress>

    return;
 8000c00:	e0f7      	b.n	8000df2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d00c      	beq.n	8000c26 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000c1e:	b292      	uxth	r2, r2
 8000c20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000c24:	e0e5      	b.n	8000df2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d00c      	beq.n	8000c4a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000c42:	b292      	uxth	r2, r2
 8000c44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000c48:	e0d3      	b.n	8000df2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d034      	beq.n	8000cbe <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f022 0204 	bic.w	r2, r2, #4
 8000c66:	b292      	uxth	r2, r2
 8000c68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f022 0208 	bic.w	r2, r2, #8
 8000c7e:	b292      	uxth	r2, r2
 8000c80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d107      	bne.n	8000c9e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2200      	movs	r2, #0
 8000c92:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000c96:	2100      	movs	r1, #0
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f007 f9c1 	bl	8008020 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f007 f804 	bl	8007cac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000cb6:	b292      	uxth	r2, r2
 8000cb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000cbc:	e099      	b.n	8000df2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d027      	beq.n	8000d18 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f042 0208 	orr.w	r2, r2, #8
 8000cda:	b292      	uxth	r2, r2
 8000cdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000cf2:	b292      	uxth	r2, r2
 8000cf4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f042 0204 	orr.w	r2, r2, #4
 8000d0a:	b292      	uxth	r2, r2
 8000d0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	f006 ffb1 	bl	8007c78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000d16:	e06c      	b.n	8000df2 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d040      	beq.n	8000da4 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d2a:	b29a      	uxth	r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d34:	b292      	uxth	r2, r2
 8000d36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d12b      	bne.n	8000d9c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f042 0204 	orr.w	r2, r2, #4
 8000d56:	b292      	uxth	r2, r2
 8000d58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f042 0208 	orr.w	r2, r2, #8
 8000d6e:	b292      	uxth	r2, r2
 8000d70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2201      	movs	r2, #1
 8000d78:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	089b      	lsrs	r3, r3, #2
 8000d88:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000d92:	2101      	movs	r1, #1
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f007 f943 	bl	8008020 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8000d9a:	e02a      	b.n	8000df2 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f006 ff6b 	bl	8007c78 <HAL_PCD_SuspendCallback>
    return;
 8000da2:	e026      	b.n	8000df2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d00f      	beq.n	8000dce <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000dc0:	b292      	uxth	r2, r2
 8000dc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f006 ff29 	bl	8007c1e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000dcc:	e011      	b.n	8000df2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d00c      	beq.n	8000df2 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000dea:	b292      	uxth	r2, r2
 8000dec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000df0:	bf00      	nop
  }
}
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	460b      	mov	r3, r1
 8000e02:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d101      	bne.n	8000e12 <HAL_PCD_SetAddress+0x1a>
 8000e0e:	2302      	movs	r3, #2
 8000e10:	e012      	b.n	8000e38 <HAL_PCD_SetAddress+0x40>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2201      	movs	r2, #1
 8000e16:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	78fa      	ldrb	r2, [r7, #3]
 8000e1e:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	78fa      	ldrb	r2, [r7, #3]
 8000e26:	4611      	mov	r1, r2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f003 ffa4 	bl	8004d76 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2200      	movs	r2, #0
 8000e32:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8000e36:	2300      	movs	r3, #0
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	4608      	mov	r0, r1
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	4603      	mov	r3, r0
 8000e50:	70fb      	strb	r3, [r7, #3]
 8000e52:	460b      	mov	r3, r1
 8000e54:	803b      	strh	r3, [r7, #0]
 8000e56:	4613      	mov	r3, r2
 8000e58:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000e5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	da0e      	bge.n	8000e84 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000e66:	78fb      	ldrb	r3, [r7, #3]
 8000e68:	f003 0207 	and.w	r2, r3, #7
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	4413      	add	r3, r2
 8000e72:	00db      	lsls	r3, r3, #3
 8000e74:	3310      	adds	r3, #16
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2201      	movs	r2, #1
 8000e80:	705a      	strb	r2, [r3, #1]
 8000e82:	e00e      	b.n	8000ea2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000e84:	78fb      	ldrb	r3, [r7, #3]
 8000e86:	f003 0207 	and.w	r2, r3, #7
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	4413      	add	r3, r2
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000ea2:	78fb      	ldrb	r3, [r7, #3]
 8000ea4:	f003 0307 	and.w	r3, r3, #7
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000eae:	883a      	ldrh	r2, [r7, #0]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	78ba      	ldrb	r2, [r7, #2]
 8000eb8:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000eba:	78bb      	ldrb	r3, [r7, #2]
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d102      	bne.n	8000ec6 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d101      	bne.n	8000ed4 <HAL_PCD_EP_Open+0x94>
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	e00e      	b.n	8000ef2 <HAL_PCD_EP_Open+0xb2>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	68f9      	ldr	r1, [r7, #12]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f001 fce6 	bl	80028b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8000ef0:	7afb      	ldrb	r3, [r7, #11]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b084      	sub	sp, #16
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
 8000f02:	460b      	mov	r3, r1
 8000f04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000f06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	da0e      	bge.n	8000f2c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f0e:	78fb      	ldrb	r3, [r7, #3]
 8000f10:	f003 0207 	and.w	r2, r3, #7
 8000f14:	4613      	mov	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	3310      	adds	r3, #16
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2201      	movs	r2, #1
 8000f28:	705a      	strb	r2, [r3, #1]
 8000f2a:	e00e      	b.n	8000f4a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f2c:	78fb      	ldrb	r3, [r7, #3]
 8000f2e:	f003 0207 	and.w	r2, r3, #7
 8000f32:	4613      	mov	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4413      	add	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2200      	movs	r2, #0
 8000f48:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f4a:	78fb      	ldrb	r3, [r7, #3]
 8000f4c:	f003 0307 	and.w	r3, r3, #7
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d101      	bne.n	8000f64 <HAL_PCD_EP_Close+0x6a>
 8000f60:	2302      	movs	r3, #2
 8000f62:	e00e      	b.n	8000f82 <HAL_PCD_EP_Close+0x88>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2201      	movs	r2, #1
 8000f68:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	68f9      	ldr	r1, [r7, #12]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f002 f862 	bl	800303c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b086      	sub	sp, #24
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	60f8      	str	r0, [r7, #12]
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	603b      	str	r3, [r7, #0]
 8000f96:	460b      	mov	r3, r1
 8000f98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000f9a:	7afb      	ldrb	r3, [r7, #11]
 8000f9c:	f003 0207 	and.w	r2, r3, #7
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	00db      	lsls	r3, r3, #3
 8000fa8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000fac:	68fa      	ldr	r2, [r7, #12]
 8000fae:	4413      	add	r3, r2
 8000fb0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	683a      	ldr	r2, [r7, #0]
 8000fbc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000fca:	7afb      	ldrb	r3, [r7, #11]
 8000fcc:	f003 0307 	and.w	r3, r3, #7
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6979      	ldr	r1, [r7, #20]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f002 fa1a 	bl	8003416 <USB_EPStartXfer>

  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8000ff8:	78fb      	ldrb	r3, [r7, #3]
 8000ffa:	f003 0207 	and.w	r2, r3, #7
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	4613      	mov	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4413      	add	r3, r2
 8001006:	00db      	lsls	r3, r3, #3
 8001008:	440b      	add	r3, r1
 800100a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800100e:	681b      	ldr	r3, [r3, #0]
}
 8001010:	4618      	mov	r0, r3
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	607a      	str	r2, [r7, #4]
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	460b      	mov	r3, r1
 800102a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800102c:	7afb      	ldrb	r3, [r7, #11]
 800102e:	f003 0207 	and.w	r2, r3, #7
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	3310      	adds	r3, #16
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	2201      	movs	r2, #1
 8001052:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	2200      	movs	r2, #0
 8001060:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	2201      	movs	r2, #1
 8001066:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001068:	7afb      	ldrb	r3, [r7, #11]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	b2da      	uxtb	r2, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6979      	ldr	r1, [r7, #20]
 800107a:	4618      	mov	r0, r3
 800107c:	f002 f9cb 	bl	8003416 <USB_EPStartXfer>

  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
 8001092:	460b      	mov	r3, r1
 8001094:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001096:	78fb      	ldrb	r3, [r7, #3]
 8001098:	f003 0307 	and.w	r3, r3, #7
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	7912      	ldrb	r2, [r2, #4]
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d901      	bls.n	80010a8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e03e      	b.n	8001126 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80010a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	da0e      	bge.n	80010ce <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	f003 0207 	and.w	r2, r3, #7
 80010b6:	4613      	mov	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	3310      	adds	r3, #16
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	4413      	add	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2201      	movs	r2, #1
 80010ca:	705a      	strb	r2, [r3, #1]
 80010cc:	e00c      	b.n	80010e8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80010ce:	78fa      	ldrb	r2, [r7, #3]
 80010d0:	4613      	mov	r3, r2
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	4413      	add	r3, r2
 80010e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2200      	movs	r2, #0
 80010e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2201      	movs	r2, #1
 80010ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80010ee:	78fb      	ldrb	r3, [r7, #3]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001100:	2b01      	cmp	r3, #1
 8001102:	d101      	bne.n	8001108 <HAL_PCD_EP_SetStall+0x7e>
 8001104:	2302      	movs	r3, #2
 8001106:	e00e      	b.n	8001126 <HAL_PCD_EP_SetStall+0x9c>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2201      	movs	r2, #1
 800110c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	68f9      	ldr	r1, [r7, #12]
 8001116:	4618      	mov	r0, r3
 8001118:	f003 fd2e 	bl	8004b78 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b084      	sub	sp, #16
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	460b      	mov	r3, r1
 8001138:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800113a:	78fb      	ldrb	r3, [r7, #3]
 800113c:	f003 030f 	and.w	r3, r3, #15
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	7912      	ldrb	r2, [r2, #4]
 8001144:	4293      	cmp	r3, r2
 8001146:	d901      	bls.n	800114c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e040      	b.n	80011ce <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800114c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001150:	2b00      	cmp	r3, #0
 8001152:	da0e      	bge.n	8001172 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001154:	78fb      	ldrb	r3, [r7, #3]
 8001156:	f003 0207 	and.w	r2, r3, #7
 800115a:	4613      	mov	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4413      	add	r3, r2
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	3310      	adds	r3, #16
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	4413      	add	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2201      	movs	r2, #1
 800116e:	705a      	strb	r2, [r3, #1]
 8001170:	e00e      	b.n	8001190 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001172:	78fb      	ldrb	r3, [r7, #3]
 8001174:	f003 0207 	and.w	r2, r3, #7
 8001178:	4613      	mov	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	4413      	add	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2200      	movs	r2, #0
 800118e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2200      	movs	r2, #0
 8001194:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001196:	78fb      	ldrb	r3, [r7, #3]
 8001198:	f003 0307 	and.w	r3, r3, #7
 800119c:	b2da      	uxtb	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d101      	bne.n	80011b0 <HAL_PCD_EP_ClrStall+0x82>
 80011ac:	2302      	movs	r3, #2
 80011ae:	e00e      	b.n	80011ce <HAL_PCD_EP_ClrStall+0xa0>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2201      	movs	r2, #1
 80011b4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	68f9      	ldr	r1, [r7, #12]
 80011be:	4618      	mov	r0, r3
 80011c0:	f003 fd2b 	bl	8004c1a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b096      	sub	sp, #88	; 0x58
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80011de:	e3ae      	b.n	800193e <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80011e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80011ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80011fa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f040 8170 	bne.w	80014e4 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001204:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001208:	f003 0310 	and.w	r3, r3, #16
 800120c:	2b00      	cmp	r3, #0
 800120e:	d14d      	bne.n	80012ac <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	b29b      	uxth	r3, r3
 8001218:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800121c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001220:	81fb      	strh	r3, [r7, #14]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	89fb      	ldrh	r3, [r7, #14]
 8001228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800122c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001230:	b29b      	uxth	r3, r3
 8001232:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3310      	adds	r3, #16
 8001238:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001242:	b29b      	uxth	r3, r3
 8001244:	461a      	mov	r2, r3
 8001246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	4413      	add	r3, r2
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	6812      	ldr	r2, [r2, #0]
 8001252:	4413      	add	r3, r2
 8001254:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001258:	881b      	ldrh	r3, [r3, #0]
 800125a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800125e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001260:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001264:	695a      	ldr	r2, [r3, #20]
 8001266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	441a      	add	r2, r3
 800126c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800126e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001270:	2100      	movs	r1, #0
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f006 fcb9 	bl	8007bea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	7b1b      	ldrb	r3, [r3, #12]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 835d 	beq.w	800193e <PCD_EP_ISR_Handler+0x768>
 8001284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	2b00      	cmp	r3, #0
 800128a:	f040 8358 	bne.w	800193e <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	7b1b      	ldrb	r3, [r3, #12]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001298:	b2da      	uxtb	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	b292      	uxth	r2, r2
 80012a0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	731a      	strb	r2, [r3, #12]
 80012aa:	e348      	b.n	800193e <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80012b2:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80012be:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80012c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d032      	beq.n	8001330 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	461a      	mov	r2, r3
 80012d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	4413      	add	r3, r2
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	6812      	ldr	r2, [r2, #0]
 80012e2:	4413      	add	r3, r2
 80012e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80012ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012f0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6818      	ldr	r0, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f503 7126 	add.w	r1, r3, #664	; 0x298
 80012fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012fe:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001300:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001302:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001304:	b29b      	uxth	r3, r3
 8001306:	f003 fdb3 	bl	8004e70 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	b29a      	uxth	r2, r3
 8001312:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001316:	4013      	ands	r3, r2
 8001318:	823b      	strh	r3, [r7, #16]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	8a3a      	ldrh	r2, [r7, #16]
 8001320:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001324:	b292      	uxth	r2, r2
 8001326:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f006 fc31 	bl	8007b90 <HAL_PCD_SetupStageCallback>
 800132e:	e306      	b.n	800193e <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001330:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001334:	2b00      	cmp	r3, #0
 8001336:	f280 8302 	bge.w	800193e <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	b29a      	uxth	r2, r3
 8001342:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001346:	4013      	ands	r3, r2
 8001348:	83fb      	strh	r3, [r7, #30]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	8bfa      	ldrh	r2, [r7, #30]
 8001350:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001354:	b292      	uxth	r2, r2
 8001356:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001360:	b29b      	uxth	r3, r3
 8001362:	461a      	mov	r2, r3
 8001364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	4413      	add	r3, r2
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	6812      	ldr	r2, [r2, #0]
 8001370:	4413      	add	r3, r2
 8001372:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800137c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800137e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001382:	69db      	ldr	r3, [r3, #28]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d019      	beq.n	80013bc <PCD_EP_ISR_Handler+0x1e6>
 8001388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d015      	beq.n	80013bc <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6818      	ldr	r0, [r3, #0]
 8001394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001396:	6959      	ldr	r1, [r3, #20]
 8001398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800139a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800139c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800139e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	f003 fd65 	bl	8004e70 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80013a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013a8:	695a      	ldr	r2, [r3, #20]
 80013aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	441a      	add	r2, r3
 80013b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013b2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80013b4:	2100      	movs	r1, #0
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f006 fbfc 	bl	8007bb4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	881b      	ldrh	r3, [r3, #0]
 80013c2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80013c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80013ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f040 82b5 	bne.w	800193e <PCD_EP_ISR_Handler+0x768>
 80013d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80013d8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80013dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80013e0:	f000 82ad 	beq.w	800193e <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	61bb      	str	r3, [r7, #24]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	461a      	mov	r2, r3
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	4413      	add	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	b29b      	uxth	r3, r3
 800140a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800140e:	b29a      	uxth	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	801a      	strh	r2, [r3, #0]
 8001414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	2b3e      	cmp	r3, #62	; 0x3e
 800141a:	d91d      	bls.n	8001458 <PCD_EP_ISR_Handler+0x282>
 800141c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	095b      	lsrs	r3, r3, #5
 8001422:	647b      	str	r3, [r7, #68]	; 0x44
 8001424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	f003 031f 	and.w	r3, r3, #31
 800142c:	2b00      	cmp	r3, #0
 800142e:	d102      	bne.n	8001436 <PCD_EP_ISR_Handler+0x260>
 8001430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001432:	3b01      	subs	r3, #1
 8001434:	647b      	str	r3, [r7, #68]	; 0x44
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	b29a      	uxth	r2, r3
 800143c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800143e:	b29b      	uxth	r3, r3
 8001440:	029b      	lsls	r3, r3, #10
 8001442:	b29b      	uxth	r3, r3
 8001444:	4313      	orrs	r3, r2
 8001446:	b29b      	uxth	r3, r3
 8001448:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800144c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001450:	b29a      	uxth	r2, r3
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	801a      	strh	r2, [r3, #0]
 8001456:	e026      	b.n	80014a6 <PCD_EP_ISR_Handler+0x2d0>
 8001458:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d10a      	bne.n	8001476 <PCD_EP_ISR_Handler+0x2a0>
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	b29b      	uxth	r3, r3
 8001466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800146a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800146e:	b29a      	uxth	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	801a      	strh	r2, [r3, #0]
 8001474:	e017      	b.n	80014a6 <PCD_EP_ISR_Handler+0x2d0>
 8001476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001478:	691b      	ldr	r3, [r3, #16]
 800147a:	085b      	lsrs	r3, r3, #1
 800147c:	647b      	str	r3, [r7, #68]	; 0x44
 800147e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d002      	beq.n	8001490 <PCD_EP_ISR_Handler+0x2ba>
 800148a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800148c:	3301      	adds	r3, #1
 800148e:	647b      	str	r3, [r7, #68]	; 0x44
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	b29a      	uxth	r2, r3
 8001496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001498:	b29b      	uxth	r3, r3
 800149a:	029b      	lsls	r3, r3, #10
 800149c:	b29b      	uxth	r3, r3
 800149e:	4313      	orrs	r3, r2
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014b6:	827b      	strh	r3, [r7, #18]
 80014b8:	8a7b      	ldrh	r3, [r7, #18]
 80014ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80014be:	827b      	strh	r3, [r7, #18]
 80014c0:	8a7b      	ldrh	r3, [r7, #18]
 80014c2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80014c6:	827b      	strh	r3, [r7, #18]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	8a7b      	ldrh	r3, [r7, #18]
 80014ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80014d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80014d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014de:	b29b      	uxth	r3, r3
 80014e0:	8013      	strh	r3, [r2, #0]
 80014e2:	e22c      	b.n	800193e <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	4413      	add	r3, r2
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80014f8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f280 80f6 	bge.w	80016ee <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	881b      	ldrh	r3, [r3, #0]
 8001512:	b29a      	uxth	r2, r3
 8001514:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001518:	4013      	ands	r3, r2
 800151a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001530:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001534:	b292      	uxth	r2, r2
 8001536:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001538:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800153c:	4613      	mov	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	4413      	add	r3, r2
 800154c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800154e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001550:	7b1b      	ldrb	r3, [r3, #12]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d123      	bne.n	800159e <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800155e:	b29b      	uxth	r3, r3
 8001560:	461a      	mov	r2, r3
 8001562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	4413      	add	r3, r2
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	6812      	ldr	r2, [r2, #0]
 800156e:	4413      	add	r3, r2
 8001570:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800157a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800157e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 808e 	beq.w	80016a4 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6818      	ldr	r0, [r3, #0]
 800158c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800158e:	6959      	ldr	r1, [r3, #20]
 8001590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001592:	88da      	ldrh	r2, [r3, #6]
 8001594:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001598:	f003 fc6a 	bl	8004e70 <USB_ReadPMA>
 800159c:	e082      	b.n	80016a4 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800159e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015a0:	78db      	ldrb	r3, [r3, #3]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d10a      	bne.n	80015bc <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80015a6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80015aa:	461a      	mov	r2, r3
 80015ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 f9d3 	bl	800195a <HAL_PCD_EP_DB_Receive>
 80015b4:	4603      	mov	r3, r0
 80015b6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80015ba:	e073      	b.n	80016a4 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	461a      	mov	r2, r3
 80015c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80015d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015d6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	461a      	mov	r2, r3
 80015e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	441a      	add	r2, r3
 80015e8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80015ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80015f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80015f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	b29b      	uxth	r3, r3
 8001612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d022      	beq.n	8001660 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001622:	b29b      	uxth	r3, r3
 8001624:	461a      	mov	r2, r3
 8001626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	4413      	add	r3, r2
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	6812      	ldr	r2, [r2, #0]
 8001632:	4413      	add	r3, r2
 8001634:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800163e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001642:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001646:	2b00      	cmp	r3, #0
 8001648:	d02c      	beq.n	80016a4 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6818      	ldr	r0, [r3, #0]
 800164e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001650:	6959      	ldr	r1, [r3, #20]
 8001652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001654:	891a      	ldrh	r2, [r3, #8]
 8001656:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800165a:	f003 fc09 	bl	8004e70 <USB_ReadPMA>
 800165e:	e021      	b.n	80016a4 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001668:	b29b      	uxth	r3, r3
 800166a:	461a      	mov	r2, r3
 800166c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	4413      	add	r3, r2
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	6812      	ldr	r2, [r2, #0]
 8001678:	4413      	add	r3, r2
 800167a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001684:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001688:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800168c:	2b00      	cmp	r3, #0
 800168e:	d009      	beq.n	80016a4 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001696:	6959      	ldr	r1, [r3, #20]
 8001698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800169a:	895a      	ldrh	r2, [r3, #10]
 800169c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80016a0:	f003 fbe6 	bl	8004e70 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80016a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016a6:	69da      	ldr	r2, [r3, #28]
 80016a8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80016ac:	441a      	add	r2, r3
 80016ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016b0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80016b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016b4:	695a      	ldr	r2, [r3, #20]
 80016b6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80016ba:	441a      	add	r2, r3
 80016bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016be:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80016c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d005      	beq.n	80016d4 <PCD_EP_ISR_Handler+0x4fe>
 80016c8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80016cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d206      	bcs.n	80016e2 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80016d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f006 fa6a 	bl	8007bb4 <HAL_PCD_DataOutStageCallback>
 80016e0:	e005      	b.n	80016ee <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80016e8:	4618      	mov	r0, r3
 80016ea:	f001 fe94 	bl	8003416 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80016ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80016f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 8121 	beq.w	800193e <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 80016fc:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001700:	4613      	mov	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	3310      	adds	r3, #16
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	b29b      	uxth	r3, r3
 8001722:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800172a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	461a      	mov	r2, r3
 8001734:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	441a      	add	r2, r3
 800173c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001740:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001744:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001748:	b29b      	uxth	r3, r3
 800174a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800174c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800174e:	78db      	ldrb	r3, [r3, #3]
 8001750:	2b01      	cmp	r3, #1
 8001752:	f040 80a2 	bne.w	800189a <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8001756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800175c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800175e:	7b1b      	ldrb	r3, [r3, #12]
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 8093 	beq.w	800188c <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001766:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800176a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800176e:	2b00      	cmp	r3, #0
 8001770:	d046      	beq.n	8001800 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001774:	785b      	ldrb	r3, [r3, #1]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d126      	bne.n	80017c8 <PCD_EP_ISR_Handler+0x5f2>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001788:	b29b      	uxth	r3, r3
 800178a:	461a      	mov	r2, r3
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178e:	4413      	add	r3, r2
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
 8001792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	00da      	lsls	r2, r3, #3
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	4413      	add	r3, r2
 800179c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80017a0:	623b      	str	r3, [r7, #32]
 80017a2:	6a3b      	ldr	r3, [r7, #32]
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	6a3b      	ldr	r3, [r7, #32]
 80017b0:	801a      	strh	r2, [r3, #0]
 80017b2:	6a3b      	ldr	r3, [r7, #32]
 80017b4:	881b      	ldrh	r3, [r3, #0]
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	6a3b      	ldr	r3, [r7, #32]
 80017c4:	801a      	strh	r2, [r3, #0]
 80017c6:	e061      	b.n	800188c <PCD_EP_ISR_Handler+0x6b6>
 80017c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ca:	785b      	ldrb	r3, [r3, #1]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d15d      	bne.n	800188c <PCD_EP_ISR_Handler+0x6b6>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017de:	b29b      	uxth	r3, r3
 80017e0:	461a      	mov	r2, r3
 80017e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e4:	4413      	add	r3, r2
 80017e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	00da      	lsls	r2, r3, #3
 80017ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f0:	4413      	add	r3, r2
 80017f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80017f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80017f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017fa:	2200      	movs	r2, #0
 80017fc:	801a      	strh	r2, [r3, #0]
 80017fe:	e045      	b.n	800188c <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001808:	785b      	ldrb	r3, [r3, #1]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d126      	bne.n	800185c <PCD_EP_ISR_Handler+0x686>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	637b      	str	r3, [r7, #52]	; 0x34
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800181c:	b29b      	uxth	r3, r3
 800181e:	461a      	mov	r2, r3
 8001820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001822:	4413      	add	r3, r2
 8001824:	637b      	str	r3, [r7, #52]	; 0x34
 8001826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	00da      	lsls	r2, r3, #3
 800182c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800182e:	4413      	add	r3, r2
 8001830:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001834:	633b      	str	r3, [r7, #48]	; 0x30
 8001836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	b29b      	uxth	r3, r3
 800183c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001840:	b29a      	uxth	r2, r3
 8001842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001844:	801a      	strh	r2, [r3, #0]
 8001846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	b29b      	uxth	r3, r3
 800184c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001850:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001854:	b29a      	uxth	r2, r3
 8001856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001858:	801a      	strh	r2, [r3, #0]
 800185a:	e017      	b.n	800188c <PCD_EP_ISR_Handler+0x6b6>
 800185c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800185e:	785b      	ldrb	r3, [r3, #1]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d113      	bne.n	800188c <PCD_EP_ISR_Handler+0x6b6>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800186c:	b29b      	uxth	r3, r3
 800186e:	461a      	mov	r2, r3
 8001870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001872:	4413      	add	r3, r2
 8001874:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	00da      	lsls	r2, r3, #3
 800187c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800187e:	4413      	add	r3, r2
 8001880:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001884:	63bb      	str	r3, [r7, #56]	; 0x38
 8001886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001888:	2200      	movs	r2, #0
 800188a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800188c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4619      	mov	r1, r3
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f006 f9a9 	bl	8007bea <HAL_PCD_DataInStageCallback>
 8001898:	e051      	b.n	800193e <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800189a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800189e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d144      	bne.n	8001930 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	461a      	mov	r2, r3
 80018b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	4413      	add	r3, r2
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6812      	ldr	r2, [r2, #0]
 80018be:	4413      	add	r3, r2
 80018c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80018ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018d0:	699a      	ldr	r2, [r3, #24]
 80018d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d907      	bls.n	80018ea <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 80018da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018dc:	699a      	ldr	r2, [r3, #24]
 80018de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80018e2:	1ad2      	subs	r2, r2, r3
 80018e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018e6:	619a      	str	r2, [r3, #24]
 80018e8:	e002      	b.n	80018f0 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 80018ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80018f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d106      	bne.n	8001906 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80018f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	4619      	mov	r1, r3
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f006 f973 	bl	8007bea <HAL_PCD_DataInStageCallback>
 8001904:	e01b      	b.n	800193e <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001908:	695a      	ldr	r2, [r3, #20]
 800190a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800190e:	441a      	add	r2, r3
 8001910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001912:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001916:	69da      	ldr	r2, [r3, #28]
 8001918:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800191c:	441a      	add	r2, r3
 800191e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001920:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001928:	4618      	mov	r0, r3
 800192a:	f001 fd74 	bl	8003416 <USB_EPStartXfer>
 800192e:	e006      	b.n	800193e <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001930:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001934:	461a      	mov	r2, r3
 8001936:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 f917 	bl	8001b6c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001946:	b29b      	uxth	r3, r3
 8001948:	b21b      	sxth	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	f6ff ac48 	blt.w	80011e0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3758      	adds	r7, #88	; 0x58
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b088      	sub	sp, #32
 800195e:	af00      	add	r7, sp, #0
 8001960:	60f8      	str	r0, [r7, #12]
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	4613      	mov	r3, r2
 8001966:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d07c      	beq.n	8001a6c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800197a:	b29b      	uxth	r3, r3
 800197c:	461a      	mov	r2, r3
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	4413      	add	r3, r2
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	6812      	ldr	r2, [r2, #0]
 800198a:	4413      	add	r3, r2
 800198c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001996:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	699a      	ldr	r2, [r3, #24]
 800199c:	8b7b      	ldrh	r3, [r7, #26]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d306      	bcc.n	80019b0 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	699a      	ldr	r2, [r3, #24]
 80019a6:	8b7b      	ldrh	r3, [r7, #26]
 80019a8:	1ad2      	subs	r2, r2, r3
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	619a      	str	r2, [r3, #24]
 80019ae:	e002      	b.n	80019b6 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	2200      	movs	r2, #0
 80019b4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d123      	bne.n	8001a06 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	461a      	mov	r2, r3
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019d8:	833b      	strh	r3, [r7, #24]
 80019da:	8b3b      	ldrh	r3, [r7, #24]
 80019dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80019e0:	833b      	strh	r3, [r7, #24]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	461a      	mov	r2, r3
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	441a      	add	r2, r3
 80019f0:	8b3b      	ldrh	r3, [r7, #24]
 80019f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80019f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80019fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d01f      	beq.n	8001a50 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a2a:	82fb      	strh	r3, [r7, #22]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	441a      	add	r2, r3
 8001a3a:	8afb      	ldrh	r3, [r7, #22]
 8001a3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001a50:	8b7b      	ldrh	r3, [r7, #26]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 8085 	beq.w	8001b62 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6818      	ldr	r0, [r3, #0]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	6959      	ldr	r1, [r3, #20]
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	891a      	ldrh	r2, [r3, #8]
 8001a64:	8b7b      	ldrh	r3, [r7, #26]
 8001a66:	f003 fa03 	bl	8004e70 <USB_ReadPMA>
 8001a6a:	e07a      	b.n	8001b62 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	4413      	add	r3, r2
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	6812      	ldr	r2, [r2, #0]
 8001a84:	4413      	add	r3, r2
 8001a86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a90:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	699a      	ldr	r2, [r3, #24]
 8001a96:	8b7b      	ldrh	r3, [r7, #26]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d306      	bcc.n	8001aaa <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	699a      	ldr	r2, [r3, #24]
 8001aa0:	8b7b      	ldrh	r3, [r7, #26]
 8001aa2:	1ad2      	subs	r2, r2, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	619a      	str	r2, [r3, #24]
 8001aa8:	e002      	b.n	8001ab0 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	2200      	movs	r2, #0
 8001aae:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d123      	bne.n	8001b00 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	461a      	mov	r2, r3
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ad2:	83fb      	strh	r3, [r7, #30]
 8001ad4:	8bfb      	ldrh	r3, [r7, #30]
 8001ad6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ada:	83fb      	strh	r3, [r7, #30]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	441a      	add	r2, r3
 8001aea:	8bfb      	ldrh	r3, [r7, #30]
 8001aec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001af0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001af4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001b00:	88fb      	ldrh	r3, [r7, #6]
 8001b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d11f      	bne.n	8001b4a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b24:	83bb      	strh	r3, [r7, #28]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	441a      	add	r2, r3
 8001b34:	8bbb      	ldrh	r3, [r7, #28]
 8001b36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001b4a:	8b7b      	ldrh	r3, [r7, #26]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d008      	beq.n	8001b62 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6818      	ldr	r0, [r3, #0]
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	6959      	ldr	r1, [r3, #20]
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	895a      	ldrh	r2, [r3, #10]
 8001b5c:	8b7b      	ldrh	r3, [r7, #26]
 8001b5e:	f003 f987 	bl	8004e70 <USB_ReadPMA>
    }
  }

  return count;
 8001b62:	8b7b      	ldrh	r3, [r7, #26]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3720      	adds	r7, #32
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b0a4      	sub	sp, #144	; 0x90
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	4613      	mov	r3, r2
 8001b78:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001b7a:	88fb      	ldrh	r3, [r7, #6]
 8001b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 81db 	beq.w	8001f3c <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	461a      	mov	r2, r3
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	4413      	add	r3, r2
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	6812      	ldr	r2, [r2, #0]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001baa:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	699a      	ldr	r2, [r3, #24]
 8001bb2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d907      	bls.n	8001bca <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	699a      	ldr	r2, [r3, #24]
 8001bbe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001bc2:	1ad2      	subs	r2, r2, r3
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	619a      	str	r2, [r3, #24]
 8001bc8:	e002      	b.n	8001bd0 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f040 80b9 	bne.w	8001d4c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	785b      	ldrb	r3, [r3, #1]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d126      	bne.n	8001c30 <HAL_PCD_EP_DB_Transmit+0xc4>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf6:	4413      	add	r3, r2
 8001bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	00da      	lsls	r2, r3, #3
 8001c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c02:	4413      	add	r3, r2
 8001c04:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001c08:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c18:	801a      	strh	r2, [r3, #0]
 8001c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2c:	801a      	strh	r2, [r3, #0]
 8001c2e:	e01a      	b.n	8001c66 <HAL_PCD_EP_DB_Transmit+0xfa>
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	785b      	ldrb	r3, [r3, #1]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d116      	bne.n	8001c66 <HAL_PCD_EP_DB_Transmit+0xfa>
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	461a      	mov	r2, r3
 8001c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c4c:	4413      	add	r3, r2
 8001c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	00da      	lsls	r2, r3, #3
 8001c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c58:	4413      	add	r3, r2
 8001c5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001c5e:	633b      	str	r3, [r7, #48]	; 0x30
 8001c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c62:	2200      	movs	r2, #0
 8001c64:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	785b      	ldrb	r3, [r3, #1]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d126      	bne.n	8001cc2 <HAL_PCD_EP_DB_Transmit+0x156>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	61fb      	str	r3, [r7, #28]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	461a      	mov	r2, r3
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	4413      	add	r3, r2
 8001c8a:	61fb      	str	r3, [r7, #28]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	00da      	lsls	r2, r3, #3
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	4413      	add	r3, r2
 8001c96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c9a:	61bb      	str	r3, [r7, #24]
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	801a      	strh	r2, [r3, #0]
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	801a      	strh	r2, [r3, #0]
 8001cc0:	e017      	b.n	8001cf2 <HAL_PCD_EP_DB_Transmit+0x186>
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	785b      	ldrb	r3, [r3, #1]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d113      	bne.n	8001cf2 <HAL_PCD_EP_DB_Transmit+0x186>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	4413      	add	r3, r2
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	00da      	lsls	r2, r3, #3
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	4413      	add	r3, r2
 8001ce6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001cea:	623b      	str	r3, [r7, #32]
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	f005 ff76 	bl	8007bea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001cfe:	88fb      	ldrh	r3, [r7, #6]
 8001d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 82fa 	beq.w	80022fe <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d24:	82fb      	strh	r3, [r7, #22]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	441a      	add	r2, r3
 8001d34:	8afb      	ldrh	r3, [r7, #22]
 8001d36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	8013      	strh	r3, [r2, #0]
 8001d4a:	e2d8      	b.n	80022fe <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001d4c:	88fb      	ldrh	r3, [r7, #6]
 8001d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d021      	beq.n	8001d9a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d70:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	441a      	add	r2, r3
 8001d82:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8001d86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	f040 82ac 	bne.w	80022fe <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	695a      	ldr	r2, [r3, #20]
 8001daa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001dae:	441a      	add	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	69da      	ldr	r2, [r3, #28]
 8001db8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001dbc:	441a      	add	r2, r3
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	6a1a      	ldr	r2, [r3, #32]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d30b      	bcc.n	8001de6 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	6a1a      	ldr	r2, [r3, #32]
 8001dda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dde:	1ad2      	subs	r2, r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	621a      	str	r2, [r3, #32]
 8001de4:	e017      	b.n	8001e16 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d108      	bne.n	8001e00 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8001dee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001df2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001dfe:	e00a      	b.n	8001e16 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	2200      	movs	r2, #0
 8001e14:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	785b      	ldrb	r3, [r3, #1]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d165      	bne.n	8001eea <HAL_PCD_EP_DB_Transmit+0x37e>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	461a      	mov	r2, r3
 8001e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e32:	4413      	add	r3, r2
 8001e34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	00da      	lsls	r2, r3, #3
 8001e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e3e:	4413      	add	r3, r2
 8001e40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e44:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e54:	801a      	strh	r2, [r3, #0]
 8001e56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e5a:	2b3e      	cmp	r3, #62	; 0x3e
 8001e5c:	d91d      	bls.n	8001e9a <HAL_PCD_EP_DB_Transmit+0x32e>
 8001e5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e62:	095b      	lsrs	r3, r3, #5
 8001e64:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e6a:	f003 031f 	and.w	r3, r3, #31
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d102      	bne.n	8001e78 <HAL_PCD_EP_DB_Transmit+0x30c>
 8001e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e74:	3b01      	subs	r3, #1
 8001e76:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	029b      	lsls	r3, r3, #10
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	4313      	orrs	r3, r2
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e96:	801a      	strh	r2, [r3, #0]
 8001e98:	e044      	b.n	8001f24 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8001e9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10a      	bne.n	8001eb8 <HAL_PCD_EP_DB_Transmit+0x34c>
 8001ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eb4:	801a      	strh	r2, [r3, #0]
 8001eb6:	e035      	b.n	8001f24 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8001eb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ebc:	085b      	lsrs	r3, r3, #1
 8001ebe:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ec0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d002      	beq.n	8001ed2 <HAL_PCD_EP_DB_Transmit+0x366>
 8001ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ece:	3301      	adds	r3, #1
 8001ed0:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	029b      	lsls	r3, r3, #10
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ee6:	801a      	strh	r2, [r3, #0]
 8001ee8:	e01c      	b.n	8001f24 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	785b      	ldrb	r3, [r3, #1]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d118      	bne.n	8001f24 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	647b      	str	r3, [r7, #68]	; 0x44
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	461a      	mov	r2, r3
 8001f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f06:	4413      	add	r3, r2
 8001f08:	647b      	str	r3, [r7, #68]	; 0x44
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	00da      	lsls	r2, r3, #3
 8001f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f12:	4413      	add	r3, r2
 8001f14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001f18:	643b      	str	r3, [r7, #64]	; 0x40
 8001f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f22:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6818      	ldr	r0, [r3, #0]
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	6959      	ldr	r1, [r3, #20]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	891a      	ldrh	r2, [r3, #8]
 8001f30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	f002 ff59 	bl	8004dec <USB_WritePMA>
 8001f3a:	e1e0      	b.n	80022fe <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	461a      	mov	r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4413      	add	r3, r2
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	4413      	add	r3, r2
 8001f56:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f60:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	699a      	ldr	r2, [r3, #24]
 8001f68:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d307      	bcc.n	8001f80 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	699a      	ldr	r2, [r3, #24]
 8001f74:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001f78:	1ad2      	subs	r2, r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	619a      	str	r2, [r3, #24]
 8001f7e:	e002      	b.n	8001f86 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2200      	movs	r2, #0
 8001f84:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f040 80c0 	bne.w	8002110 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	785b      	ldrb	r3, [r3, #1]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d126      	bne.n	8001fe6 <HAL_PCD_EP_DB_Transmit+0x47a>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	461a      	mov	r2, r3
 8001faa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fac:	4413      	add	r3, r2
 8001fae:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	00da      	lsls	r2, r3, #3
 8001fb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fb8:	4413      	add	r3, r2
 8001fba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001fbe:	67bb      	str	r3, [r7, #120]	; 0x78
 8001fc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fc2:	881b      	ldrh	r3, [r3, #0]
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fce:	801a      	strh	r2, [r3, #0]
 8001fd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fe2:	801a      	strh	r2, [r3, #0]
 8001fe4:	e01a      	b.n	800201c <HAL_PCD_EP_DB_Transmit+0x4b0>
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	785b      	ldrb	r3, [r3, #1]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d116      	bne.n	800201c <HAL_PCD_EP_DB_Transmit+0x4b0>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	667b      	str	r3, [r7, #100]	; 0x64
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	461a      	mov	r2, r3
 8002000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002002:	4413      	add	r3, r2
 8002004:	667b      	str	r3, [r7, #100]	; 0x64
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	00da      	lsls	r2, r3, #3
 800200c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800200e:	4413      	add	r3, r2
 8002010:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002014:	663b      	str	r3, [r7, #96]	; 0x60
 8002016:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002018:	2200      	movs	r2, #0
 800201a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	677b      	str	r3, [r7, #116]	; 0x74
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	785b      	ldrb	r3, [r3, #1]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d12b      	bne.n	8002082 <HAL_PCD_EP_DB_Transmit+0x516>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002038:	b29b      	uxth	r3, r3
 800203a:	461a      	mov	r2, r3
 800203c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800203e:	4413      	add	r3, r2
 8002040:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	00da      	lsls	r2, r3, #3
 8002048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800204a:	4413      	add	r3, r2
 800204c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002050:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002054:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	b29b      	uxth	r3, r3
 800205c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002060:	b29a      	uxth	r2, r3
 8002062:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002066:	801a      	strh	r2, [r3, #0]
 8002068:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	b29b      	uxth	r3, r3
 8002070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002078:	b29a      	uxth	r2, r3
 800207a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800207e:	801a      	strh	r2, [r3, #0]
 8002080:	e017      	b.n	80020b2 <HAL_PCD_EP_DB_Transmit+0x546>
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	785b      	ldrb	r3, [r3, #1]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d113      	bne.n	80020b2 <HAL_PCD_EP_DB_Transmit+0x546>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002092:	b29b      	uxth	r3, r3
 8002094:	461a      	mov	r2, r3
 8002096:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002098:	4413      	add	r3, r2
 800209a:	677b      	str	r3, [r7, #116]	; 0x74
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	00da      	lsls	r2, r3, #3
 80020a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020a4:	4413      	add	r3, r2
 80020a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80020aa:	673b      	str	r3, [r7, #112]	; 0x70
 80020ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020ae:	2200      	movs	r2, #0
 80020b0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	4619      	mov	r1, r3
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f005 fd96 	bl	8007bea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80020be:	88fb      	ldrh	r3, [r7, #6]
 80020c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f040 811a 	bne.w	80022fe <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4413      	add	r3, r2
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020e4:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	441a      	add	r2, r3
 80020f6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80020fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002102:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800210a:	b29b      	uxth	r3, r3
 800210c:	8013      	strh	r3, [r2, #0]
 800210e:	e0f6      	b.n	80022fe <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002110:	88fb      	ldrh	r3, [r7, #6]
 8002112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d121      	bne.n	800215e <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	461a      	mov	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	b29b      	uxth	r3, r3
 800212c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002134:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	461a      	mov	r2, r3
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	441a      	add	r2, r3
 8002146:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800214a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800214e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002152:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800215a:	b29b      	uxth	r3, r3
 800215c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002164:	2b01      	cmp	r3, #1
 8002166:	f040 80ca 	bne.w	80022fe <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	695a      	ldr	r2, [r3, #20]
 800216e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002172:	441a      	add	r2, r3
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	69da      	ldr	r2, [r3, #28]
 800217c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002180:	441a      	add	r2, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	6a1a      	ldr	r2, [r3, #32]
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	429a      	cmp	r2, r3
 8002190:	d30b      	bcc.n	80021aa <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	6a1a      	ldr	r2, [r3, #32]
 800219e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021a2:	1ad2      	subs	r2, r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	621a      	str	r2, [r3, #32]
 80021a8:	e017      	b.n	80021da <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d108      	bne.n	80021c4 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80021b2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80021b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80021c2:	e00a      	b.n	80021da <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2200      	movs	r2, #0
 80021d0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	657b      	str	r3, [r7, #84]	; 0x54
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	785b      	ldrb	r3, [r3, #1]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d165      	bne.n	80022b4 <HAL_PCD_EP_DB_Transmit+0x748>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	461a      	mov	r2, r3
 80021fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021fc:	4413      	add	r3, r2
 80021fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	00da      	lsls	r2, r3, #3
 8002206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002208:	4413      	add	r3, r2
 800220a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800220e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002210:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	b29b      	uxth	r3, r3
 8002216:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800221a:	b29a      	uxth	r2, r3
 800221c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800221e:	801a      	strh	r2, [r3, #0]
 8002220:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002224:	2b3e      	cmp	r3, #62	; 0x3e
 8002226:	d91d      	bls.n	8002264 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8002228:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800222c:	095b      	lsrs	r3, r3, #5
 800222e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002230:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	2b00      	cmp	r3, #0
 800223a:	d102      	bne.n	8002242 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800223c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800223e:	3b01      	subs	r3, #1
 8002240:	66bb      	str	r3, [r7, #104]	; 0x68
 8002242:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	b29a      	uxth	r2, r3
 8002248:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800224a:	b29b      	uxth	r3, r3
 800224c:	029b      	lsls	r3, r3, #10
 800224e:	b29b      	uxth	r3, r3
 8002250:	4313      	orrs	r3, r2
 8002252:	b29b      	uxth	r3, r3
 8002254:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002258:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800225c:	b29a      	uxth	r2, r3
 800225e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002260:	801a      	strh	r2, [r3, #0]
 8002262:	e041      	b.n	80022e8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002264:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10a      	bne.n	8002282 <HAL_PCD_EP_DB_Transmit+0x716>
 800226c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	b29b      	uxth	r3, r3
 8002272:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002276:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800227a:	b29a      	uxth	r2, r3
 800227c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800227e:	801a      	strh	r2, [r3, #0]
 8002280:	e032      	b.n	80022e8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002282:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002286:	085b      	lsrs	r3, r3, #1
 8002288:	66bb      	str	r3, [r7, #104]	; 0x68
 800228a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d002      	beq.n	800229c <HAL_PCD_EP_DB_Transmit+0x730>
 8002296:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002298:	3301      	adds	r3, #1
 800229a:	66bb      	str	r3, [r7, #104]	; 0x68
 800229c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	029b      	lsls	r3, r3, #10
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	4313      	orrs	r3, r2
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022b0:	801a      	strh	r2, [r3, #0]
 80022b2:	e019      	b.n	80022e8 <HAL_PCD_EP_DB_Transmit+0x77c>
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	785b      	ldrb	r3, [r3, #1]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d115      	bne.n	80022e8 <HAL_PCD_EP_DB_Transmit+0x77c>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	461a      	mov	r2, r3
 80022c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ca:	4413      	add	r3, r2
 80022cc:	657b      	str	r3, [r7, #84]	; 0x54
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	00da      	lsls	r2, r3, #3
 80022d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022d6:	4413      	add	r3, r2
 80022d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80022dc:	653b      	str	r3, [r7, #80]	; 0x50
 80022de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022e6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	6959      	ldr	r1, [r3, #20]
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	895a      	ldrh	r2, [r3, #10]
 80022f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	f002 fd77 	bl	8004dec <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	b29b      	uxth	r3, r3
 8002310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002318:	82bb      	strh	r3, [r7, #20]
 800231a:	8abb      	ldrh	r3, [r7, #20]
 800231c:	f083 0310 	eor.w	r3, r3, #16
 8002320:	82bb      	strh	r3, [r7, #20]
 8002322:	8abb      	ldrh	r3, [r7, #20]
 8002324:	f083 0320 	eor.w	r3, r3, #32
 8002328:	82bb      	strh	r3, [r7, #20]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	441a      	add	r2, r3
 8002338:	8abb      	ldrh	r3, [r7, #20]
 800233a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800233e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800234a:	b29b      	uxth	r3, r3
 800234c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3790      	adds	r7, #144	; 0x90
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002358:	b480      	push	{r7}
 800235a:	b087      	sub	sp, #28
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	607b      	str	r3, [r7, #4]
 8002362:	460b      	mov	r3, r1
 8002364:	817b      	strh	r3, [r7, #10]
 8002366:	4613      	mov	r3, r2
 8002368:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800236a:	897b      	ldrh	r3, [r7, #10]
 800236c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002370:	b29b      	uxth	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00b      	beq.n	800238e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002376:	897b      	ldrh	r3, [r7, #10]
 8002378:	f003 0207 	and.w	r2, r3, #7
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	3310      	adds	r3, #16
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	4413      	add	r3, r2
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	e009      	b.n	80023a2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800238e:	897a      	ldrh	r2, [r7, #10]
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	4413      	add	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80023a2:	893b      	ldrh	r3, [r7, #8]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d107      	bne.n	80023b8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	2200      	movs	r2, #0
 80023ac:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	80da      	strh	r2, [r3, #6]
 80023b6:	e00b      	b.n	80023d0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	2201      	movs	r2, #1
 80023bc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	0c1b      	lsrs	r3, r3, #16
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	371c      	adds	r7, #28
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80023de:	b480      	push	{r7}
 80023e0:	b085      	sub	sp, #20
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002402:	b29b      	uxth	r3, r3
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	b29a      	uxth	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002416:	b29b      	uxth	r3, r3
 8002418:	f043 0302 	orr.w	r3, r3, #2
 800241c:	b29a      	uxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
	...

08002434 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800243c:	2300      	movs	r3, #0
 800243e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002440:	2300      	movs	r3, #0
 8002442:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 8098 	beq.w	8002582 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002452:	2300      	movs	r3, #0
 8002454:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002456:	4b43      	ldr	r3, [pc, #268]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10d      	bne.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002462:	4b40      	ldr	r3, [pc, #256]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002466:	4a3f      	ldr	r2, [pc, #252]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800246c:	6593      	str	r3, [r2, #88]	; 0x58
 800246e:	4b3d      	ldr	r3, [pc, #244]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800247a:	2301      	movs	r3, #1
 800247c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800247e:	4b3a      	ldr	r3, [pc, #232]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a39      	ldr	r2, [pc, #228]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002488:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800248a:	f7fe f9e1 	bl	8000850 <HAL_GetTick>
 800248e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002490:	e009      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002492:	f7fe f9dd 	bl	8000850 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d902      	bls.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	74fb      	strb	r3, [r7, #19]
        break;
 80024a4:	e005      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024a6:	4b30      	ldr	r3, [pc, #192]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0ef      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80024b2:	7cfb      	ldrb	r3, [r7, #19]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d159      	bne.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024b8:	4b2a      	ldr	r3, [pc, #168]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024c2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d01e      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d019      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024d4:	4b23      	ldr	r3, [pc, #140]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024e0:	4b20      	ldr	r3, [pc, #128]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e6:	4a1f      	ldr	r2, [pc, #124]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024f0:	4b1c      	ldr	r3, [pc, #112]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f6:	4a1b      	ldr	r2, [pc, #108]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002500:	4a18      	ldr	r2, [pc, #96]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d016      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002512:	f7fe f99d 	bl	8000850 <HAL_GetTick>
 8002516:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002518:	e00b      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800251a:	f7fe f999 	bl	8000850 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	f241 3288 	movw	r2, #5000	; 0x1388
 8002528:	4293      	cmp	r3, r2
 800252a:	d902      	bls.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	74fb      	strb	r3, [r7, #19]
            break;
 8002530:	e006      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002532:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0ec      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002540:	7cfb      	ldrb	r3, [r7, #19]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10b      	bne.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002546:	4b07      	ldr	r3, [pc, #28]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	4903      	ldr	r1, [pc, #12]	; (8002564 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002556:	4313      	orrs	r3, r2
 8002558:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800255c:	e008      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800255e:	7cfb      	ldrb	r3, [r7, #19]
 8002560:	74bb      	strb	r3, [r7, #18]
 8002562:	e005      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002564:	40021000 	.word	0x40021000
 8002568:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800256c:	7cfb      	ldrb	r3, [r7, #19]
 800256e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002570:	7c7b      	ldrb	r3, [r7, #17]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d105      	bne.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002576:	4ba6      	ldr	r3, [pc, #664]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257a:	4aa5      	ldr	r2, [pc, #660]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800257c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002580:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00a      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800258e:	4ba0      	ldr	r3, [pc, #640]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002594:	f023 0203 	bic.w	r2, r3, #3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	499c      	ldr	r1, [pc, #624]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00a      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025b0:	4b97      	ldr	r3, [pc, #604]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b6:	f023 020c 	bic.w	r2, r3, #12
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	4994      	ldr	r1, [pc, #592]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0304 	and.w	r3, r3, #4
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00a      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025d2:	4b8f      	ldr	r3, [pc, #572]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	498b      	ldr	r1, [pc, #556]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00a      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025f4:	4b86      	ldr	r3, [pc, #536]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	4983      	ldr	r1, [pc, #524]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002604:	4313      	orrs	r3, r2
 8002606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0320 	and.w	r3, r3, #32
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00a      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002616:	4b7e      	ldr	r3, [pc, #504]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	497a      	ldr	r1, [pc, #488]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002626:	4313      	orrs	r3, r2
 8002628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00a      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002638:	4b75      	ldr	r3, [pc, #468]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	4972      	ldr	r1, [pc, #456]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002648:	4313      	orrs	r3, r2
 800264a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00a      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800265a:	4b6d      	ldr	r3, [pc, #436]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800265c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002660:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	4969      	ldr	r1, [pc, #420]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800266a:	4313      	orrs	r3, r2
 800266c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00a      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800267c:	4b64      	ldr	r3, [pc, #400]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800267e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002682:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	4961      	ldr	r1, [pc, #388]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800268c:	4313      	orrs	r3, r2
 800268e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00a      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800269e:	4b5c      	ldr	r3, [pc, #368]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	4958      	ldr	r1, [pc, #352]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d015      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026c0:	4b53      	ldr	r3, [pc, #332]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ce:	4950      	ldr	r1, [pc, #320]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026de:	d105      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026e0:	4b4b      	ldr	r3, [pc, #300]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	4a4a      	ldr	r2, [pc, #296]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d015      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026f8:	4b45      	ldr	r3, [pc, #276]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002706:	4942      	ldr	r1, [pc, #264]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002708:	4313      	orrs	r3, r2
 800270a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002712:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002716:	d105      	bne.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002718:	4b3d      	ldr	r3, [pc, #244]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4a3c      	ldr	r2, [pc, #240]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800271e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002722:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d015      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002730:	4b37      	ldr	r3, [pc, #220]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002736:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	4934      	ldr	r1, [pc, #208]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002740:	4313      	orrs	r3, r2
 8002742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800274e:	d105      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002750:	4b2f      	ldr	r3, [pc, #188]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	4a2e      	ldr	r2, [pc, #184]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002756:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800275a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d015      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002768:	4b29      	ldr	r3, [pc, #164]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800276a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002776:	4926      	ldr	r1, [pc, #152]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002782:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002786:	d105      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002788:	4b21      	ldr	r3, [pc, #132]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4a20      	ldr	r2, [pc, #128]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800278e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002792:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d015      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027a0:	4b1b      	ldr	r3, [pc, #108]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ae:	4918      	ldr	r1, [pc, #96]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027be:	d105      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027c0:	4b13      	ldr	r3, [pc, #76]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	4a12      	ldr	r2, [pc, #72]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d015      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80027d8:	4b0d      	ldr	r3, [pc, #52]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e6:	490a      	ldr	r1, [pc, #40]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027f6:	d105      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027f8:	4b05      	ldr	r3, [pc, #20]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	4a04      	ldr	r2, [pc, #16]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002802:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002804:	7cbb      	ldrb	r3, [r7, #18]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40021000 	.word	0x40021000

08002814 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002824:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8002828:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	b29a      	uxth	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002842:	b480      	push	{r7}
 8002844:	b085      	sub	sp, #20
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800284a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800284e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002856:	b29a      	uxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	b29b      	uxth	r3, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	b29b      	uxth	r3, r3
 8002860:	4013      	ands	r3, r2
 8002862:	b29a      	uxth	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	1d3b      	adds	r3, r7, #4
 8002882:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2201      	movs	r2, #1
 800288a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b09d      	sub	sp, #116	; 0x74
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80028d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028da:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	78db      	ldrb	r3, [r3, #3]
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d81f      	bhi.n	8002926 <USB_ActivateEndpoint+0x72>
 80028e6:	a201      	add	r2, pc, #4	; (adr r2, 80028ec <USB_ActivateEndpoint+0x38>)
 80028e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ec:	080028fd 	.word	0x080028fd
 80028f0:	08002919 	.word	0x08002919
 80028f4:	0800292f 	.word	0x0800292f
 80028f8:	0800290b 	.word	0x0800290b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80028fc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002900:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002904:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002908:	e012      	b.n	8002930 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800290a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800290e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002912:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002916:	e00b      	b.n	8002930 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002918:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800291c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002920:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002924:	e004      	b.n	8002930 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800292c:	e000      	b.n	8002930 <USB_ActivateEndpoint+0x7c>
      break;
 800292e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	441a      	add	r2, r3
 800293a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800293e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002942:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800294a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800294e:	b29b      	uxth	r3, r3
 8002950:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	881b      	ldrh	r3, [r3, #0]
 800295e:	b29b      	uxth	r3, r3
 8002960:	b21b      	sxth	r3, r3
 8002962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800296a:	b21a      	sxth	r2, r3
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	b21b      	sxth	r3, r3
 8002972:	4313      	orrs	r3, r2
 8002974:	b21b      	sxth	r3, r3
 8002976:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	441a      	add	r2, r3
 8002984:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002988:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800298c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002998:	b29b      	uxth	r3, r3
 800299a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	7b1b      	ldrb	r3, [r3, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f040 8178 	bne.w	8002c96 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	785b      	ldrb	r3, [r3, #1]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 8084 	beq.w	8002ab8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	61bb      	str	r3, [r7, #24]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	461a      	mov	r2, r3
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	4413      	add	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	00da      	lsls	r2, r3, #3
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	88db      	ldrh	r3, [r3, #6]
 80029d8:	085b      	lsrs	r3, r3, #1
 80029da:	b29b      	uxth	r3, r3
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	b29a      	uxth	r2, r3
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	827b      	strh	r3, [r7, #18]
 80029f2:	8a7b      	ldrh	r3, [r7, #18]
 80029f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d01b      	beq.n	8002a34 <USB_ActivateEndpoint+0x180>
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	881b      	ldrh	r3, [r3, #0]
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a12:	823b      	strh	r3, [r7, #16]
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	441a      	add	r2, r3
 8002a1e:	8a3b      	ldrh	r3, [r7, #16]
 8002a20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	78db      	ldrb	r3, [r3, #3]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d020      	beq.n	8002a7e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a52:	81bb      	strh	r3, [r7, #12]
 8002a54:	89bb      	ldrh	r3, [r7, #12]
 8002a56:	f083 0320 	eor.w	r3, r3, #32
 8002a5a:	81bb      	strh	r3, [r7, #12]
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	441a      	add	r2, r3
 8002a66:	89bb      	ldrh	r3, [r7, #12]
 8002a68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	8013      	strh	r3, [r2, #0]
 8002a7c:	e2d5      	b.n	800302a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	881b      	ldrh	r3, [r3, #0]
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a94:	81fb      	strh	r3, [r7, #14]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	441a      	add	r2, r3
 8002aa0:	89fb      	ldrh	r3, [r7, #14]
 8002aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	8013      	strh	r3, [r2, #0]
 8002ab6:	e2b8      	b.n	800302a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	633b      	str	r3, [r7, #48]	; 0x30
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac8:	4413      	add	r3, r2
 8002aca:	633b      	str	r3, [r7, #48]	; 0x30
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	00da      	lsls	r2, r3, #3
 8002ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ada:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	88db      	ldrh	r3, [r3, #6]
 8002ae0:	085b      	lsrs	r3, r3, #1
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aea:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	62bb      	str	r3, [r7, #40]	; 0x28
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	461a      	mov	r2, r3
 8002afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afc:	4413      	add	r3, r2
 8002afe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	00da      	lsls	r2, r3, #3
 8002b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b08:	4413      	add	r3, r2
 8002b0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	881b      	ldrh	r3, [r3, #0]
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	801a      	strh	r2, [r3, #0]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	2b3e      	cmp	r3, #62	; 0x3e
 8002b26:	d91d      	bls.n	8002b64 <USB_ActivateEndpoint+0x2b0>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	095b      	lsrs	r3, r3, #5
 8002b2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	f003 031f 	and.w	r3, r3, #31
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d102      	bne.n	8002b42 <USB_ActivateEndpoint+0x28e>
 8002b3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	881b      	ldrh	r3, [r3, #0]
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	029b      	lsls	r3, r3, #10
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	4313      	orrs	r3, r2
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	801a      	strh	r2, [r3, #0]
 8002b62:	e026      	b.n	8002bb2 <USB_ActivateEndpoint+0x2fe>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10a      	bne.n	8002b82 <USB_ActivateEndpoint+0x2ce>
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	801a      	strh	r2, [r3, #0]
 8002b80:	e017      	b.n	8002bb2 <USB_ActivateEndpoint+0x2fe>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	085b      	lsrs	r3, r3, #1
 8002b88:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <USB_ActivateEndpoint+0x2e8>
 8002b96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b98:	3301      	adds	r3, #1
 8002b9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	029b      	lsls	r3, r3, #10
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	4313      	orrs	r3, r2
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	881b      	ldrh	r3, [r3, #0]
 8002bbe:	847b      	strh	r3, [r7, #34]	; 0x22
 8002bc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d01b      	beq.n	8002c02 <USB_ActivateEndpoint+0x34e>
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be0:	843b      	strh	r3, [r7, #32]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	441a      	add	r2, r3
 8002bec:	8c3b      	ldrh	r3, [r7, #32]
 8002bee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bf6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d124      	bne.n	8002c54 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	881b      	ldrh	r3, [r3, #0]
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c20:	83bb      	strh	r3, [r7, #28]
 8002c22:	8bbb      	ldrh	r3, [r7, #28]
 8002c24:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002c28:	83bb      	strh	r3, [r7, #28]
 8002c2a:	8bbb      	ldrh	r3, [r7, #28]
 8002c2c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c30:	83bb      	strh	r3, [r7, #28]
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	441a      	add	r2, r3
 8002c3c:	8bbb      	ldrh	r3, [r7, #28]
 8002c3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	8013      	strh	r3, [r2, #0]
 8002c52:	e1ea      	b.n	800302a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	881b      	ldrh	r3, [r3, #0]
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6a:	83fb      	strh	r3, [r7, #30]
 8002c6c:	8bfb      	ldrh	r3, [r7, #30]
 8002c6e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c72:	83fb      	strh	r3, [r7, #30]
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	441a      	add	r2, r3
 8002c7e:	8bfb      	ldrh	r3, [r7, #30]
 8002c80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	8013      	strh	r3, [r2, #0]
 8002c94:	e1c9      	b.n	800302a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	78db      	ldrb	r3, [r3, #3]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d11e      	bne.n	8002cdc <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	881b      	ldrh	r3, [r3, #0]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	441a      	add	r2, r3
 8002cc2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8002cc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cce:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	8013      	strh	r3, [r2, #0]
 8002cda:	e01d      	b.n	8002d18 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	881b      	ldrh	r3, [r3, #0]
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8002cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	441a      	add	r2, r3
 8002d00:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002d04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	461a      	mov	r2, r3
 8002d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d28:	4413      	add	r3, r2
 8002d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	00da      	lsls	r2, r3, #3
 8002d32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	891b      	ldrh	r3, [r3, #8]
 8002d40:	085b      	lsrs	r3, r3, #1
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d4a:	801a      	strh	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	657b      	str	r3, [r7, #84]	; 0x54
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	461a      	mov	r2, r3
 8002d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d5c:	4413      	add	r3, r2
 8002d5e:	657b      	str	r3, [r7, #84]	; 0x54
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	00da      	lsls	r2, r3, #3
 8002d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d68:	4413      	add	r3, r2
 8002d6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d6e:	653b      	str	r3, [r7, #80]	; 0x50
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	895b      	ldrh	r3, [r3, #10]
 8002d74:	085b      	lsrs	r3, r3, #1
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d7e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	785b      	ldrb	r3, [r3, #1]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f040 8093 	bne.w	8002eb0 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	881b      	ldrh	r3, [r3, #0]
 8002d96:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8002d9a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d01b      	beq.n	8002dde <USB_ActivateEndpoint+0x52a>
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dbc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	441a      	add	r2, r3
 8002dc8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002dca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002dec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d01b      	beq.n	8002e2e <USB_ActivateEndpoint+0x57a>
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	441a      	add	r2, r3
 8002e18:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002e1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e44:	873b      	strh	r3, [r7, #56]	; 0x38
 8002e46:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002e48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002e4c:	873b      	strh	r3, [r7, #56]	; 0x38
 8002e4e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002e50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e54:	873b      	strh	r3, [r7, #56]	; 0x38
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	441a      	add	r2, r3
 8002e60:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002e62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e8c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	441a      	add	r2, r3
 8002e98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002e9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	8013      	strh	r3, [r2, #0]
 8002eae:	e0bc      	b.n	800302a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002ec0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d01d      	beq.n	8002f08 <USB_ActivateEndpoint+0x654>
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	441a      	add	r2, r3
 8002ef0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002ef4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ef8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002efc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002f18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d01d      	beq.n	8002f60 <USB_ActivateEndpoint+0x6ac>
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f3a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	441a      	add	r2, r3
 8002f48:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002f4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	78db      	ldrb	r3, [r3, #3]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d024      	beq.n	8002fb2 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f7e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002f82:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002f86:	f083 0320 	eor.w	r3, r3, #32
 8002f8a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	441a      	add	r2, r3
 8002f98:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002f9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	8013      	strh	r3, [r2, #0]
 8002fb0:	e01d      	b.n	8002fee <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fc8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	441a      	add	r2, r3
 8002fd6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003004:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	441a      	add	r2, r3
 8003012:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800301a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800301e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003026:	b29b      	uxth	r3, r3
 8003028:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800302a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800302e:	4618      	mov	r0, r3
 8003030:	3774      	adds	r7, #116	; 0x74
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop

0800303c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800303c:	b480      	push	{r7}
 800303e:	b08d      	sub	sp, #52	; 0x34
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	7b1b      	ldrb	r3, [r3, #12]
 800304a:	2b00      	cmp	r3, #0
 800304c:	f040 808e 	bne.w	800316c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	785b      	ldrb	r3, [r3, #1]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d044      	beq.n	80030e2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	81bb      	strh	r3, [r7, #12]
 8003066:	89bb      	ldrh	r3, [r7, #12]
 8003068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306c:	2b00      	cmp	r3, #0
 800306e:	d01b      	beq.n	80030a8 <USB_DeactivateEndpoint+0x6c>
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4413      	add	r3, r2
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	b29b      	uxth	r3, r3
 800307e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003086:	817b      	strh	r3, [r7, #10]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	441a      	add	r2, r3
 8003092:	897b      	ldrh	r3, [r7, #10]
 8003094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003098:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800309c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030be:	813b      	strh	r3, [r7, #8]
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	441a      	add	r2, r3
 80030ca:	893b      	ldrh	r3, [r7, #8]
 80030cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030dc:	b29b      	uxth	r3, r3
 80030de:	8013      	strh	r3, [r2, #0]
 80030e0:	e192      	b.n	8003408 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4413      	add	r3, r2
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	827b      	strh	r3, [r7, #18]
 80030f0:	8a7b      	ldrh	r3, [r7, #18]
 80030f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d01b      	beq.n	8003132 <USB_DeactivateEndpoint+0xf6>
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	b29b      	uxth	r3, r3
 8003108:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800310c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003110:	823b      	strh	r3, [r7, #16]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	441a      	add	r2, r3
 800311c:	8a3b      	ldrh	r3, [r7, #16]
 800311e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003126:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800312a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800312e:	b29b      	uxth	r3, r3
 8003130:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	b29b      	uxth	r3, r3
 8003140:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003148:	81fb      	strh	r3, [r7, #14]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	441a      	add	r2, r3
 8003154:	89fb      	ldrh	r3, [r7, #14]
 8003156:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800315a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800315e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003166:	b29b      	uxth	r3, r3
 8003168:	8013      	strh	r3, [r2, #0]
 800316a:	e14d      	b.n	8003408 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	785b      	ldrb	r3, [r3, #1]
 8003170:	2b00      	cmp	r3, #0
 8003172:	f040 80a5 	bne.w	80032c0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	843b      	strh	r3, [r7, #32]
 8003184:	8c3b      	ldrh	r3, [r7, #32]
 8003186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d01b      	beq.n	80031c6 <USB_DeactivateEndpoint+0x18a>
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	b29b      	uxth	r3, r3
 800319c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a4:	83fb      	strh	r3, [r7, #30]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	441a      	add	r2, r3
 80031b0:	8bfb      	ldrh	r3, [r7, #30]
 80031b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	83bb      	strh	r3, [r7, #28]
 80031d4:	8bbb      	ldrh	r3, [r7, #28]
 80031d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d01b      	beq.n	8003216 <USB_DeactivateEndpoint+0x1da>
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f4:	837b      	strh	r3, [r7, #26]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	441a      	add	r2, r3
 8003200:	8b7b      	ldrh	r3, [r7, #26]
 8003202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800320a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800320e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003212:	b29b      	uxth	r3, r3
 8003214:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	b29b      	uxth	r3, r3
 8003224:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800322c:	833b      	strh	r3, [r7, #24]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	441a      	add	r2, r3
 8003238:	8b3b      	ldrh	r3, [r7, #24]
 800323a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800323e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003246:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800324a:	b29b      	uxth	r3, r3
 800324c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	881b      	ldrh	r3, [r3, #0]
 800325a:	b29b      	uxth	r3, r3
 800325c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003264:	82fb      	strh	r3, [r7, #22]
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	441a      	add	r2, r3
 8003270:	8afb      	ldrh	r3, [r7, #22]
 8003272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800327a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800327e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003282:	b29b      	uxth	r3, r3
 8003284:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	b29b      	uxth	r3, r3
 8003294:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800329c:	82bb      	strh	r3, [r7, #20]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	441a      	add	r2, r3
 80032a8:	8abb      	ldrh	r3, [r7, #20]
 80032aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	8013      	strh	r3, [r2, #0]
 80032be:	e0a3      	b.n	8003408 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80032ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d01b      	beq.n	8003310 <USB_DeactivateEndpoint+0x2d4>
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	881b      	ldrh	r3, [r3, #0]
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ee:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	441a      	add	r2, r3
 80032fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80032fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003300:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003304:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800330c:	b29b      	uxth	r3, r3
 800330e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800331e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003324:	2b00      	cmp	r3, #0
 8003326:	d01b      	beq.n	8003360 <USB_DeactivateEndpoint+0x324>
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	b29b      	uxth	r3, r3
 8003336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800333a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800333e:	853b      	strh	r3, [r7, #40]	; 0x28
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	441a      	add	r2, r3
 800334a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800334c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003350:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003354:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003358:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800335c:	b29b      	uxth	r3, r3
 800335e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	b29b      	uxth	r3, r3
 800336e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003376:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	441a      	add	r2, r3
 8003382:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003384:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003388:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800338c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003394:	b29b      	uxth	r3, r3
 8003396:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033ae:	84bb      	strh	r3, [r7, #36]	; 0x24
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	441a      	add	r2, r3
 80033ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80033bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	b29b      	uxth	r3, r3
 80033de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e6:	847b      	strh	r3, [r7, #34]	; 0x22
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	441a      	add	r2, r3
 80033f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80033f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003404:	b29b      	uxth	r3, r3
 8003406:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3734      	adds	r7, #52	; 0x34
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b0c2      	sub	sp, #264	; 0x108
 800341a:	af00      	add	r7, sp, #0
 800341c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003420:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003424:	6018      	str	r0, [r3, #0]
 8003426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800342a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800342e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	785b      	ldrb	r3, [r3, #1]
 800343c:	2b01      	cmp	r3, #1
 800343e:	f040 86b7 	bne.w	80041b0 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699a      	ldr	r2, [r3, #24]
 800344e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003452:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	429a      	cmp	r2, r3
 800345c:	d908      	bls.n	8003470 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800345e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800346e:	e007      	b.n	8003480 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8003470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003474:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	7b1b      	ldrb	r3, [r3, #12]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d13a      	bne.n	8003506 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6959      	ldr	r1, [r3, #20]
 800349c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80034a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	88da      	ldrh	r2, [r3, #6]
 80034a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80034b2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80034b6:	6800      	ldr	r0, [r0, #0]
 80034b8:	f001 fc98 	bl	8004dec <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80034bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80034c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	613b      	str	r3, [r7, #16]
 80034c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80034cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	461a      	mov	r2, r3
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4413      	add	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
 80034e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80034e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	00da      	lsls	r2, r3, #3
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	4413      	add	r3, r2
 80034f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	801a      	strh	r2, [r3, #0]
 8003502:	f000 be1f 	b.w	8004144 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800350a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	78db      	ldrb	r3, [r3, #3]
 8003512:	2b02      	cmp	r3, #2
 8003514:	f040 8462 	bne.w	8003ddc <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800351c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6a1a      	ldr	r2, [r3, #32]
 8003524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003528:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	429a      	cmp	r2, r3
 8003532:	f240 83df 	bls.w	8003cf4 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800353a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003544:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	881b      	ldrh	r3, [r3, #0]
 8003552:	b29b      	uxth	r3, r3
 8003554:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003564:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800356e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	441a      	add	r2, r3
 800357a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800357e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003582:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003586:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800358a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800358e:	b29b      	uxth	r3, r3
 8003590:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003596:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6a1a      	ldr	r2, [r3, #32]
 800359e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035a2:	1ad2      	subs	r2, r2, r3
 80035a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80035a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80035b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80035b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80035be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 81c7 	beq.w	8003966 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80035d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80035dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	633b      	str	r3, [r7, #48]	; 0x30
 80035e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80035e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	785b      	ldrb	r3, [r3, #1]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d177      	bne.n	80036e4 <USB_EPStartXfer+0x2ce>
 80035f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80035f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003604:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800360e:	b29b      	uxth	r3, r3
 8003610:	461a      	mov	r2, r3
 8003612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003614:	4413      	add	r3, r2
 8003616:	62bb      	str	r3, [r7, #40]	; 0x28
 8003618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800361c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	00da      	lsls	r2, r3, #3
 8003626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003628:	4413      	add	r3, r2
 800362a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800362e:	627b      	str	r3, [r7, #36]	; 0x24
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	881b      	ldrh	r3, [r3, #0]
 8003634:	b29b      	uxth	r3, r3
 8003636:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800363a:	b29a      	uxth	r2, r3
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	801a      	strh	r2, [r3, #0]
 8003640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003644:	2b3e      	cmp	r3, #62	; 0x3e
 8003646:	d921      	bls.n	800368c <USB_EPStartXfer+0x276>
 8003648:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800364c:	095b      	lsrs	r3, r3, #5
 800364e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003652:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003656:	f003 031f 	and.w	r3, r3, #31
 800365a:	2b00      	cmp	r3, #0
 800365c:	d104      	bne.n	8003668 <USB_EPStartXfer+0x252>
 800365e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003662:	3b01      	subs	r3, #1
 8003664:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	b29a      	uxth	r2, r3
 800366e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003672:	b29b      	uxth	r3, r3
 8003674:	029b      	lsls	r3, r3, #10
 8003676:	b29b      	uxth	r3, r3
 8003678:	4313      	orrs	r3, r2
 800367a:	b29b      	uxth	r3, r3
 800367c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003684:	b29a      	uxth	r2, r3
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	801a      	strh	r2, [r3, #0]
 800368a:	e050      	b.n	800372e <USB_EPStartXfer+0x318>
 800368c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10a      	bne.n	80036aa <USB_EPStartXfer+0x294>
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	881b      	ldrh	r3, [r3, #0]
 8003698:	b29b      	uxth	r3, r3
 800369a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800369e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	801a      	strh	r2, [r3, #0]
 80036a8:	e041      	b.n	800372e <USB_EPStartXfer+0x318>
 80036aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036ae:	085b      	lsrs	r3, r3, #1
 80036b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80036b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d004      	beq.n	80036ca <USB_EPStartXfer+0x2b4>
 80036c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80036c4:	3301      	adds	r3, #1
 80036c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	029b      	lsls	r3, r3, #10
 80036d8:	b29b      	uxth	r3, r3
 80036da:	4313      	orrs	r3, r2
 80036dc:	b29a      	uxth	r2, r3
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	801a      	strh	r2, [r3, #0]
 80036e2:	e024      	b.n	800372e <USB_EPStartXfer+0x318>
 80036e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	785b      	ldrb	r3, [r3, #1]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d11c      	bne.n	800372e <USB_EPStartXfer+0x318>
 80036f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003702:	b29b      	uxth	r3, r3
 8003704:	461a      	mov	r2, r3
 8003706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003708:	4413      	add	r3, r2
 800370a:	633b      	str	r3, [r7, #48]	; 0x30
 800370c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	00da      	lsls	r2, r3, #3
 800371a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371c:	4413      	add	r3, r2
 800371e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003722:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003728:	b29a      	uxth	r2, r3
 800372a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800372e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	895b      	ldrh	r3, [r3, #10]
 800373a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800373e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6959      	ldr	r1, [r3, #20]
 800374a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800374e:	b29b      	uxth	r3, r3
 8003750:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003754:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003758:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800375c:	6800      	ldr	r0, [r0, #0]
 800375e:	f001 fb45 	bl	8004dec <USB_WritePMA>
            ep->xfer_buff += len;
 8003762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695a      	ldr	r2, [r3, #20]
 800376e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003772:	441a      	add	r2, r3
 8003774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003778:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6a1a      	ldr	r2, [r3, #32]
 800378c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	429a      	cmp	r2, r3
 800379a:	d90f      	bls.n	80037bc <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800379c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6a1a      	ldr	r2, [r3, #32]
 80037a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037ac:	1ad2      	subs	r2, r2, r3
 80037ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	621a      	str	r2, [r3, #32]
 80037ba:	e00e      	b.n	80037da <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80037bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80037cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2200      	movs	r2, #0
 80037d8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80037da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	785b      	ldrb	r3, [r3, #1]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d177      	bne.n	80038da <USB_EPStartXfer+0x4c4>
 80037ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	61bb      	str	r3, [r7, #24]
 80037f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003804:	b29b      	uxth	r3, r3
 8003806:	461a      	mov	r2, r3
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	4413      	add	r3, r2
 800380c:	61bb      	str	r3, [r7, #24]
 800380e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003812:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	00da      	lsls	r2, r3, #3
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	4413      	add	r3, r2
 8003820:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003824:	617b      	str	r3, [r7, #20]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	881b      	ldrh	r3, [r3, #0]
 800382a:	b29b      	uxth	r3, r3
 800382c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003830:	b29a      	uxth	r2, r3
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	801a      	strh	r2, [r3, #0]
 8003836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800383a:	2b3e      	cmp	r3, #62	; 0x3e
 800383c:	d921      	bls.n	8003882 <USB_EPStartXfer+0x46c>
 800383e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800384c:	f003 031f 	and.w	r3, r3, #31
 8003850:	2b00      	cmp	r3, #0
 8003852:	d104      	bne.n	800385e <USB_EPStartXfer+0x448>
 8003854:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003858:	3b01      	subs	r3, #1
 800385a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	b29a      	uxth	r2, r3
 8003864:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003868:	b29b      	uxth	r3, r3
 800386a:	029b      	lsls	r3, r3, #10
 800386c:	b29b      	uxth	r3, r3
 800386e:	4313      	orrs	r3, r2
 8003870:	b29b      	uxth	r3, r3
 8003872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800387a:	b29a      	uxth	r2, r3
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	801a      	strh	r2, [r3, #0]
 8003880:	e056      	b.n	8003930 <USB_EPStartXfer+0x51a>
 8003882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10a      	bne.n	80038a0 <USB_EPStartXfer+0x48a>
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	881b      	ldrh	r3, [r3, #0]
 800388e:	b29b      	uxth	r3, r3
 8003890:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003894:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003898:	b29a      	uxth	r2, r3
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	801a      	strh	r2, [r3, #0]
 800389e:	e047      	b.n	8003930 <USB_EPStartXfer+0x51a>
 80038a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038a4:	085b      	lsrs	r3, r3, #1
 80038a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80038aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d004      	beq.n	80038c0 <USB_EPStartXfer+0x4aa>
 80038b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038ba:	3301      	adds	r3, #1
 80038bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	029b      	lsls	r3, r3, #10
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	4313      	orrs	r3, r2
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	801a      	strh	r2, [r3, #0]
 80038d8:	e02a      	b.n	8003930 <USB_EPStartXfer+0x51a>
 80038da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80038de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	785b      	ldrb	r3, [r3, #1]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d122      	bne.n	8003930 <USB_EPStartXfer+0x51a>
 80038ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80038ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	623b      	str	r3, [r7, #32]
 80038f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80038fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003904:	b29b      	uxth	r3, r3
 8003906:	461a      	mov	r2, r3
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	4413      	add	r3, r2
 800390c:	623b      	str	r3, [r7, #32]
 800390e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003912:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	00da      	lsls	r2, r3, #3
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	4413      	add	r3, r2
 8003920:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003924:	61fb      	str	r3, [r7, #28]
 8003926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800392a:	b29a      	uxth	r2, r3
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	891b      	ldrh	r3, [r3, #8]
 800393c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6959      	ldr	r1, [r3, #20]
 800394c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003950:	b29b      	uxth	r3, r3
 8003952:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003956:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800395a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800395e:	6800      	ldr	r0, [r0, #0]
 8003960:	f001 fa44 	bl	8004dec <USB_WritePMA>
 8003964:	e3ee      	b.n	8004144 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800396a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	785b      	ldrb	r3, [r3, #1]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d177      	bne.n	8003a66 <USB_EPStartXfer+0x650>
 8003976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800397a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	64bb      	str	r3, [r7, #72]	; 0x48
 8003982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003986:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003990:	b29b      	uxth	r3, r3
 8003992:	461a      	mov	r2, r3
 8003994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003996:	4413      	add	r3, r2
 8003998:	64bb      	str	r3, [r7, #72]	; 0x48
 800399a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800399e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	00da      	lsls	r2, r3, #3
 80039a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039aa:	4413      	add	r3, r2
 80039ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80039b0:	647b      	str	r3, [r7, #68]	; 0x44
 80039b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039bc:	b29a      	uxth	r2, r3
 80039be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039c0:	801a      	strh	r2, [r3, #0]
 80039c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039c6:	2b3e      	cmp	r3, #62	; 0x3e
 80039c8:	d921      	bls.n	8003a0e <USB_EPStartXfer+0x5f8>
 80039ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039ce:	095b      	lsrs	r3, r3, #5
 80039d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80039d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039d8:	f003 031f 	and.w	r3, r3, #31
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d104      	bne.n	80039ea <USB_EPStartXfer+0x5d4>
 80039e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80039e4:	3b01      	subs	r3, #1
 80039e6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80039ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	029b      	lsls	r3, r3, #10
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	4313      	orrs	r3, r2
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a0a:	801a      	strh	r2, [r3, #0]
 8003a0c:	e056      	b.n	8003abc <USB_EPStartXfer+0x6a6>
 8003a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10a      	bne.n	8003a2c <USB_EPStartXfer+0x616>
 8003a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a18:	881b      	ldrh	r3, [r3, #0]
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a28:	801a      	strh	r2, [r3, #0]
 8003a2a:	e047      	b.n	8003abc <USB_EPStartXfer+0x6a6>
 8003a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a30:	085b      	lsrs	r3, r3, #1
 8003a32:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d004      	beq.n	8003a4c <USB_EPStartXfer+0x636>
 8003a42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a46:	3301      	adds	r3, #1
 8003a48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	029b      	lsls	r3, r3, #10
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a62:	801a      	strh	r2, [r3, #0]
 8003a64:	e02a      	b.n	8003abc <USB_EPStartXfer+0x6a6>
 8003a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	785b      	ldrb	r3, [r3, #1]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d122      	bne.n	8003abc <USB_EPStartXfer+0x6a6>
 8003a76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	653b      	str	r3, [r7, #80]	; 0x50
 8003a82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	461a      	mov	r2, r3
 8003a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a96:	4413      	add	r3, r2
 8003a98:	653b      	str	r3, [r7, #80]	; 0x50
 8003a9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	00da      	lsls	r2, r3, #3
 8003aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aaa:	4413      	add	r3, r2
 8003aac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ac0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	891b      	ldrh	r3, [r3, #8]
 8003ac8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ad0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6959      	ldr	r1, [r3, #20]
 8003ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003ae2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003ae6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003aea:	6800      	ldr	r0, [r0, #0]
 8003aec:	f001 f97e 	bl	8004dec <USB_WritePMA>
            ep->xfer_buff += len;
 8003af0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003af4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695a      	ldr	r2, [r3, #20]
 8003afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b00:	441a      	add	r2, r3
 8003b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003b0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6a1a      	ldr	r2, [r3, #32]
 8003b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d90f      	bls.n	8003b4a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8003b2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6a1a      	ldr	r2, [r3, #32]
 8003b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b3a:	1ad2      	subs	r2, r2, r3
 8003b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	621a      	str	r2, [r3, #32]
 8003b48:	e00e      	b.n	8003b68 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8003b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8003b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2200      	movs	r2, #0
 8003b66:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	643b      	str	r3, [r7, #64]	; 0x40
 8003b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	785b      	ldrb	r3, [r3, #1]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d177      	bne.n	8003c74 <USB_EPStartXfer+0x85e>
 8003b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba4:	4413      	add	r3, r2
 8003ba6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003bac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	00da      	lsls	r2, r3, #3
 8003bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb8:	4413      	add	r3, r2
 8003bba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8003bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc2:	881b      	ldrh	r3, [r3, #0]
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bce:	801a      	strh	r2, [r3, #0]
 8003bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bd4:	2b3e      	cmp	r3, #62	; 0x3e
 8003bd6:	d921      	bls.n	8003c1c <USB_EPStartXfer+0x806>
 8003bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bdc:	095b      	lsrs	r3, r3, #5
 8003bde:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003be6:	f003 031f 	and.w	r3, r3, #31
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d104      	bne.n	8003bf8 <USB_EPStartXfer+0x7e2>
 8003bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	029b      	lsls	r3, r3, #10
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c18:	801a      	strh	r2, [r3, #0]
 8003c1a:	e050      	b.n	8003cbe <USB_EPStartXfer+0x8a8>
 8003c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10a      	bne.n	8003c3a <USB_EPStartXfer+0x824>
 8003c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c36:	801a      	strh	r2, [r3, #0]
 8003c38:	e041      	b.n	8003cbe <USB_EPStartXfer+0x8a8>
 8003c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c3e:	085b      	lsrs	r3, r3, #1
 8003c40:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d004      	beq.n	8003c5a <USB_EPStartXfer+0x844>
 8003c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c54:	3301      	adds	r3, #1
 8003c56:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c5c:	881b      	ldrh	r3, [r3, #0]
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	029b      	lsls	r3, r3, #10
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c70:	801a      	strh	r2, [r3, #0]
 8003c72:	e024      	b.n	8003cbe <USB_EPStartXfer+0x8a8>
 8003c74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	785b      	ldrb	r3, [r3, #1]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d11c      	bne.n	8003cbe <USB_EPStartXfer+0x8a8>
 8003c84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	461a      	mov	r2, r3
 8003c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c98:	4413      	add	r3, r2
 8003c9a:	643b      	str	r3, [r7, #64]	; 0x40
 8003c9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ca0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	00da      	lsls	r2, r3, #3
 8003caa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cac:	4413      	add	r3, r2
 8003cae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cbc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	895b      	ldrh	r3, [r3, #10]
 8003cca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6959      	ldr	r1, [r3, #20]
 8003cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003ce4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003ce8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003cec:	6800      	ldr	r0, [r0, #0]
 8003cee:	f001 f87d 	bl	8004dec <USB_WritePMA>
 8003cf2:	e227      	b.n	8004144 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003cf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8003d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	881b      	ldrh	r3, [r3, #0]
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	441a      	add	r2, r3
 8003d48:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003d4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d80:	4413      	add	r3, r2
 8003d82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	00da      	lsls	r2, r3, #3
 8003d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d94:	4413      	add	r3, r2
 8003d96:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003da4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003daa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	891b      	ldrh	r3, [r3, #8]
 8003db2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003db6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6959      	ldr	r1, [r3, #20]
 8003dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003dcc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003dd0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003dd4:	6800      	ldr	r0, [r0, #0]
 8003dd6:	f001 f809 	bl	8004dec <USB_WritePMA>
 8003dda:	e1b3      	b.n	8004144 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8003ddc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003de0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6a1a      	ldr	r2, [r3, #32]
 8003de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dec:	1ad2      	subs	r2, r2, r3
 8003dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003df2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003dfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 80c6 	beq.w	8003fae <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	673b      	str	r3, [r7, #112]	; 0x70
 8003e2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	785b      	ldrb	r3, [r3, #1]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d177      	bne.n	8003f2e <USB_EPStartXfer+0xb18>
 8003e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e5e:	4413      	add	r3, r2
 8003e60:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	00da      	lsls	r2, r3, #3
 8003e70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e72:	4413      	add	r3, r2
 8003e74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003e78:	667b      	str	r3, [r7, #100]	; 0x64
 8003e7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e88:	801a      	strh	r2, [r3, #0]
 8003e8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e8e:	2b3e      	cmp	r3, #62	; 0x3e
 8003e90:	d921      	bls.n	8003ed6 <USB_EPStartXfer+0xac0>
 8003e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ea0:	f003 031f 	and.w	r3, r3, #31
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d104      	bne.n	8003eb2 <USB_EPStartXfer+0xa9c>
 8003ea8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003eac:	3b01      	subs	r3, #1
 8003eae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003eb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	029b      	lsls	r3, r3, #10
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ed2:	801a      	strh	r2, [r3, #0]
 8003ed4:	e050      	b.n	8003f78 <USB_EPStartXfer+0xb62>
 8003ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10a      	bne.n	8003ef4 <USB_EPStartXfer+0xade>
 8003ede:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ee8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ef0:	801a      	strh	r2, [r3, #0]
 8003ef2:	e041      	b.n	8003f78 <USB_EPStartXfer+0xb62>
 8003ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ef8:	085b      	lsrs	r3, r3, #1
 8003efa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d004      	beq.n	8003f14 <USB_EPStartXfer+0xafe>
 8003f0a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003f0e:	3301      	adds	r3, #1
 8003f10:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003f14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	029b      	lsls	r3, r3, #10
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	4313      	orrs	r3, r2
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f2a:	801a      	strh	r2, [r3, #0]
 8003f2c:	e024      	b.n	8003f78 <USB_EPStartXfer+0xb62>
 8003f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	785b      	ldrb	r3, [r3, #1]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d11c      	bne.n	8003f78 <USB_EPStartXfer+0xb62>
 8003f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	461a      	mov	r2, r3
 8003f50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f52:	4413      	add	r3, r2
 8003f54:	673b      	str	r3, [r7, #112]	; 0x70
 8003f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	00da      	lsls	r2, r3, #3
 8003f64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f66:	4413      	add	r3, r2
 8003f68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f76:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8003f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	895b      	ldrh	r3, [r3, #10]
 8003f84:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6959      	ldr	r1, [r3, #20]
 8003f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003f9e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003fa2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003fa6:	6800      	ldr	r0, [r0, #0]
 8003fa8:	f000 ff20 	bl	8004dec <USB_WritePMA>
 8003fac:	e0ca      	b.n	8004144 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	785b      	ldrb	r3, [r3, #1]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d177      	bne.n	80040ae <USB_EPStartXfer+0xc98>
 8003fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003fca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	461a      	mov	r2, r3
 8003fdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fde:	4413      	add	r3, r2
 8003fe0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fe6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	00da      	lsls	r2, r3, #3
 8003ff0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003ff8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ffa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004004:	b29a      	uxth	r2, r3
 8004006:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004008:	801a      	strh	r2, [r3, #0]
 800400a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800400e:	2b3e      	cmp	r3, #62	; 0x3e
 8004010:	d921      	bls.n	8004056 <USB_EPStartXfer+0xc40>
 8004012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004016:	095b      	lsrs	r3, r3, #5
 8004018:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800401c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004020:	f003 031f 	and.w	r3, r3, #31
 8004024:	2b00      	cmp	r3, #0
 8004026:	d104      	bne.n	8004032 <USB_EPStartXfer+0xc1c>
 8004028:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800402c:	3b01      	subs	r3, #1
 800402e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004032:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004034:	881b      	ldrh	r3, [r3, #0]
 8004036:	b29a      	uxth	r2, r3
 8004038:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800403c:	b29b      	uxth	r3, r3
 800403e:	029b      	lsls	r3, r3, #10
 8004040:	b29b      	uxth	r3, r3
 8004042:	4313      	orrs	r3, r2
 8004044:	b29b      	uxth	r3, r3
 8004046:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800404a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800404e:	b29a      	uxth	r2, r3
 8004050:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004052:	801a      	strh	r2, [r3, #0]
 8004054:	e05c      	b.n	8004110 <USB_EPStartXfer+0xcfa>
 8004056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10a      	bne.n	8004074 <USB_EPStartXfer+0xc5e>
 800405e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	b29b      	uxth	r3, r3
 8004064:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004068:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800406c:	b29a      	uxth	r2, r3
 800406e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004070:	801a      	strh	r2, [r3, #0]
 8004072:	e04d      	b.n	8004110 <USB_EPStartXfer+0xcfa>
 8004074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004078:	085b      	lsrs	r3, r3, #1
 800407a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800407e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d004      	beq.n	8004094 <USB_EPStartXfer+0xc7e>
 800408a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800408e:	3301      	adds	r3, #1
 8004090:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	b29a      	uxth	r2, r3
 800409a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800409e:	b29b      	uxth	r3, r3
 80040a0:	029b      	lsls	r3, r3, #10
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	4313      	orrs	r3, r2
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040aa:	801a      	strh	r2, [r3, #0]
 80040ac:	e030      	b.n	8004110 <USB_EPStartXfer+0xcfa>
 80040ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	785b      	ldrb	r3, [r3, #1]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d128      	bne.n	8004110 <USB_EPStartXfer+0xcfa>
 80040be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040da:	b29b      	uxth	r3, r3
 80040dc:	461a      	mov	r2, r3
 80040de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040e2:	4413      	add	r3, r2
 80040e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	00da      	lsls	r2, r3, #3
 80040f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040fa:	4413      	add	r3, r2
 80040fc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004100:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004108:	b29a      	uxth	r2, r3
 800410a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800410e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	891b      	ldrh	r3, [r3, #8]
 800411c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6959      	ldr	r1, [r3, #20]
 800412c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004130:	b29b      	uxth	r3, r3
 8004132:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004136:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800413a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800413e:	6800      	ldr	r0, [r0, #0]
 8004140:	f000 fe54 	bl	8004dec <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004148:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004152:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	881b      	ldrh	r3, [r3, #0]
 8004160:	b29b      	uxth	r3, r3
 8004162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800416a:	817b      	strh	r3, [r7, #10]
 800416c:	897b      	ldrh	r3, [r7, #10]
 800416e:	f083 0310 	eor.w	r3, r3, #16
 8004172:	817b      	strh	r3, [r7, #10]
 8004174:	897b      	ldrh	r3, [r7, #10]
 8004176:	f083 0320 	eor.w	r3, r3, #32
 800417a:	817b      	strh	r3, [r7, #10]
 800417c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004180:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800418a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	441a      	add	r2, r3
 8004196:	897b      	ldrh	r3, [r7, #10]
 8004198:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800419c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	8013      	strh	r3, [r2, #0]
 80041ac:	f000 bcde 	b.w	8004b6c <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80041b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	7b1b      	ldrb	r3, [r3, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f040 80bb 	bne.w	8004338 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80041c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	699a      	ldr	r2, [r3, #24]
 80041ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d917      	bls.n	800420e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80041de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80041ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699a      	ldr	r2, [r3, #24]
 80041fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041fe:	1ad2      	subs	r2, r2, r3
 8004200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004204:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	619a      	str	r2, [r3, #24]
 800420c:	e00e      	b.n	800422c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800420e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004212:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800421e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004222:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2200      	movs	r2, #0
 800422a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800422c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004230:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800423a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800423e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004248:	b29b      	uxth	r3, r3
 800424a:	461a      	mov	r2, r3
 800424c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004250:	4413      	add	r3, r2
 8004252:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800425a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	00da      	lsls	r2, r3, #3
 8004264:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004268:	4413      	add	r3, r2
 800426a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800426e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004272:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004276:	881b      	ldrh	r3, [r3, #0]
 8004278:	b29b      	uxth	r3, r3
 800427a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800427e:	b29a      	uxth	r2, r3
 8004280:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004284:	801a      	strh	r2, [r3, #0]
 8004286:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800428a:	2b3e      	cmp	r3, #62	; 0x3e
 800428c:	d924      	bls.n	80042d8 <USB_EPStartXfer+0xec2>
 800428e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800429c:	f003 031f 	and.w	r3, r3, #31
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d104      	bne.n	80042ae <USB_EPStartXfer+0xe98>
 80042a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80042a8:	3b01      	subs	r3, #1
 80042aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	029b      	lsls	r3, r3, #10
 80042be:	b29b      	uxth	r3, r3
 80042c0:	4313      	orrs	r3, r2
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042d2:	801a      	strh	r2, [r3, #0]
 80042d4:	f000 bc10 	b.w	8004af8 <USB_EPStartXfer+0x16e2>
 80042d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10c      	bne.n	80042fa <USB_EPStartXfer+0xee4>
 80042e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042f6:	801a      	strh	r2, [r3, #0]
 80042f8:	e3fe      	b.n	8004af8 <USB_EPStartXfer+0x16e2>
 80042fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042fe:	085b      	lsrs	r3, r3, #1
 8004300:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	d004      	beq.n	800431a <USB_EPStartXfer+0xf04>
 8004310:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004314:	3301      	adds	r3, #1
 8004316:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800431a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	b29a      	uxth	r2, r3
 8004322:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004326:	b29b      	uxth	r3, r3
 8004328:	029b      	lsls	r3, r3, #10
 800432a:	b29b      	uxth	r3, r3
 800432c:	4313      	orrs	r3, r2
 800432e:	b29a      	uxth	r2, r3
 8004330:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004334:	801a      	strh	r2, [r3, #0]
 8004336:	e3df      	b.n	8004af8 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800433c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	78db      	ldrb	r3, [r3, #3]
 8004344:	2b02      	cmp	r3, #2
 8004346:	f040 8218 	bne.w	800477a <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800434a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800434e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	785b      	ldrb	r3, [r3, #1]
 8004356:	2b00      	cmp	r3, #0
 8004358:	f040 809d 	bne.w	8004496 <USB_EPStartXfer+0x1080>
 800435c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004360:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800436a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800436e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004378:	b29b      	uxth	r3, r3
 800437a:	461a      	mov	r2, r3
 800437c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004380:	4413      	add	r3, r2
 8004382:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800438a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	00da      	lsls	r2, r3, #3
 8004394:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004398:	4413      	add	r3, r2
 800439a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800439e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80043a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043b4:	801a      	strh	r2, [r3, #0]
 80043b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	2b3e      	cmp	r3, #62	; 0x3e
 80043c4:	d92b      	bls.n	800441e <USB_EPStartXfer+0x1008>
 80043c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	095b      	lsrs	r3, r3, #5
 80043d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	f003 031f 	and.w	r3, r3, #31
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d104      	bne.n	80043f6 <USB_EPStartXfer+0xfe0>
 80043ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043f0:	3b01      	subs	r3, #1
 80043f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004402:	b29b      	uxth	r3, r3
 8004404:	029b      	lsls	r3, r3, #10
 8004406:	b29b      	uxth	r3, r3
 8004408:	4313      	orrs	r3, r2
 800440a:	b29b      	uxth	r3, r3
 800440c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004414:	b29a      	uxth	r2, r3
 8004416:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800441a:	801a      	strh	r2, [r3, #0]
 800441c:	e070      	b.n	8004500 <USB_EPStartXfer+0x10ea>
 800441e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10c      	bne.n	8004448 <USB_EPStartXfer+0x1032>
 800442e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	b29b      	uxth	r3, r3
 8004436:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800443a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800443e:	b29a      	uxth	r2, r3
 8004440:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004444:	801a      	strh	r2, [r3, #0]
 8004446:	e05b      	b.n	8004500 <USB_EPStartXfer+0x10ea>
 8004448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800444c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	085b      	lsrs	r3, r3, #1
 8004456:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800445a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800445e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d004      	beq.n	8004478 <USB_EPStartXfer+0x1062>
 800446e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004472:	3301      	adds	r3, #1
 8004474:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004478:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	b29a      	uxth	r2, r3
 8004480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004484:	b29b      	uxth	r3, r3
 8004486:	029b      	lsls	r3, r3, #10
 8004488:	b29b      	uxth	r3, r3
 800448a:	4313      	orrs	r3, r2
 800448c:	b29a      	uxth	r2, r3
 800448e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004492:	801a      	strh	r2, [r3, #0]
 8004494:	e034      	b.n	8004500 <USB_EPStartXfer+0x10ea>
 8004496:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800449a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	785b      	ldrb	r3, [r3, #1]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d12c      	bne.n	8004500 <USB_EPStartXfer+0x10ea>
 80044a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	461a      	mov	r2, r3
 80044c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80044ca:	4413      	add	r3, r2
 80044cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	00da      	lsls	r2, r3, #3
 80044de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80044e2:	4413      	add	r3, r2
 80044e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80044e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80044fe:	801a      	strh	r2, [r3, #0]
 8004500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004504:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800450e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004512:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	785b      	ldrb	r3, [r3, #1]
 800451a:	2b00      	cmp	r3, #0
 800451c:	f040 809d 	bne.w	800465a <USB_EPStartXfer+0x1244>
 8004520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004524:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800452e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004532:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800453c:	b29b      	uxth	r3, r3
 800453e:	461a      	mov	r2, r3
 8004540:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004544:	4413      	add	r3, r2
 8004546:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800454a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800454e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	00da      	lsls	r2, r3, #3
 8004558:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800455c:	4413      	add	r3, r2
 800455e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004562:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004566:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	b29b      	uxth	r3, r3
 800456e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004572:	b29a      	uxth	r2, r3
 8004574:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004578:	801a      	strh	r2, [r3, #0]
 800457a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800457e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	2b3e      	cmp	r3, #62	; 0x3e
 8004588:	d92b      	bls.n	80045e2 <USB_EPStartXfer+0x11cc>
 800458a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800458e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	095b      	lsrs	r3, r3, #5
 8004598:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800459c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	f003 031f 	and.w	r3, r3, #31
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d104      	bne.n	80045ba <USB_EPStartXfer+0x11a4>
 80045b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045b4:	3b01      	subs	r3, #1
 80045b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80045ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	029b      	lsls	r3, r3, #10
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	4313      	orrs	r3, r2
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045d8:	b29a      	uxth	r2, r3
 80045da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045de:	801a      	strh	r2, [r3, #0]
 80045e0:	e069      	b.n	80046b6 <USB_EPStartXfer+0x12a0>
 80045e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10c      	bne.n	800460c <USB_EPStartXfer+0x11f6>
 80045f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045f6:	881b      	ldrh	r3, [r3, #0]
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004602:	b29a      	uxth	r2, r3
 8004604:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004608:	801a      	strh	r2, [r3, #0]
 800460a:	e054      	b.n	80046b6 <USB_EPStartXfer+0x12a0>
 800460c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	085b      	lsrs	r3, r3, #1
 800461a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800461e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b00      	cmp	r3, #0
 8004630:	d004      	beq.n	800463c <USB_EPStartXfer+0x1226>
 8004632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004636:	3301      	adds	r3, #1
 8004638:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800463c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	b29a      	uxth	r2, r3
 8004644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004648:	b29b      	uxth	r3, r3
 800464a:	029b      	lsls	r3, r3, #10
 800464c:	b29b      	uxth	r3, r3
 800464e:	4313      	orrs	r3, r2
 8004650:	b29a      	uxth	r2, r3
 8004652:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004656:	801a      	strh	r2, [r3, #0]
 8004658:	e02d      	b.n	80046b6 <USB_EPStartXfer+0x12a0>
 800465a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800465e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	785b      	ldrb	r3, [r3, #1]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d125      	bne.n	80046b6 <USB_EPStartXfer+0x12a0>
 800466a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800466e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004678:	b29b      	uxth	r3, r3
 800467a:	461a      	mov	r2, r3
 800467c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004680:	4413      	add	r3, r2
 8004682:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800468a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	00da      	lsls	r2, r3, #3
 8004694:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004698:	4413      	add	r3, r2
 800469a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800469e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046b4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80046b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 8218 	beq.w	8004af8 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80046c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80046e8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80046ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d005      	beq.n	8004700 <USB_EPStartXfer+0x12ea>
 80046f4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80046f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10d      	bne.n	800471c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004700:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004708:	2b00      	cmp	r3, #0
 800470a:	f040 81f5 	bne.w	8004af8 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800470e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8004712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004716:	2b00      	cmp	r3, #0
 8004718:	f040 81ee 	bne.w	8004af8 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800471c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004720:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800472a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	b29b      	uxth	r3, r3
 800473a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800473e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004742:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8004746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800474a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004754:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	441a      	add	r2, r3
 8004760:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8004764:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004768:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800476c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004770:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004774:	b29b      	uxth	r3, r3
 8004776:	8013      	strh	r3, [r2, #0]
 8004778:	e1be      	b.n	8004af8 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800477a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800477e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	78db      	ldrb	r3, [r3, #3]
 8004786:	2b01      	cmp	r3, #1
 8004788:	f040 81b4 	bne.w	8004af4 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800478c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	699a      	ldr	r2, [r3, #24]
 8004798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800479c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d917      	bls.n	80047d8 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80047a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80047b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	699a      	ldr	r2, [r3, #24]
 80047c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047c8:	1ad2      	subs	r2, r2, r3
 80047ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	619a      	str	r2, [r3, #24]
 80047d6:	e00e      	b.n	80047f6 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80047d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80047e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2200      	movs	r2, #0
 80047f4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80047f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	785b      	ldrb	r3, [r3, #1]
 8004802:	2b00      	cmp	r3, #0
 8004804:	f040 8085 	bne.w	8004912 <USB_EPStartXfer+0x14fc>
 8004808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800480c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800481a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004824:	b29b      	uxth	r3, r3
 8004826:	461a      	mov	r2, r3
 8004828:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800482c:	4413      	add	r3, r2
 800482e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004836:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	00da      	lsls	r2, r3, #3
 8004840:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004844:	4413      	add	r3, r2
 8004846:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800484a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800484e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004852:	881b      	ldrh	r3, [r3, #0]
 8004854:	b29b      	uxth	r3, r3
 8004856:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800485a:	b29a      	uxth	r2, r3
 800485c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004860:	801a      	strh	r2, [r3, #0]
 8004862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004866:	2b3e      	cmp	r3, #62	; 0x3e
 8004868:	d923      	bls.n	80048b2 <USB_EPStartXfer+0x149c>
 800486a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800486e:	095b      	lsrs	r3, r3, #5
 8004870:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004878:	f003 031f 	and.w	r3, r3, #31
 800487c:	2b00      	cmp	r3, #0
 800487e:	d104      	bne.n	800488a <USB_EPStartXfer+0x1474>
 8004880:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004884:	3b01      	subs	r3, #1
 8004886:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800488a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	b29a      	uxth	r2, r3
 8004892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004896:	b29b      	uxth	r3, r3
 8004898:	029b      	lsls	r3, r3, #10
 800489a:	b29b      	uxth	r3, r3
 800489c:	4313      	orrs	r3, r2
 800489e:	b29b      	uxth	r3, r3
 80048a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80048ae:	801a      	strh	r2, [r3, #0]
 80048b0:	e060      	b.n	8004974 <USB_EPStartXfer+0x155e>
 80048b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10c      	bne.n	80048d4 <USB_EPStartXfer+0x14be>
 80048ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80048d0:	801a      	strh	r2, [r3, #0]
 80048d2:	e04f      	b.n	8004974 <USB_EPStartXfer+0x155e>
 80048d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048d8:	085b      	lsrs	r3, r3, #1
 80048da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80048de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d004      	beq.n	80048f4 <USB_EPStartXfer+0x14de>
 80048ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048ee:	3301      	adds	r3, #1
 80048f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80048f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80048f8:	881b      	ldrh	r3, [r3, #0]
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004900:	b29b      	uxth	r3, r3
 8004902:	029b      	lsls	r3, r3, #10
 8004904:	b29b      	uxth	r3, r3
 8004906:	4313      	orrs	r3, r2
 8004908:	b29a      	uxth	r2, r3
 800490a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800490e:	801a      	strh	r2, [r3, #0]
 8004910:	e030      	b.n	8004974 <USB_EPStartXfer+0x155e>
 8004912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	785b      	ldrb	r3, [r3, #1]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d128      	bne.n	8004974 <USB_EPStartXfer+0x155e>
 8004922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004926:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004934:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800493e:	b29b      	uxth	r3, r3
 8004940:	461a      	mov	r2, r3
 8004942:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004946:	4413      	add	r3, r2
 8004948:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800494c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004950:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	00da      	lsls	r2, r3, #3
 800495a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800495e:	4413      	add	r3, r2
 8004960:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004964:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800496c:	b29a      	uxth	r2, r3
 800496e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004972:	801a      	strh	r2, [r3, #0]
 8004974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004978:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004986:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	785b      	ldrb	r3, [r3, #1]
 800498e:	2b00      	cmp	r3, #0
 8004990:	f040 8085 	bne.w	8004a9e <USB_EPStartXfer+0x1688>
 8004994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004998:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80049a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	461a      	mov	r2, r3
 80049b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80049b8:	4413      	add	r3, r2
 80049ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80049be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	00da      	lsls	r2, r3, #3
 80049cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80049d0:	4413      	add	r3, r2
 80049d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80049d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80049de:	881b      	ldrh	r3, [r3, #0]
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80049ec:	801a      	strh	r2, [r3, #0]
 80049ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049f2:	2b3e      	cmp	r3, #62	; 0x3e
 80049f4:	d923      	bls.n	8004a3e <USB_EPStartXfer+0x1628>
 80049f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049fa:	095b      	lsrs	r3, r3, #5
 80049fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a04:	f003 031f 	and.w	r3, r3, #31
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d104      	bne.n	8004a16 <USB_EPStartXfer+0x1600>
 8004a0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a10:	3b01      	subs	r3, #1
 8004a12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	029b      	lsls	r3, r3, #10
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a3a:	801a      	strh	r2, [r3, #0]
 8004a3c:	e05c      	b.n	8004af8 <USB_EPStartXfer+0x16e2>
 8004a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10c      	bne.n	8004a60 <USB_EPStartXfer+0x164a>
 8004a46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a4a:	881b      	ldrh	r3, [r3, #0]
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a5c:	801a      	strh	r2, [r3, #0]
 8004a5e:	e04b      	b.n	8004af8 <USB_EPStartXfer+0x16e2>
 8004a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a64:	085b      	lsrs	r3, r3, #1
 8004a66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d004      	beq.n	8004a80 <USB_EPStartXfer+0x166a>
 8004a76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a84:	881b      	ldrh	r3, [r3, #0]
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	029b      	lsls	r3, r3, #10
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	4313      	orrs	r3, r2
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a9a:	801a      	strh	r2, [r3, #0]
 8004a9c:	e02c      	b.n	8004af8 <USB_EPStartXfer+0x16e2>
 8004a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	785b      	ldrb	r3, [r3, #1]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d124      	bne.n	8004af8 <USB_EPStartXfer+0x16e2>
 8004aae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ab2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004aca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ace:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	00da      	lsls	r2, r3, #3
 8004ad8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004adc:	4413      	add	r3, r2
 8004ade:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ae2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004af0:	801a      	strh	r2, [r3, #0]
 8004af2:	e001      	b.n	8004af8 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e03a      	b.n	8004b6e <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004afc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004b22:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004b26:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b2a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004b2e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004b32:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b36:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004b3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	441a      	add	r2, r3
 8004b54:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004b58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	785b      	ldrb	r3, [r3, #1]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d020      	beq.n	8004bcc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ba0:	81bb      	strh	r3, [r7, #12]
 8004ba2:	89bb      	ldrh	r3, [r7, #12]
 8004ba4:	f083 0310 	eor.w	r3, r3, #16
 8004ba8:	81bb      	strh	r3, [r7, #12]
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	441a      	add	r2, r3
 8004bb4:	89bb      	ldrh	r3, [r7, #12]
 8004bb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	8013      	strh	r3, [r2, #0]
 8004bca:	e01f      	b.n	8004c0c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be2:	81fb      	strh	r3, [r7, #14]
 8004be4:	89fb      	ldrh	r3, [r7, #14]
 8004be6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004bea:	81fb      	strh	r3, [r7, #14]
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	441a      	add	r2, r3
 8004bf6:	89fb      	ldrh	r3, [r7, #14]
 8004bf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b087      	sub	sp, #28
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
 8004c22:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	7b1b      	ldrb	r3, [r3, #12]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f040 809d 	bne.w	8004d68 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	785b      	ldrb	r3, [r3, #1]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d04c      	beq.n	8004cd0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	881b      	ldrh	r3, [r3, #0]
 8004c42:	823b      	strh	r3, [r7, #16]
 8004c44:	8a3b      	ldrh	r3, [r7, #16]
 8004c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d01b      	beq.n	8004c86 <USB_EPClearStall+0x6c>
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c64:	81fb      	strh	r3, [r7, #14]
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	441a      	add	r2, r3
 8004c70:	89fb      	ldrh	r3, [r7, #14]
 8004c72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	78db      	ldrb	r3, [r3, #3]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d06c      	beq.n	8004d68 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ca4:	81bb      	strh	r3, [r7, #12]
 8004ca6:	89bb      	ldrh	r3, [r7, #12]
 8004ca8:	f083 0320 	eor.w	r3, r3, #32
 8004cac:	81bb      	strh	r3, [r7, #12]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	441a      	add	r2, r3
 8004cb8:	89bb      	ldrh	r3, [r7, #12]
 8004cba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	8013      	strh	r3, [r2, #0]
 8004cce:	e04b      	b.n	8004d68 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	82fb      	strh	r3, [r7, #22]
 8004cde:	8afb      	ldrh	r3, [r7, #22]
 8004ce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d01b      	beq.n	8004d20 <USB_EPClearStall+0x106>
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4413      	add	r3, r2
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfe:	82bb      	strh	r3, [r7, #20]
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	441a      	add	r2, r3
 8004d0a:	8abb      	ldrh	r3, [r7, #20]
 8004d0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d36:	827b      	strh	r3, [r7, #18]
 8004d38:	8a7b      	ldrh	r3, [r7, #18]
 8004d3a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004d3e:	827b      	strh	r3, [r7, #18]
 8004d40:	8a7b      	ldrh	r3, [r7, #18]
 8004d42:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d46:	827b      	strh	r3, [r7, #18]
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	441a      	add	r2, r3
 8004d52:	8a7b      	ldrh	r3, [r7, #18]
 8004d54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	371c      	adds	r7, #28
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b083      	sub	sp, #12
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
 8004d7e:	460b      	mov	r3, r1
 8004d80:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004d82:	78fb      	ldrb	r3, [r7, #3]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d103      	bne.n	8004d90 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2280      	movs	r2, #128	; 0x80
 8004d8c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004db2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004dde:	68fb      	ldr	r3, [r7, #12]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b08b      	sub	sp, #44	; 0x2c
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	4611      	mov	r1, r2
 8004df8:	461a      	mov	r2, r3
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	80fb      	strh	r3, [r7, #6]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004e02:	88bb      	ldrh	r3, [r7, #4]
 8004e04:	3301      	adds	r3, #1
 8004e06:	085b      	lsrs	r3, r3, #1
 8004e08:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004e12:	88fa      	ldrh	r2, [r7, #6]
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e1c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	627b      	str	r3, [r7, #36]	; 0x24
 8004e22:	e01b      	b.n	8004e5c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	021b      	lsls	r3, r3, #8
 8004e32:	b21a      	sxth	r2, r3
 8004e34:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	b21b      	sxth	r3, r3
 8004e3c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8004e3e:	6a3b      	ldr	r3, [r7, #32]
 8004e40:	8a7a      	ldrh	r2, [r7, #18]
 8004e42:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	3302      	adds	r3, #2
 8004e48:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	3301      	adds	r3, #1
 8004e54:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1e0      	bne.n	8004e24 <USB_WritePMA+0x38>
  }
}
 8004e62:	bf00      	nop
 8004e64:	bf00      	nop
 8004e66:	372c      	adds	r7, #44	; 0x2c
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b08b      	sub	sp, #44	; 0x2c
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	4611      	mov	r1, r2
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	460b      	mov	r3, r1
 8004e80:	80fb      	strh	r3, [r7, #6]
 8004e82:	4613      	mov	r3, r2
 8004e84:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004e86:	88bb      	ldrh	r3, [r7, #4]
 8004e88:	085b      	lsrs	r3, r3, #1
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004e96:	88fa      	ldrh	r2, [r7, #6]
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ea0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea6:	e018      	b.n	8004eda <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	881b      	ldrh	r3, [r3, #0]
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	3302      	adds	r3, #2
 8004eb4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	0a1b      	lsrs	r3, r3, #8
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1e3      	bne.n	8004ea8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8004ee0:	88bb      	ldrh	r3, [r7, #4]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d007      	beq.n	8004efc <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8004eec:	6a3b      	ldr	r3, [r7, #32]
 8004eee:	881b      	ldrh	r3, [r3, #0]
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	701a      	strb	r2, [r3, #0]
  }
}
 8004efc:	bf00      	nop
 8004efe:	372c      	adds	r7, #44	; 0x2c
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <CAN_voidInit>:
 */

#include "CAN_Interface.h"

void CAN_voidInit(CAN_RegMap_t* A_canx, CAN_RxConfig_t* A_rxConfig, CAN_TxConfig_t* A_txConfig)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b08b      	sub	sp, #44	; 0x2c
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
	CAN_MSG_SRAM_t* L_msg;
	if(A_canx == CAN1)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4aa0      	ldr	r2, [pc, #640]	; (8005198 <CAN_voidInit+0x290>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d102      	bne.n	8004f22 <CAN_voidInit+0x1a>
		L_msg = CAN1_MESSAGES;
 8004f1c:	4b9f      	ldr	r3, [pc, #636]	; (800519c <CAN_voidInit+0x294>)
 8004f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f20:	e00c      	b.n	8004f3c <CAN_voidInit+0x34>
	else if(A_canx == CAN2)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	4a9e      	ldr	r2, [pc, #632]	; (80051a0 <CAN_voidInit+0x298>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d102      	bne.n	8004f30 <CAN_voidInit+0x28>
		L_msg = CAN2_MESSAGES;
 8004f2a:	4b9e      	ldr	r3, [pc, #632]	; (80051a4 <CAN_voidInit+0x29c>)
 8004f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f2e:	e005      	b.n	8004f3c <CAN_voidInit+0x34>
	else if(A_canx == CAN3)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4a9d      	ldr	r2, [pc, #628]	; (80051a8 <CAN_voidInit+0x2a0>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d101      	bne.n	8004f3c <CAN_voidInit+0x34>
			L_msg = CAN3_MESSAGES;
 8004f38:	4b9c      	ldr	r3, [pc, #624]	; (80051ac <CAN_voidInit+0x2a4>)
 8004f3a:	627b      	str	r3, [r7, #36]	; 0x24

	/* Enter Initialization mode */
	A_canx->CCCR |= (1 << 0);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	f043 0201 	orr.w	r2, r3, #1
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	619a      	str	r2, [r3, #24]
	while(! ((A_canx->CCCR >> 0) & 1));  // Wait to make sure INIT bit has been written (Recommendation from reference manual)
 8004f48:	bf00      	nop
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d0f9      	beq.n	8004f4a <CAN_voidInit+0x42>

	// might configure Timeout value here
	A_canx->CCCR |= (1 << 1);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	f043 0202 	orr.w	r2, r3, #2
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	619a      	str	r2, [r3, #24]

/* Setup General Configuration */
#if CAN_FDCAN_OPERATION == CAN_FDCAN_DISABLE
		A_canx->CCCR &= ~(1 << 8);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 8);
#endif

#if CAN_BIT_RATE_SWITCHING == CAN_BIT_RATE_SWITCHING_DISABLE
		A_canx->CCCR &= ~(1 << 9);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 9);
#endif

#if CAN_EDGE_FILTERING == CAN_FILTERING_DISABLE
		A_canx->CCCR &= ~(1 << 13);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 13);
#endif

#if CAN_EXCEPTION_HANDLING == CAN_EXCEPTION_ENABLE
		A_canx->CCCR &= ~(1 << 12);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 12);
#endif

#if CAN_BUS_MONITORING == CAN_BUS_MONITORING_DISABLE
		A_canx->CCCR &= ~(1 << 5);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	f023 0220 	bic.w	r2, r3, #32
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 5);
#endif

#if CAN_OPERATION_MODE == CAN_MODE_NORMAL_OPERATION
		A_canx->CCCR &= ~(1 << 2);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	f023 0204 	bic.w	r2, r3, #4
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	619a      	str	r2, [r3, #24]
#else
		A_canx->CCCR |= (1 << 2);
#endif

	/* Timing Configuration */
	u32 L_timing = 0;
 8004faa:	2300      	movs	r3, #0
 8004fac:	61bb      	str	r3, [r7, #24]
	L_timing |= (3 << 25);		// 3 is default value for NSJW (Nominal (re)synchronization jump width)
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 8004fb4:	61bb      	str	r3, [r7, #24]
	// L_timing |= (0 << 16);		// 0 is the default value for NBRP (Bit rate prescaler)
	L_timing |= (10 << 8);		// 10 is the default value for NTSEG1
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 8004fbc:	61bb      	str	r3, [r7, #24]
	L_timing |= (3 << 0);		// 3 is the default value for NTSEG2
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	f043 0303 	orr.w	r3, r3, #3
 8004fc4:	61bb      	str	r3, [r7, #24]
	 * for 125kb  (8us)	 BRB = 8
	 * for 250kb  (4us)  BRB = 4
	 * for 500kb  (2us)  BRB = 2
	 * for 1000kb (1us)  BRB = 1
	 * */
	L_timing |= (CAN_BAUD_RATE << 16);
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8004fcc:	61bb      	str	r3, [r7, #24]

	A_canx->NBTP = L_timing;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	61da      	str	r2, [r3, #28]

	/* Receiver Configuration */
	if(A_rxConfig->nonMatchingFrames == CAN_RX_ACCEPT_FIFO0){
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d108      	bne.n	8004fee <CAN_voidInit+0xe6>
		A_canx->RXGFC &= ~(0b11 << 4);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fe2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004fec:	e01c      	b.n	8005028 <CAN_voidInit+0x120>
	}
	else if(A_rxConfig->nonMatchingFrames == CAN_RX_ACCEPT_FIFO1){
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d110      	bne.n	8005018 <CAN_voidInit+0x110>
		A_canx->RXGFC &= ~(0b11 << 4);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ffc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		A_canx->RXGFC |= (1 << 4);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800500c:	f043 0210 	orr.w	r2, r3, #16
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8005016:	e007      	b.n	8005028 <CAN_voidInit+0x120>
	}
	else{	// Reject
		A_canx->RXGFC |= (0b11 << 4);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800501e:	f043 0230 	orr.w	r2, r3, #48	; 0x30
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}

	if(A_rxConfig->FIFO0_Mode == CAN_RX_FIFO_BLOCKING)
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	785b      	ldrb	r3, [r3, #1]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d108      	bne.n	8005042 <CAN_voidInit+0x13a>
		A_canx->RXGFC &= ~(1 << 9);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005036:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8005040:	e007      	b.n	8005052 <CAN_voidInit+0x14a>
	else	// Overwrite
		A_canx->RXGFC |= (1 << 9);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005048:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	if(A_rxConfig->FIFO1_Mode == CAN_RX_FIFO_BLOCKING)
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	789b      	ldrb	r3, [r3, #2]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d108      	bne.n	800506c <CAN_voidInit+0x164>
			A_canx->RXGFC &= ~(1 << 8);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005060:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800506a:	e007      	b.n	800507c <CAN_voidInit+0x174>
		else
			A_canx->RXGFC |= (1 << 8);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005072:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	A_canx->RXGFC &= ~(0b11111 << 16);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005082:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	A_canx->RXGFC |= ((A_rxConfig->FIFO0_numberOfIDs + A_rxConfig->FIFO1_numberOfIDs) << 16);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	78d2      	ldrb	r2, [r2, #3]
 8005096:	4611      	mov	r1, r2
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	7912      	ldrb	r2, [r2, #4]
 800509c:	440a      	add	r2, r1
 800509e:	0412      	lsls	r2, r2, #16
 80050a0:	431a      	orrs	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	/* Flush SRAM */
	u32 pointer;
	pointer = (u32)L_msg;
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	623b      	str	r3, [r7, #32]
	for(u8 i = 0; i < 212; i++){
 80050ac:	2300      	movs	r3, #0
 80050ae:	77fb      	strb	r3, [r7, #31]
 80050b0:	e008      	b.n	80050c4 <CAN_voidInit+0x1bc>
		*(u32 *)(pointer) = 0x00000000U;
 80050b2:	6a3b      	ldr	r3, [r7, #32]
 80050b4:	2200      	movs	r2, #0
 80050b6:	601a      	str	r2, [r3, #0]
		pointer += 4;
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	3304      	adds	r3, #4
 80050bc:	623b      	str	r3, [r7, #32]
	for(u8 i = 0; i < 212; i++){
 80050be:	7ffb      	ldrb	r3, [r7, #31]
 80050c0:	3301      	adds	r3, #1
 80050c2:	77fb      	strb	r3, [r7, #31]
 80050c4:	7ffb      	ldrb	r3, [r7, #31]
 80050c6:	2bd3      	cmp	r3, #211	; 0xd3
 80050c8:	d9f3      	bls.n	80050b2 <CAN_voidInit+0x1aa>
	}

	/* Store The IDs */
	u32 L_temp;
	u8 L_idIndex = 0;
 80050ca:	2300      	movs	r3, #0
 80050cc:	77bb      	strb	r3, [r7, #30]
	for(u8 i = 0; i < A_rxConfig->FIFO0_numberOfIDs; i++){
 80050ce:	2300      	movs	r3, #0
 80050d0:	777b      	strb	r3, [r7, #29]
 80050d2:	e023      	b.n	800511c <CAN_voidInit+0x214>
		L_temp = A_rxConfig->FIFO0_IDs[i];			// SID1
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	7f7b      	ldrb	r3, [r7, #29]
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	617b      	str	r3, [r7, #20]
		L_temp |= (A_rxConfig->FIFO0_IDs[i] << 16);	// SID2
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	689a      	ldr	r2, [r3, #8]
 80050e6:	7f7b      	ldrb	r3, [r7, #29]
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	041b      	lsls	r3, r3, #16
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	617b      	str	r3, [r7, #20]
		L_temp |= (1 << 27);				// Store in FIFO0 (if filter matches)
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050fc:	617b      	str	r3, [r7, #20]
		L_temp |= (1 << 30);				// 01: Dual ID filter for SFID1 or SFID2
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005104:	617b      	str	r3, [r7, #20]

		L_msg->standardID[L_idIndex++] = L_temp;
 8005106:	7fbb      	ldrb	r3, [r7, #30]
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	77ba      	strb	r2, [r7, #30]
 800510c:	4619      	mov	r1, r3
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	for(u8 i = 0; i < A_rxConfig->FIFO0_numberOfIDs; i++){
 8005116:	7f7b      	ldrb	r3, [r7, #29]
 8005118:	3301      	adds	r3, #1
 800511a:	777b      	strb	r3, [r7, #29]
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	78db      	ldrb	r3, [r3, #3]
 8005120:	7f7a      	ldrb	r2, [r7, #29]
 8005122:	429a      	cmp	r2, r3
 8005124:	d3d6      	bcc.n	80050d4 <CAN_voidInit+0x1cc>
	}

	for(u8 i = 0; i < A_rxConfig->FIFO1_numberOfIDs; i++){
 8005126:	2300      	movs	r3, #0
 8005128:	773b      	strb	r3, [r7, #28]
 800512a:	e023      	b.n	8005174 <CAN_voidInit+0x26c>
		L_temp = A_rxConfig->FIFO1_IDs[i];			// SID1
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	68da      	ldr	r2, [r3, #12]
 8005130:	7f3b      	ldrb	r3, [r7, #28]
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4413      	add	r3, r2
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	617b      	str	r3, [r7, #20]
		L_temp |= (A_rxConfig->FIFO1_IDs[i] << 16);	// SID2
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	7f3b      	ldrb	r3, [r7, #28]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	041b      	lsls	r3, r3, #16
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	4313      	orrs	r3, r2
 800514c:	617b      	str	r3, [r7, #20]
		L_temp |= (1 << 28);				// Store in FIFO1 (if filter matches)
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005154:	617b      	str	r3, [r7, #20]
		L_temp |= (1 << 30);				// 01: Dual ID filter for SFID1 or SFID2
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800515c:	617b      	str	r3, [r7, #20]

		L_msg->standardID[L_idIndex++] = L_temp;
 800515e:	7fbb      	ldrb	r3, [r7, #30]
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	77ba      	strb	r2, [r7, #30]
 8005164:	4619      	mov	r1, r3
 8005166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	for(u8 i = 0; i < A_rxConfig->FIFO1_numberOfIDs; i++){
 800516e:	7f3b      	ldrb	r3, [r7, #28]
 8005170:	3301      	adds	r3, #1
 8005172:	773b      	strb	r3, [r7, #28]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	791b      	ldrb	r3, [r3, #4]
 8005178:	7f3a      	ldrb	r2, [r7, #28]
 800517a:	429a      	cmp	r2, r3
 800517c:	d3d6      	bcc.n	800512c <CAN_voidInit+0x224>
	}

	/* Transmitter Configuration */
	if(A_txConfig->bufferType == CAN_TX_BUFFER_FIFO)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	785b      	ldrb	r3, [r3, #1]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d114      	bne.n	80051b0 <CAN_voidInit+0x2a8>
		A_canx->TXBC &= ~(1 << 24);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800518c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8005196:	e013      	b.n	80051c0 <CAN_voidInit+0x2b8>
 8005198:	40006400 	.word	0x40006400
 800519c:	4000a400 	.word	0x4000a400
 80051a0:	40006800 	.word	0x40006800
 80051a4:	4000a800 	.word	0x4000a800
 80051a8:	40006c00 	.word	0x40006c00
 80051ac:	4000ac00 	.word	0x4000ac00
	else // Queue FIFO
		A_canx->TXBC |= (1 << 24);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80051b6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	if(A_txConfig->transmitPause == CAN_TX_PAUSE_DISABLE)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d106      	bne.n	80051d6 <CAN_voidInit+0x2ce>
		A_canx->CCCR &= ~(1 << 14);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	619a      	str	r2, [r3, #24]
 80051d4:	e005      	b.n	80051e2 <CAN_voidInit+0x2da>
	else
		A_canx->CCCR |= (1 << 14);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	619a      	str	r2, [r3, #24]

	if (A_txConfig->automaticTransmission == CAN_AUTOMATIC_TRANSMISSION_ENABLE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	789b      	ldrb	r3, [r3, #2]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d106      	bne.n	80051f8 <CAN_voidInit+0x2f0>
		A_canx->CCCR &= ~(1 << 6);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	619a      	str	r2, [r3, #24]
 80051f6:	e005      	b.n	8005204 <CAN_voidInit+0x2fc>
	else
		A_canx->CCCR |= (1 << 6);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	619a      	str	r2, [r3, #24]

	/* Exit Initialization and Enter Normal mode */
	A_canx->CCCR &= ~(1 << 1);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	f023 0202 	bic.w	r2, r3, #2
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	619a      	str	r2, [r3, #24]
	A_canx->CCCR &= ~(1 << 0);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	f023 0201 	bic.w	r2, r3, #1
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	619a      	str	r2, [r3, #24]
}
 800521c:	bf00      	nop
 800521e:	372c      	adds	r7, #44	; 0x2c
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <CAN_voidReceiveDataFrame>:

void CAN_voidReceiveDataFrame(CAN_RegMap_t* A_canx, CAN_Frame_t* A_frame, u8 A_fifox)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	4613      	mov	r3, r2
 8005234:	71fb      	strb	r3, [r7, #7]
	CAN_MSG_SRAM_t* L_msg;
	if(A_canx == CAN1)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	4a98      	ldr	r2, [pc, #608]	; (800549c <CAN_voidReceiveDataFrame+0x274>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d102      	bne.n	8005244 <CAN_voidReceiveDataFrame+0x1c>
		L_msg = CAN1_MESSAGES;
 800523e:	4b98      	ldr	r3, [pc, #608]	; (80054a0 <CAN_voidReceiveDataFrame+0x278>)
 8005240:	617b      	str	r3, [r7, #20]
 8005242:	e00c      	b.n	800525e <CAN_voidReceiveDataFrame+0x36>
	else if(A_canx == CAN2)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4a97      	ldr	r2, [pc, #604]	; (80054a4 <CAN_voidReceiveDataFrame+0x27c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d102      	bne.n	8005252 <CAN_voidReceiveDataFrame+0x2a>
		L_msg = CAN2_MESSAGES;
 800524c:	4b96      	ldr	r3, [pc, #600]	; (80054a8 <CAN_voidReceiveDataFrame+0x280>)
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	e005      	b.n	800525e <CAN_voidReceiveDataFrame+0x36>
	else if(A_canx == CAN3)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4a95      	ldr	r2, [pc, #596]	; (80054ac <CAN_voidReceiveDataFrame+0x284>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d101      	bne.n	800525e <CAN_voidReceiveDataFrame+0x36>
			L_msg = CAN3_MESSAGES;
 800525a:	4b95      	ldr	r3, [pc, #596]	; (80054b0 <CAN_voidReceiveDataFrame+0x288>)
 800525c:	617b      	str	r3, [r7, #20]

	if(A_fifox == 0)
 800525e:	79fb      	ldrb	r3, [r7, #7]
 8005260:	2b00      	cmp	r3, #0
 8005262:	f040 8085 	bne.w	8005370 <CAN_voidReceiveDataFrame+0x148>
	{
		u8 L_getIndex = (u8)((A_canx->RXF0S & (0b11 << 8)) >> 8);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800526c:	0a1b      	lsrs	r3, r3, #8
 800526e:	b2db      	uxtb	r3, r3
 8005270:	f003 0303 	and.w	r3, r3, #3
 8005274:	743b      	strb	r3, [r7, #16]

		A_frame->ide = ((L_msg->RxFIFO0[L_getIndex].ID >> 30) & 1);
 8005276:	7c3a      	ldrb	r2, [r7, #16]
 8005278:	6979      	ldr	r1, [r7, #20]
 800527a:	4613      	mov	r3, r2
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	4413      	add	r3, r2
 8005280:	00db      	lsls	r3, r3, #3
 8005282:	440b      	add	r3, r1
 8005284:	33b0      	adds	r3, #176	; 0xb0
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	0f9b      	lsrs	r3, r3, #30
 800528a:	b2db      	uxtb	r3, r3
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	b2da      	uxtb	r2, r3
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	719a      	strb	r2, [r3, #6]
		A_frame->rtr = ((L_msg->RxFIFO0[L_getIndex].ID >> 29) & 1);
 8005296:	7c3a      	ldrb	r2, [r7, #16]
 8005298:	6979      	ldr	r1, [r7, #20]
 800529a:	4613      	mov	r3, r2
 800529c:	00db      	lsls	r3, r3, #3
 800529e:	4413      	add	r3, r2
 80052a0:	00db      	lsls	r3, r3, #3
 80052a2:	440b      	add	r3, r1
 80052a4:	33b0      	adds	r3, #176	; 0xb0
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	0f5b      	lsrs	r3, r3, #29
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	b2da      	uxtb	r2, r3
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	715a      	strb	r2, [r3, #5]

		if(A_frame->ide == CAN_FRAME_STANDARD_ID)
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	799b      	ldrb	r3, [r3, #6]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10e      	bne.n	80052dc <CAN_voidReceiveDataFrame+0xb4>
			A_frame->id = (L_msg->RxFIFO0[L_getIndex].ID >> 18) & (0b11111111111);
 80052be:	7c3a      	ldrb	r2, [r7, #16]
 80052c0:	6979      	ldr	r1, [r7, #20]
 80052c2:	4613      	mov	r3, r2
 80052c4:	00db      	lsls	r3, r3, #3
 80052c6:	4413      	add	r3, r2
 80052c8:	00db      	lsls	r3, r3, #3
 80052ca:	440b      	add	r3, r1
 80052cc:	33b0      	adds	r3, #176	; 0xb0
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	0c9b      	lsrs	r3, r3, #18
 80052d2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	e00c      	b.n	80052f6 <CAN_voidReceiveDataFrame+0xce>
		else
			A_frame->id = L_msg->RxFIFO0[L_getIndex].ID & (0x1FFFFFFF);
 80052dc:	7c3a      	ldrb	r2, [r7, #16]
 80052de:	6979      	ldr	r1, [r7, #20]
 80052e0:	4613      	mov	r3, r2
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	4413      	add	r3, r2
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	440b      	add	r3, r1
 80052ea:	33b0      	adds	r3, #176	; 0xb0
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	601a      	str	r2, [r3, #0]

		if(A_frame->rtr == CAN_FRAME_DATA)
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	795b      	ldrb	r3, [r3, #5]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d133      	bne.n	8005366 <CAN_voidReceiveDataFrame+0x13e>
		{
			A_frame->dlc = (u8)((L_msg->RxFIFO0[L_getIndex].DLC >> 16) & (0b1111));
 80052fe:	7c3a      	ldrb	r2, [r7, #16]
 8005300:	6979      	ldr	r1, [r7, #20]
 8005302:	4613      	mov	r3, r2
 8005304:	00db      	lsls	r3, r3, #3
 8005306:	4413      	add	r3, r2
 8005308:	00db      	lsls	r3, r3, #3
 800530a:	440b      	add	r3, r1
 800530c:	33b4      	adds	r3, #180	; 0xb4
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	0c1b      	lsrs	r3, r3, #16
 8005312:	b2db      	uxtb	r3, r3
 8005314:	f003 030f 	and.w	r3, r3, #15
 8005318:	b2da      	uxtb	r2, r3
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	711a      	strb	r2, [r3, #4]
			for(u8 i = 0; i < A_frame->dlc; i++)
 800531e:	2300      	movs	r3, #0
 8005320:	74fb      	strb	r3, [r7, #19]
 8005322:	e01b      	b.n	800535c <CAN_voidReceiveDataFrame+0x134>
				A_frame->data[i] = ((L_msg->RxFIFO0[L_getIndex].data[i/4] >> (8*(i%4))) & (0xFF));
 8005324:	7c3a      	ldrb	r2, [r7, #16]
 8005326:	7cfb      	ldrb	r3, [r7, #19]
 8005328:	089b      	lsrs	r3, r3, #2
 800532a:	b2db      	uxtb	r3, r3
 800532c:	4618      	mov	r0, r3
 800532e:	6979      	ldr	r1, [r7, #20]
 8005330:	4613      	mov	r3, r2
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	4413      	add	r3, r2
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	4403      	add	r3, r0
 800533a:	332e      	adds	r3, #46	; 0x2e
 800533c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8005340:	7cfb      	ldrb	r3, [r7, #19]
 8005342:	f003 0303 	and.w	r3, r3, #3
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	40da      	lsrs	r2, r3
 800534a:	7cfb      	ldrb	r3, [r7, #19]
 800534c:	b2d1      	uxtb	r1, r2
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	4413      	add	r3, r2
 8005352:	460a      	mov	r2, r1
 8005354:	71da      	strb	r2, [r3, #7]
			for(u8 i = 0; i < A_frame->dlc; i++)
 8005356:	7cfb      	ldrb	r3, [r7, #19]
 8005358:	3301      	adds	r3, #1
 800535a:	74fb      	strb	r3, [r7, #19]
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	791b      	ldrb	r3, [r3, #4]
 8005360:	7cfa      	ldrb	r2, [r7, #19]
 8005362:	429a      	cmp	r2, r3
 8005364:	d3de      	bcc.n	8005324 <CAN_voidReceiveDataFrame+0xfc>
		}

		// Acknowledge Reading
		A_canx->RXF0A = L_getIndex;
 8005366:	7c3a      	ldrb	r2, [r7, #16]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		}

		// Acknowledge Reading
		A_canx->RXF1A |= (1 << L_getIndex);
	}
}
 800536e:	e08f      	b.n	8005490 <CAN_voidReceiveDataFrame+0x268>
		u8 L_getIndex = (u8)((A_canx->RXF1S & (0b11 << 8)) >> 8);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005376:	0a1b      	lsrs	r3, r3, #8
 8005378:	b2db      	uxtb	r3, r3
 800537a:	f003 0303 	and.w	r3, r3, #3
 800537e:	747b      	strb	r3, [r7, #17]
		A_frame->ide = ((L_msg->RxFIFO1[L_getIndex].ID >> 30) & 1);
 8005380:	7c7a      	ldrb	r2, [r7, #17]
 8005382:	6979      	ldr	r1, [r7, #20]
 8005384:	4613      	mov	r3, r2
 8005386:	00db      	lsls	r3, r3, #3
 8005388:	4413      	add	r3, r2
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	440b      	add	r3, r1
 800538e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	0f9b      	lsrs	r3, r3, #30
 8005396:	b2db      	uxtb	r3, r3
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	b2da      	uxtb	r2, r3
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	719a      	strb	r2, [r3, #6]
		A_frame->rtr = ((L_msg->RxFIFO1[L_getIndex].ID >> 29) & 1);
 80053a2:	7c7a      	ldrb	r2, [r7, #17]
 80053a4:	6979      	ldr	r1, [r7, #20]
 80053a6:	4613      	mov	r3, r2
 80053a8:	00db      	lsls	r3, r3, #3
 80053aa:	4413      	add	r3, r2
 80053ac:	00db      	lsls	r3, r3, #3
 80053ae:	440b      	add	r3, r1
 80053b0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	0f5b      	lsrs	r3, r3, #29
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	715a      	strb	r2, [r3, #5]
		if(A_frame->ide == CAN_FRAME_STANDARD_ID)
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	799b      	ldrb	r3, [r3, #6]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10f      	bne.n	80053ec <CAN_voidReceiveDataFrame+0x1c4>
			A_frame->id = (L_msg->RxFIFO1[L_getIndex].ID >> 18) & (0b11111111111);
 80053cc:	7c7a      	ldrb	r2, [r7, #17]
 80053ce:	6979      	ldr	r1, [r7, #20]
 80053d0:	4613      	mov	r3, r2
 80053d2:	00db      	lsls	r3, r3, #3
 80053d4:	4413      	add	r3, r2
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	440b      	add	r3, r1
 80053da:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	0c9b      	lsrs	r3, r3, #18
 80053e2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	e00d      	b.n	8005408 <CAN_voidReceiveDataFrame+0x1e0>
			A_frame->id = L_msg->RxFIFO1[L_getIndex].ID & (0x1FFFFFFF);
 80053ec:	7c7a      	ldrb	r2, [r7, #17]
 80053ee:	6979      	ldr	r1, [r7, #20]
 80053f0:	4613      	mov	r3, r2
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	4413      	add	r3, r2
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	440b      	add	r3, r1
 80053fa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	601a      	str	r2, [r3, #0]
		if(A_frame->rtr == CAN_FRAME_DATA)
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	795b      	ldrb	r3, [r3, #5]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d134      	bne.n	800547a <CAN_voidReceiveDataFrame+0x252>
			A_frame->dlc = (u8)((L_msg->RxFIFO1[L_getIndex].DLC >> 16) & (0b1111));
 8005410:	7c7a      	ldrb	r2, [r7, #17]
 8005412:	6979      	ldr	r1, [r7, #20]
 8005414:	4613      	mov	r3, r2
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	4413      	add	r3, r2
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	440b      	add	r3, r1
 800541e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	0c1b      	lsrs	r3, r3, #16
 8005426:	b2db      	uxtb	r3, r3
 8005428:	f003 030f 	and.w	r3, r3, #15
 800542c:	b2da      	uxtb	r2, r3
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	711a      	strb	r2, [r3, #4]
			for(u8 i = 0; i < A_frame->dlc; i++)
 8005432:	2300      	movs	r3, #0
 8005434:	74bb      	strb	r3, [r7, #18]
 8005436:	e01b      	b.n	8005470 <CAN_voidReceiveDataFrame+0x248>
				A_frame->data[i] = ((L_msg->RxFIFO1[L_getIndex].data[i/4] >> (8*(i%4))) & (0xFF));
 8005438:	7c7a      	ldrb	r2, [r7, #17]
 800543a:	7cbb      	ldrb	r3, [r7, #18]
 800543c:	089b      	lsrs	r3, r3, #2
 800543e:	b2db      	uxtb	r3, r3
 8005440:	4618      	mov	r0, r3
 8005442:	6979      	ldr	r1, [r7, #20]
 8005444:	4613      	mov	r3, r2
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	4413      	add	r3, r2
 800544a:	005b      	lsls	r3, r3, #1
 800544c:	4403      	add	r3, r0
 800544e:	3364      	adds	r3, #100	; 0x64
 8005450:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8005454:	7cbb      	ldrb	r3, [r7, #18]
 8005456:	f003 0303 	and.w	r3, r3, #3
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	40da      	lsrs	r2, r3
 800545e:	7cbb      	ldrb	r3, [r7, #18]
 8005460:	b2d1      	uxtb	r1, r2
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	4413      	add	r3, r2
 8005466:	460a      	mov	r2, r1
 8005468:	71da      	strb	r2, [r3, #7]
			for(u8 i = 0; i < A_frame->dlc; i++)
 800546a:	7cbb      	ldrb	r3, [r7, #18]
 800546c:	3301      	adds	r3, #1
 800546e:	74bb      	strb	r3, [r7, #18]
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	791b      	ldrb	r3, [r3, #4]
 8005474:	7cba      	ldrb	r2, [r7, #18]
 8005476:	429a      	cmp	r2, r3
 8005478:	d3de      	bcc.n	8005438 <CAN_voidReceiveDataFrame+0x210>
		A_canx->RXF1A |= (1 << L_getIndex);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005480:	7c7a      	ldrb	r2, [r7, #17]
 8005482:	2101      	movs	r1, #1
 8005484:	fa01 f202 	lsl.w	r2, r1, r2
 8005488:	431a      	orrs	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 8005490:	bf00      	nop
 8005492:	371c      	adds	r7, #28
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	40006400 	.word	0x40006400
 80054a0:	4000a400 	.word	0x4000a400
 80054a4:	40006800 	.word	0x40006800
 80054a8:	4000a800 	.word	0x4000a800
 80054ac:	40006c00 	.word	0x40006c00
 80054b0:	4000ac00 	.word	0x4000ac00

080054b4 <CAN_u8GetReceivedMessagesCount>:

u8 CAN_u8GetReceivedMessagesCount(CAN_RegMap_t* A_canx, u8 A_fifox)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	460b      	mov	r3, r1
 80054be:	70fb      	strb	r3, [r7, #3]
	u8 L_result;
	if(A_fifox == CAN_RX_FIFO0)
 80054c0:	78fb      	ldrb	r3, [r7, #3]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d107      	bne.n	80054d6 <CAN_u8GetReceivedMessagesCount+0x22>
		L_result = (u8)(A_canx->RXF0S & (0b1111 << 0));
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	f003 030f 	and.w	r3, r3, #15
 80054d2:	73fb      	strb	r3, [r7, #15]
 80054d4:	e006      	b.n	80054e4 <CAN_u8GetReceivedMessagesCount+0x30>
	else
		L_result = (u8)(A_canx->RXF1S & (0b1111 << 0));
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	f003 030f 	and.w	r3, r3, #15
 80054e2:	73fb      	strb	r3, [r7, #15]
	return L_result;
 80054e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
	...

080054f4 <CAN_voidSendDataFrame>:
		L_result = (A_canx->RXF1S & (1 << 24)) >> 24;
	return L_result;
}

void CAN_voidSendDataFrame(CAN_RegMap_t* A_canx, CAN_Frame_t* A_frame)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b089      	sub	sp, #36	; 0x24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
	CAN_MSG_SRAM_t* L_msg;
	if(A_canx == CAN1)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a54      	ldr	r2, [pc, #336]	; (8005654 <CAN_voidSendDataFrame+0x160>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d102      	bne.n	800550c <CAN_voidSendDataFrame+0x18>
		L_msg = CAN1_MESSAGES;
 8005506:	4b54      	ldr	r3, [pc, #336]	; (8005658 <CAN_voidSendDataFrame+0x164>)
 8005508:	61fb      	str	r3, [r7, #28]
 800550a:	e00c      	b.n	8005526 <CAN_voidSendDataFrame+0x32>
	else if(A_canx == CAN2)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a53      	ldr	r2, [pc, #332]	; (800565c <CAN_voidSendDataFrame+0x168>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d102      	bne.n	800551a <CAN_voidSendDataFrame+0x26>
		L_msg = CAN2_MESSAGES;
 8005514:	4b52      	ldr	r3, [pc, #328]	; (8005660 <CAN_voidSendDataFrame+0x16c>)
 8005516:	61fb      	str	r3, [r7, #28]
 8005518:	e005      	b.n	8005526 <CAN_voidSendDataFrame+0x32>
	else if(A_canx == CAN3)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a51      	ldr	r2, [pc, #324]	; (8005664 <CAN_voidSendDataFrame+0x170>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d101      	bne.n	8005526 <CAN_voidSendDataFrame+0x32>
			L_msg = CAN3_MESSAGES;
 8005522:	4b51      	ldr	r3, [pc, #324]	; (8005668 <CAN_voidSendDataFrame+0x174>)
 8005524:	61fb      	str	r3, [r7, #28]

	// Define the put index
	u8 L_putIndex = (u8)((A_canx->TXFQS >> 16) & 0b11);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800552c:	0c1b      	lsrs	r3, r3, #16
 800552e:	b2db      	uxtb	r3, r3
 8005530:	f003 0303 	and.w	r3, r3, #3
 8005534:	73bb      	strb	r3, [r7, #14]

	// write the message
	u32 L_tmp = 0;
 8005536:	2300      	movs	r3, #0
 8005538:	61bb      	str	r3, [r7, #24]
	if(A_frame->ide == CAN_FRAME_EXTENDED_ID){
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	799b      	ldrb	r3, [r3, #6]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d107      	bne.n	8005552 <CAN_voidSendDataFrame+0x5e>
		L_tmp = A_frame->id;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	61bb      	str	r3, [r7, #24]
		L_tmp |= (1 << 30); // XTD bit
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800554e:	61bb      	str	r3, [r7, #24]
 8005550:	e003      	b.n	800555a <CAN_voidSendDataFrame+0x66>
	}
	else{
		L_tmp = A_frame->id << 18;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	049b      	lsls	r3, r3, #18
 8005558:	61bb      	str	r3, [r7, #24]
	}
	if(A_frame->rtr == CAN_FRAME_REMOTE){
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	795b      	ldrb	r3, [r3, #5]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d106      	bne.n	8005570 <CAN_voidSendDataFrame+0x7c>
		L_tmp |= (1 << 29);
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005568:	61bb      	str	r3, [r7, #24]
		A_frame->dlc = 0;
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2200      	movs	r2, #0
 800556e:	711a      	strb	r2, [r3, #4]
	}
	L_msg->TxBuffer[L_putIndex].ID = L_tmp;
 8005570:	7bba      	ldrb	r2, [r7, #14]
 8005572:	69f9      	ldr	r1, [r7, #28]
 8005574:	4613      	mov	r3, r2
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	4413      	add	r3, r2
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	440b      	add	r3, r1
 800557e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005582:	69ba      	ldr	r2, [r7, #24]
 8005584:	601a      	str	r2, [r3, #0]
	L_msg->TxBuffer[L_putIndex].DLC &= ~(1 << 23); // Don't store event
	L_msg->TxBuffer[L_putIndex].DLC &= ~(1 << 21); // Classic Can
	L_msg->TxBuffer[L_putIndex].DLC &= ~(1 << 20); // No bit rate switching
*/

	L_msg->TxBuffer[L_putIndex].DLC = (A_frame->dlc << 16); // write DLC
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	791b      	ldrb	r3, [r3, #4]
 800558a:	041b      	lsls	r3, r3, #16
 800558c:	7bba      	ldrb	r2, [r7, #14]
 800558e:	4618      	mov	r0, r3
 8005590:	69f9      	ldr	r1, [r7, #28]
 8005592:	4613      	mov	r3, r2
 8005594:	00db      	lsls	r3, r3, #3
 8005596:	4413      	add	r3, r2
 8005598:	00db      	lsls	r3, r3, #3
 800559a:	440b      	add	r3, r1
 800559c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80055a0:	6018      	str	r0, [r3, #0]

	u32 data0 = 0;
 80055a2:	2300      	movs	r3, #0
 80055a4:	617b      	str	r3, [r7, #20]
	u32 data1 = 0;
 80055a6:	2300      	movs	r3, #0
 80055a8:	613b      	str	r3, [r7, #16]
	for(u8 i = 0; i < A_frame->dlc; i++)
 80055aa:	2300      	movs	r3, #0
 80055ac:	73fb      	strb	r3, [r7, #15]
 80055ae:	e024      	b.n	80055fa <CAN_voidSendDataFrame+0x106>
	{
		 if(i < 4)
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
 80055b2:	2b03      	cmp	r3, #3
 80055b4:	d80f      	bhi.n	80055d6 <CAN_voidSendDataFrame+0xe2>
			 data0 |= (u32)(A_frame->data[i] << (8 * (i%4)));
 80055b6:	7bfb      	ldrb	r3, [r7, #15]
 80055b8:	683a      	ldr	r2, [r7, #0]
 80055ba:	4413      	add	r3, r2
 80055bc:	79db      	ldrb	r3, [r3, #7]
 80055be:	461a      	mov	r2, r3
 80055c0:	7bfb      	ldrb	r3, [r7, #15]
 80055c2:	f003 0303 	and.w	r3, r3, #3
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	fa02 f303 	lsl.w	r3, r2, r3
 80055cc:	461a      	mov	r2, r3
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	617b      	str	r3, [r7, #20]
 80055d4:	e00e      	b.n	80055f4 <CAN_voidSendDataFrame+0x100>
		 else
			 data1 |= (u32)(A_frame->data[i] << (8 * (i%4)));
 80055d6:	7bfb      	ldrb	r3, [r7, #15]
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	4413      	add	r3, r2
 80055dc:	79db      	ldrb	r3, [r3, #7]
 80055de:	461a      	mov	r2, r3
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
 80055e2:	f003 0303 	and.w	r3, r3, #3
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ec:	461a      	mov	r2, r3
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	613b      	str	r3, [r7, #16]
	for(u8 i = 0; i < A_frame->dlc; i++)
 80055f4:	7bfb      	ldrb	r3, [r7, #15]
 80055f6:	3301      	adds	r3, #1
 80055f8:	73fb      	strb	r3, [r7, #15]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	791b      	ldrb	r3, [r3, #4]
 80055fe:	7bfa      	ldrb	r2, [r7, #15]
 8005600:	429a      	cmp	r2, r3
 8005602:	d3d5      	bcc.n	80055b0 <CAN_voidSendDataFrame+0xbc>
	}
	L_msg->TxBuffer[L_putIndex].data[0] = data0;
 8005604:	7bba      	ldrb	r2, [r7, #14]
 8005606:	69f9      	ldr	r1, [r7, #28]
 8005608:	4613      	mov	r3, r2
 800560a:	00db      	lsls	r3, r3, #3
 800560c:	4413      	add	r3, r2
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	440b      	add	r3, r1
 8005612:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	601a      	str	r2, [r3, #0]
	L_msg->TxBuffer[L_putIndex].data[1] = data1;
 800561a:	7bba      	ldrb	r2, [r7, #14]
 800561c:	69f9      	ldr	r1, [r7, #28]
 800561e:	4613      	mov	r3, r2
 8005620:	00db      	lsls	r3, r3, #3
 8005622:	4413      	add	r3, r2
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	440b      	add	r3, r1
 8005628:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	601a      	str	r2, [r3, #0]

	// Request Transmission
	A_canx->TXBAR |= (1 << L_putIndex);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005636:	7bba      	ldrb	r2, [r7, #14]
 8005638:	2101      	movs	r1, #1
 800563a:	fa01 f202 	lsl.w	r2, r1, r2
 800563e:	431a      	orrs	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

	// Wait for transmission to be done
	//while(! ((A_canx->TXBTO >> L_putIndex) & 1) );
}
 8005646:	bf00      	nop
 8005648:	3724      	adds	r7, #36	; 0x24
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	40006400 	.word	0x40006400
 8005658:	4000a400 	.word	0x4000a400
 800565c:	40006800 	.word	0x40006800
 8005660:	4000a800 	.word	0x4000a800
 8005664:	40006c00 	.word	0x40006c00
 8005668:	4000ac00 	.word	0x4000ac00

0800566c <GPIO_voidSetPinMode>:
/************************************************************/
static void GPIO_voidSetPinPUPD(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8PullU_D);
static void GPIO_voidAltFunc(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8AltFunc);

static void GPIO_voidSetPinMode(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8Mode)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	4603      	mov	r3, r0
 8005674:	71fb      	strb	r3, [r7, #7]
 8005676:	460b      	mov	r3, r1
 8005678:	71bb      	strb	r3, [r7, #6]
 800567a:	4613      	mov	r3, r2
 800567c:	717b      	strb	r3, [r7, #5]
	GPIO_RegMap_t *GPIOx = NULL;
 800567e:	2300      	movs	r3, #0
 8005680:	60fb      	str	r3, [r7, #12]
	switch(A_u8PortID)
 8005682:	79fb      	ldrb	r3, [r7, #7]
 8005684:	2b06      	cmp	r3, #6
 8005686:	d827      	bhi.n	80056d8 <GPIO_voidSetPinMode+0x6c>
 8005688:	a201      	add	r2, pc, #4	; (adr r2, 8005690 <GPIO_voidSetPinMode+0x24>)
 800568a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568e:	bf00      	nop
 8005690:	080056ad 	.word	0x080056ad
 8005694:	080056b5 	.word	0x080056b5
 8005698:	080056bb 	.word	0x080056bb
 800569c:	080056c1 	.word	0x080056c1
 80056a0:	080056c7 	.word	0x080056c7
 80056a4:	080056cd 	.word	0x080056cd
 80056a8:	080056d3 	.word	0x080056d3
	{
	case GPIO_PORTA:
		GPIOx = GPIOA;
 80056ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056b0:	60fb      	str	r3, [r7, #12]
		break;
 80056b2:	e012      	b.n	80056da <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTB:
		GPIOx = GPIOB;
 80056b4:	4b16      	ldr	r3, [pc, #88]	; (8005710 <GPIO_voidSetPinMode+0xa4>)
 80056b6:	60fb      	str	r3, [r7, #12]
		break;
 80056b8:	e00f      	b.n	80056da <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTC:
		GPIOx = GPIOC;
 80056ba:	4b16      	ldr	r3, [pc, #88]	; (8005714 <GPIO_voidSetPinMode+0xa8>)
 80056bc:	60fb      	str	r3, [r7, #12]
		break;
 80056be:	e00c      	b.n	80056da <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTD:
		GPIOx = GPIOD;
 80056c0:	4b15      	ldr	r3, [pc, #84]	; (8005718 <GPIO_voidSetPinMode+0xac>)
 80056c2:	60fb      	str	r3, [r7, #12]
		break;
 80056c4:	e009      	b.n	80056da <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTE:
		GPIOx = GPIOE;
 80056c6:	4b15      	ldr	r3, [pc, #84]	; (800571c <GPIO_voidSetPinMode+0xb0>)
 80056c8:	60fb      	str	r3, [r7, #12]
		break;
 80056ca:	e006      	b.n	80056da <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTF:
		GPIOx = GPIOF;
 80056cc:	4b14      	ldr	r3, [pc, #80]	; (8005720 <GPIO_voidSetPinMode+0xb4>)
 80056ce:	60fb      	str	r3, [r7, #12]
		break;
 80056d0:	e003      	b.n	80056da <GPIO_voidSetPinMode+0x6e>
	case GPIO_PORTG:
		GPIOx = GPIOG;
 80056d2:	4b14      	ldr	r3, [pc, #80]	; (8005724 <GPIO_voidSetPinMode+0xb8>)
 80056d4:	60fb      	str	r3, [r7, #12]
		break;
 80056d6:	e000      	b.n	80056da <GPIO_voidSetPinMode+0x6e>
	default:
		/* Port ID out of range */
		break;
 80056d8:	bf00      	nop
	}
	GPIOx->MODER &= ~(0b11<<(2*A_u8PinNo));
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	79ba      	ldrb	r2, [r7, #6]
 80056e0:	0052      	lsls	r2, r2, #1
 80056e2:	2103      	movs	r1, #3
 80056e4:	fa01 f202 	lsl.w	r2, r1, r2
 80056e8:	43d2      	mvns	r2, r2
 80056ea:	401a      	ands	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	601a      	str	r2, [r3, #0]
	GPIOx->MODER |= (A_u8Mode<<(2*A_u8PinNo));
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	7979      	ldrb	r1, [r7, #5]
 80056f6:	79ba      	ldrb	r2, [r7, #6]
 80056f8:	0052      	lsls	r2, r2, #1
 80056fa:	fa01 f202 	lsl.w	r2, r1, r2
 80056fe:	431a      	orrs	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	601a      	str	r2, [r3, #0]
}
 8005704:	bf00      	nop
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	48000400 	.word	0x48000400
 8005714:	48000800 	.word	0x48000800
 8005718:	48000c00 	.word	0x48000c00
 800571c:	48001000 	.word	0x48001000
 8005720:	48001400 	.word	0x48001400
 8005724:	48001800 	.word	0x48001800

08005728 <GPIO_voidSetPinOutput_typ_spd>:
static void GPIO_voidSetPinOutput_typ_spd(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8Output_t, u8 A_u8OutputSpeed)
{
 8005728:	b490      	push	{r4, r7}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	4604      	mov	r4, r0
 8005730:	4608      	mov	r0, r1
 8005732:	4611      	mov	r1, r2
 8005734:	461a      	mov	r2, r3
 8005736:	4623      	mov	r3, r4
 8005738:	71fb      	strb	r3, [r7, #7]
 800573a:	4603      	mov	r3, r0
 800573c:	71bb      	strb	r3, [r7, #6]
 800573e:	460b      	mov	r3, r1
 8005740:	717b      	strb	r3, [r7, #5]
 8005742:	4613      	mov	r3, r2
 8005744:	713b      	strb	r3, [r7, #4]
	GPIO_RegMap_t *GPIOx = NULL;
 8005746:	2300      	movs	r3, #0
 8005748:	60fb      	str	r3, [r7, #12]
	switch(A_u8PortID)
 800574a:	79fb      	ldrb	r3, [r7, #7]
 800574c:	2b06      	cmp	r3, #6
 800574e:	d827      	bhi.n	80057a0 <GPIO_voidSetPinOutput_typ_spd+0x78>
 8005750:	a201      	add	r2, pc, #4	; (adr r2, 8005758 <GPIO_voidSetPinOutput_typ_spd+0x30>)
 8005752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005756:	bf00      	nop
 8005758:	08005775 	.word	0x08005775
 800575c:	0800577d 	.word	0x0800577d
 8005760:	08005783 	.word	0x08005783
 8005764:	08005789 	.word	0x08005789
 8005768:	0800578f 	.word	0x0800578f
 800576c:	08005795 	.word	0x08005795
 8005770:	0800579b 	.word	0x0800579b
	{
	case GPIO_PORTA:
		GPIOx = GPIOA;
 8005774:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005778:	60fb      	str	r3, [r7, #12]
		break;
 800577a:	e012      	b.n	80057a2 <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTB:
		GPIOx = GPIOB;
 800577c:	4b23      	ldr	r3, [pc, #140]	; (800580c <GPIO_voidSetPinOutput_typ_spd+0xe4>)
 800577e:	60fb      	str	r3, [r7, #12]
		break;
 8005780:	e00f      	b.n	80057a2 <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTC:
		GPIOx = GPIOC;
 8005782:	4b23      	ldr	r3, [pc, #140]	; (8005810 <GPIO_voidSetPinOutput_typ_spd+0xe8>)
 8005784:	60fb      	str	r3, [r7, #12]
		break;
 8005786:	e00c      	b.n	80057a2 <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTD:
		GPIOx = GPIOD;
 8005788:	4b22      	ldr	r3, [pc, #136]	; (8005814 <GPIO_voidSetPinOutput_typ_spd+0xec>)
 800578a:	60fb      	str	r3, [r7, #12]
		break;
 800578c:	e009      	b.n	80057a2 <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTE:
		GPIOx = GPIOE;
 800578e:	4b22      	ldr	r3, [pc, #136]	; (8005818 <GPIO_voidSetPinOutput_typ_spd+0xf0>)
 8005790:	60fb      	str	r3, [r7, #12]
		break;
 8005792:	e006      	b.n	80057a2 <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTF:
		GPIOx = GPIOF;
 8005794:	4b21      	ldr	r3, [pc, #132]	; (800581c <GPIO_voidSetPinOutput_typ_spd+0xf4>)
 8005796:	60fb      	str	r3, [r7, #12]
		break;
 8005798:	e003      	b.n	80057a2 <GPIO_voidSetPinOutput_typ_spd+0x7a>
	case GPIO_PORTG:
		GPIOx = GPIOG;
 800579a:	4b21      	ldr	r3, [pc, #132]	; (8005820 <GPIO_voidSetPinOutput_typ_spd+0xf8>)
 800579c:	60fb      	str	r3, [r7, #12]
		break;
 800579e:	e000      	b.n	80057a2 <GPIO_voidSetPinOutput_typ_spd+0x7a>
	default:
		/* Port ID out of range */
		break;
 80057a0:	bf00      	nop
	}
	if(A_u8Output_t == GPIO_OT_PUSHPULL)
 80057a2:	797b      	ldrb	r3, [r7, #5]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10a      	bne.n	80057be <GPIO_voidSetPinOutput_typ_spd+0x96>
	{
		/* Set pin type */
		CLR_BIT(GPIOx->OTYPER,A_u8PinNo);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	79ba      	ldrb	r2, [r7, #6]
 80057ae:	2101      	movs	r1, #1
 80057b0:	fa01 f202 	lsl.w	r2, r1, r2
 80057b4:	43d2      	mvns	r2, r2
 80057b6:	401a      	ands	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	605a      	str	r2, [r3, #4]
 80057bc:	e00b      	b.n	80057d6 <GPIO_voidSetPinOutput_typ_spd+0xae>

	}else if(A_u8Output_t == GPIO_OT_OPEN_DRAIN)
 80057be:	797b      	ldrb	r3, [r7, #5]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d108      	bne.n	80057d6 <GPIO_voidSetPinOutput_typ_spd+0xae>
	{
		SET_BIT(GPIOx->OTYPER,A_u8PinNo);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	79ba      	ldrb	r2, [r7, #6]
 80057ca:	2101      	movs	r1, #1
 80057cc:	fa01 f202 	lsl.w	r2, r1, r2
 80057d0:	431a      	orrs	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	605a      	str	r2, [r3, #4]
	}
	/* Set pin speed */
	GPIOx->OSPEEDR &= ~(0b11<<(2*A_u8PinNo));
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	79ba      	ldrb	r2, [r7, #6]
 80057dc:	0052      	lsls	r2, r2, #1
 80057de:	2103      	movs	r1, #3
 80057e0:	fa01 f202 	lsl.w	r2, r1, r2
 80057e4:	43d2      	mvns	r2, r2
 80057e6:	401a      	ands	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	609a      	str	r2, [r3, #8]
	GPIOx->OSPEEDR |= (A_u8OutputSpeed<<(2*A_u8PinNo));
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	7939      	ldrb	r1, [r7, #4]
 80057f2:	79ba      	ldrb	r2, [r7, #6]
 80057f4:	0052      	lsls	r2, r2, #1
 80057f6:	fa01 f202 	lsl.w	r2, r1, r2
 80057fa:	431a      	orrs	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	609a      	str	r2, [r3, #8]
}
 8005800:	bf00      	nop
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bc90      	pop	{r4, r7}
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	48000400 	.word	0x48000400
 8005810:	48000800 	.word	0x48000800
 8005814:	48000c00 	.word	0x48000c00
 8005818:	48001000 	.word	0x48001000
 800581c:	48001400 	.word	0x48001400
 8005820:	48001800 	.word	0x48001800

08005824 <GPIO_voidSetPinValue>:
void GPIO_voidSetPinValue(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8PinValue)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	4603      	mov	r3, r0
 800582c:	71fb      	strb	r3, [r7, #7]
 800582e:	460b      	mov	r3, r1
 8005830:	71bb      	strb	r3, [r7, #6]
 8005832:	4613      	mov	r3, r2
 8005834:	717b      	strb	r3, [r7, #5]
	GPIO_RegMap_t *GPIOx = NULL;
 8005836:	2300      	movs	r3, #0
 8005838:	60fb      	str	r3, [r7, #12]
	switch(A_u8PortID)
 800583a:	79fb      	ldrb	r3, [r7, #7]
 800583c:	2b06      	cmp	r3, #6
 800583e:	d827      	bhi.n	8005890 <GPIO_voidSetPinValue+0x6c>
 8005840:	a201      	add	r2, pc, #4	; (adr r2, 8005848 <GPIO_voidSetPinValue+0x24>)
 8005842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005846:	bf00      	nop
 8005848:	08005865 	.word	0x08005865
 800584c:	0800586d 	.word	0x0800586d
 8005850:	08005873 	.word	0x08005873
 8005854:	08005879 	.word	0x08005879
 8005858:	0800587f 	.word	0x0800587f
 800585c:	08005885 	.word	0x08005885
 8005860:	0800588b 	.word	0x0800588b
	{
	case GPIO_PORTA:
		GPIOx = GPIOA;
 8005864:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005868:	60fb      	str	r3, [r7, #12]
		break;
 800586a:	e012      	b.n	8005892 <GPIO_voidSetPinValue+0x6e>
	case GPIO_PORTB:
		GPIOx = GPIOB;
 800586c:	4b19      	ldr	r3, [pc, #100]	; (80058d4 <GPIO_voidSetPinValue+0xb0>)
 800586e:	60fb      	str	r3, [r7, #12]
		break;
 8005870:	e00f      	b.n	8005892 <GPIO_voidSetPinValue+0x6e>
	case GPIO_PORTC:
		GPIOx = GPIOC;
 8005872:	4b19      	ldr	r3, [pc, #100]	; (80058d8 <GPIO_voidSetPinValue+0xb4>)
 8005874:	60fb      	str	r3, [r7, #12]
		break;
 8005876:	e00c      	b.n	8005892 <GPIO_voidSetPinValue+0x6e>
	case GPIO_PORTD:
		GPIOx = GPIOD;
 8005878:	4b18      	ldr	r3, [pc, #96]	; (80058dc <GPIO_voidSetPinValue+0xb8>)
 800587a:	60fb      	str	r3, [r7, #12]
		break;
 800587c:	e009      	b.n	8005892 <GPIO_voidSetPinValue+0x6e>
	case GPIO_PORTE:
		GPIOx = GPIOE;
 800587e:	4b18      	ldr	r3, [pc, #96]	; (80058e0 <GPIO_voidSetPinValue+0xbc>)
 8005880:	60fb      	str	r3, [r7, #12]
		break;
 8005882:	e006      	b.n	8005892 <GPIO_voidSetPinValue+0x6e>
	case GPIO_PORTF:
		GPIOx = GPIOF;
 8005884:	4b17      	ldr	r3, [pc, #92]	; (80058e4 <GPIO_voidSetPinValue+0xc0>)
 8005886:	60fb      	str	r3, [r7, #12]
		break;
 8005888:	e003      	b.n	8005892 <GPIO_voidSetPinValue+0x6e>
	case GPIO_PORTG:
		GPIOx = GPIOG;
 800588a:	4b17      	ldr	r3, [pc, #92]	; (80058e8 <GPIO_voidSetPinValue+0xc4>)
 800588c:	60fb      	str	r3, [r7, #12]
		break;
 800588e:	e000      	b.n	8005892 <GPIO_voidSetPinValue+0x6e>
	default:
		/* Port ID out of range */
		break;
 8005890:	bf00      	nop
	}
	if(A_u8PinValue == GPIO_VALUE_HIGH)
 8005892:	797b      	ldrb	r3, [r7, #5]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d109      	bne.n	80058ac <GPIO_voidSetPinValue+0x88>
	{
		SET_BIT(GPIOx->ODR,A_u8PinNo);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	79ba      	ldrb	r2, [r7, #6]
 800589e:	2101      	movs	r1, #1
 80058a0:	fa01 f202 	lsl.w	r2, r1, r2
 80058a4:	431a      	orrs	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	615a      	str	r2, [r3, #20]
	}
	else if(A_u8PinValue == GPIO_VALUE_LOW)
	{
		CLR_BIT(GPIOx->ODR,A_u8PinNo);
	}
}
 80058aa:	e00c      	b.n	80058c6 <GPIO_voidSetPinValue+0xa2>
	else if(A_u8PinValue == GPIO_VALUE_LOW)
 80058ac:	797b      	ldrb	r3, [r7, #5]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d109      	bne.n	80058c6 <GPIO_voidSetPinValue+0xa2>
		CLR_BIT(GPIOx->ODR,A_u8PinNo);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	79ba      	ldrb	r2, [r7, #6]
 80058b8:	2101      	movs	r1, #1
 80058ba:	fa01 f202 	lsl.w	r2, r1, r2
 80058be:	43d2      	mvns	r2, r2
 80058c0:	401a      	ands	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	615a      	str	r2, [r3, #20]
}
 80058c6:	bf00      	nop
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	48000400 	.word	0x48000400
 80058d8:	48000800 	.word	0x48000800
 80058dc:	48000c00 	.word	0x48000c00
 80058e0:	48001000 	.word	0x48001000
 80058e4:	48001400 	.word	0x48001400
 80058e8:	48001800 	.word	0x48001800

080058ec <GPIO_voidSetPinPUPD>:
static void GPIO_voidSetPinPUPD(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8PullU_D)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	4603      	mov	r3, r0
 80058f4:	71fb      	strb	r3, [r7, #7]
 80058f6:	460b      	mov	r3, r1
 80058f8:	71bb      	strb	r3, [r7, #6]
 80058fa:	4613      	mov	r3, r2
 80058fc:	717b      	strb	r3, [r7, #5]
	GPIO_RegMap_t *GPIOx = NULL;
 80058fe:	2300      	movs	r3, #0
 8005900:	60fb      	str	r3, [r7, #12]
	switch(A_u8PortID)
 8005902:	79fb      	ldrb	r3, [r7, #7]
 8005904:	2b06      	cmp	r3, #6
 8005906:	d827      	bhi.n	8005958 <GPIO_voidSetPinPUPD+0x6c>
 8005908:	a201      	add	r2, pc, #4	; (adr r2, 8005910 <GPIO_voidSetPinPUPD+0x24>)
 800590a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590e:	bf00      	nop
 8005910:	0800592d 	.word	0x0800592d
 8005914:	08005935 	.word	0x08005935
 8005918:	0800593b 	.word	0x0800593b
 800591c:	08005941 	.word	0x08005941
 8005920:	08005947 	.word	0x08005947
 8005924:	0800594d 	.word	0x0800594d
 8005928:	08005953 	.word	0x08005953
	{
	case GPIO_PORTA:
		GPIOx = GPIOA;
 800592c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005930:	60fb      	str	r3, [r7, #12]
		break;
 8005932:	e012      	b.n	800595a <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTB:
		GPIOx = GPIOB;
 8005934:	4b16      	ldr	r3, [pc, #88]	; (8005990 <GPIO_voidSetPinPUPD+0xa4>)
 8005936:	60fb      	str	r3, [r7, #12]
		break;
 8005938:	e00f      	b.n	800595a <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTC:
		GPIOx = GPIOC;
 800593a:	4b16      	ldr	r3, [pc, #88]	; (8005994 <GPIO_voidSetPinPUPD+0xa8>)
 800593c:	60fb      	str	r3, [r7, #12]
		break;
 800593e:	e00c      	b.n	800595a <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTD:
		GPIOx = GPIOD;
 8005940:	4b15      	ldr	r3, [pc, #84]	; (8005998 <GPIO_voidSetPinPUPD+0xac>)
 8005942:	60fb      	str	r3, [r7, #12]
		break;
 8005944:	e009      	b.n	800595a <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTE:
		GPIOx = GPIOE;
 8005946:	4b15      	ldr	r3, [pc, #84]	; (800599c <GPIO_voidSetPinPUPD+0xb0>)
 8005948:	60fb      	str	r3, [r7, #12]
		break;
 800594a:	e006      	b.n	800595a <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTF:
		GPIOx = GPIOF;
 800594c:	4b14      	ldr	r3, [pc, #80]	; (80059a0 <GPIO_voidSetPinPUPD+0xb4>)
 800594e:	60fb      	str	r3, [r7, #12]
		break;
 8005950:	e003      	b.n	800595a <GPIO_voidSetPinPUPD+0x6e>
	case GPIO_PORTG:
		GPIOx = GPIOG;
 8005952:	4b14      	ldr	r3, [pc, #80]	; (80059a4 <GPIO_voidSetPinPUPD+0xb8>)
 8005954:	60fb      	str	r3, [r7, #12]
		break;
 8005956:	e000      	b.n	800595a <GPIO_voidSetPinPUPD+0x6e>
	default:
		/* Port ID out of range */
		break;
 8005958:	bf00      	nop
	}
	GPIOx->PUPDR &= ~(0b11<<(2*A_u8PinNo));
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	79ba      	ldrb	r2, [r7, #6]
 8005960:	0052      	lsls	r2, r2, #1
 8005962:	2103      	movs	r1, #3
 8005964:	fa01 f202 	lsl.w	r2, r1, r2
 8005968:	43d2      	mvns	r2, r2
 800596a:	401a      	ands	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	60da      	str	r2, [r3, #12]
	GPIOx->PUPDR |= (A_u8PullU_D<<(2*A_u8PinNo));
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	7979      	ldrb	r1, [r7, #5]
 8005976:	79ba      	ldrb	r2, [r7, #6]
 8005978:	0052      	lsls	r2, r2, #1
 800597a:	fa01 f202 	lsl.w	r2, r1, r2
 800597e:	431a      	orrs	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	60da      	str	r2, [r3, #12]
}
 8005984:	bf00      	nop
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	48000400 	.word	0x48000400
 8005994:	48000800 	.word	0x48000800
 8005998:	48000c00 	.word	0x48000c00
 800599c:	48001000 	.word	0x48001000
 80059a0:	48001400 	.word	0x48001400
 80059a4:	48001800 	.word	0x48001800

080059a8 <GPIO_voidAltFunc>:
		break;
	}
	TOG_BIT(GPIOx->ODR,A_u8PinNo);
}
static void GPIO_voidAltFunc(u8 A_u8PortID, u8 A_u8PinNo, u8 A_u8AltFunc)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	4603      	mov	r3, r0
 80059b0:	71fb      	strb	r3, [r7, #7]
 80059b2:	460b      	mov	r3, r1
 80059b4:	71bb      	strb	r3, [r7, #6]
 80059b6:	4613      	mov	r3, r2
 80059b8:	717b      	strb	r3, [r7, #5]
	GPIO_RegMap_t *GPIOx = NULL;
 80059ba:	2300      	movs	r3, #0
 80059bc:	60fb      	str	r3, [r7, #12]
	switch(A_u8PortID)
 80059be:	79fb      	ldrb	r3, [r7, #7]
 80059c0:	2b06      	cmp	r3, #6
 80059c2:	d827      	bhi.n	8005a14 <GPIO_voidAltFunc+0x6c>
 80059c4:	a201      	add	r2, pc, #4	; (adr r2, 80059cc <GPIO_voidAltFunc+0x24>)
 80059c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ca:	bf00      	nop
 80059cc:	080059e9 	.word	0x080059e9
 80059d0:	080059f1 	.word	0x080059f1
 80059d4:	080059f7 	.word	0x080059f7
 80059d8:	080059fd 	.word	0x080059fd
 80059dc:	08005a03 	.word	0x08005a03
 80059e0:	08005a09 	.word	0x08005a09
 80059e4:	08005a0f 	.word	0x08005a0f
	{
	case GPIO_PORTA:
		GPIOx = GPIOA;
 80059e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059ec:	60fb      	str	r3, [r7, #12]
		break;
 80059ee:	e012      	b.n	8005a16 <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTB:
		GPIOx = GPIOB;
 80059f0:	4b24      	ldr	r3, [pc, #144]	; (8005a84 <GPIO_voidAltFunc+0xdc>)
 80059f2:	60fb      	str	r3, [r7, #12]
		break;
 80059f4:	e00f      	b.n	8005a16 <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTC:
		GPIOx = GPIOC;
 80059f6:	4b24      	ldr	r3, [pc, #144]	; (8005a88 <GPIO_voidAltFunc+0xe0>)
 80059f8:	60fb      	str	r3, [r7, #12]
		break;
 80059fa:	e00c      	b.n	8005a16 <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTD:
		GPIOx = GPIOD;
 80059fc:	4b23      	ldr	r3, [pc, #140]	; (8005a8c <GPIO_voidAltFunc+0xe4>)
 80059fe:	60fb      	str	r3, [r7, #12]
		break;
 8005a00:	e009      	b.n	8005a16 <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTE:
		GPIOx = GPIOE;
 8005a02:	4b23      	ldr	r3, [pc, #140]	; (8005a90 <GPIO_voidAltFunc+0xe8>)
 8005a04:	60fb      	str	r3, [r7, #12]
		break;
 8005a06:	e006      	b.n	8005a16 <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTF:
		GPIOx = GPIOF;
 8005a08:	4b22      	ldr	r3, [pc, #136]	; (8005a94 <GPIO_voidAltFunc+0xec>)
 8005a0a:	60fb      	str	r3, [r7, #12]
		break;
 8005a0c:	e003      	b.n	8005a16 <GPIO_voidAltFunc+0x6e>
	case GPIO_PORTG:
		GPIOx = GPIOG;
 8005a0e:	4b22      	ldr	r3, [pc, #136]	; (8005a98 <GPIO_voidAltFunc+0xf0>)
 8005a10:	60fb      	str	r3, [r7, #12]
		break;
 8005a12:	e000      	b.n	8005a16 <GPIO_voidAltFunc+0x6e>
	default:
		/* Port ID out of range */
		break;
 8005a14:	bf00      	nop
	}
	if(A_u8PinNo < 8)
 8005a16:	79bb      	ldrb	r3, [r7, #6]
 8005a18:	2b07      	cmp	r3, #7
 8005a1a:	d815      	bhi.n	8005a48 <GPIO_voidAltFunc+0xa0>
	{
		GPIOx->AFRL &= ~(0b1111<<(4*A_u8PinNo));
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	79ba      	ldrb	r2, [r7, #6]
 8005a22:	0092      	lsls	r2, r2, #2
 8005a24:	210f      	movs	r1, #15
 8005a26:	fa01 f202 	lsl.w	r2, r1, r2
 8005a2a:	43d2      	mvns	r2, r2
 8005a2c:	401a      	ands	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	621a      	str	r2, [r3, #32]
		GPIOx->AFRL |= (A_u8AltFunc<<(4*A_u8PinNo));
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	7979      	ldrb	r1, [r7, #5]
 8005a38:	79ba      	ldrb	r2, [r7, #6]
 8005a3a:	0092      	lsls	r2, r2, #2
 8005a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8005a40:	431a      	orrs	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	621a      	str	r2, [r3, #32]
	{
		GPIOx->AFRH &= ~(0b1111<<(4*(A_u8PinNo-8)));
		GPIOx->AFRH |= (A_u8AltFunc<<(4*(A_u8PinNo-8)));
	}

}
 8005a46:	e016      	b.n	8005a76 <GPIO_voidAltFunc+0xce>
		GPIOx->AFRH &= ~(0b1111<<(4*(A_u8PinNo-8)));
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	79ba      	ldrb	r2, [r7, #6]
 8005a4e:	3a08      	subs	r2, #8
 8005a50:	0092      	lsls	r2, r2, #2
 8005a52:	210f      	movs	r1, #15
 8005a54:	fa01 f202 	lsl.w	r2, r1, r2
 8005a58:	43d2      	mvns	r2, r2
 8005a5a:	401a      	ands	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	625a      	str	r2, [r3, #36]	; 0x24
		GPIOx->AFRH |= (A_u8AltFunc<<(4*(A_u8PinNo-8)));
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	7979      	ldrb	r1, [r7, #5]
 8005a66:	79ba      	ldrb	r2, [r7, #6]
 8005a68:	3a08      	subs	r2, #8
 8005a6a:	0092      	lsls	r2, r2, #2
 8005a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8005a70:	431a      	orrs	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005a76:	bf00      	nop
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	48000400 	.word	0x48000400
 8005a88:	48000800 	.word	0x48000800
 8005a8c:	48000c00 	.word	0x48000c00
 8005a90:	48001000 	.word	0x48001000
 8005a94:	48001400 	.word	0x48001400
 8005a98:	48001800 	.word	0x48001800

08005a9c <GPIO_voidInitPin>:
		break;
	}
	GPIOx->ODR ^= 0xFFFF;
}
void GPIO_voidInitPin(MGPIO_Config_t *A_xPin_Port_Config)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
	GPIO_voidSetPinMode(A_xPin_Port_Config->Port, A_xPin_Port_Config->Pin, A_xPin_Port_Config->Mode);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	7818      	ldrb	r0, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	7859      	ldrb	r1, [r3, #1]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	789b      	ldrb	r3, [r3, #2]
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	f7ff fddb 	bl	800566c <GPIO_voidSetPinMode>
	GPIO_voidSetPinOutput_typ_spd(A_xPin_Port_Config->Port, A_xPin_Port_Config->Pin, A_xPin_Port_Config->OutputType,A_xPin_Port_Config->OutputSpeed);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	7818      	ldrb	r0, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	7859      	ldrb	r1, [r3, #1]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	78da      	ldrb	r2, [r3, #3]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	791b      	ldrb	r3, [r3, #4]
 8005ac6:	f7ff fe2f 	bl	8005728 <GPIO_voidSetPinOutput_typ_spd>
	GPIO_voidSetPinPUPD(A_xPin_Port_Config->Port, A_xPin_Port_Config->Pin, A_xPin_Port_Config->InputPull);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	7818      	ldrb	r0, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	7859      	ldrb	r1, [r3, #1]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	795b      	ldrb	r3, [r3, #5]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	f7ff ff08 	bl	80058ec <GPIO_voidSetPinPUPD>
	GPIO_voidAltFunc(A_xPin_Port_Config->Port, A_xPin_Port_Config->Pin, A_xPin_Port_Config->AltFunc);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	7818      	ldrb	r0, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	7859      	ldrb	r1, [r3, #1]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	799b      	ldrb	r3, [r3, #6]
 8005ae8:	461a      	mov	r2, r3
 8005aea:	f7ff ff5d 	bl	80059a8 <GPIO_voidAltFunc>
}
 8005aee:	bf00      	nop
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
	...

08005af8 <RCC_voidInit>:

/****************************************************************************/
/*							Function Implementation							*/
/****************************************************************************/
void RCC_voidInit(void)
{
 8005af8:	b480      	push	{r7}
 8005afa:	af00      	add	r7, sp, #0
	/*Clear All Registers To Avoid Errors*/

	RCC->CR = 0x00000000;
 8005afc:	4b2f      	ldr	r3, [pc, #188]	; (8005bbc <RCC_voidInit+0xc4>)
 8005afe:	2200      	movs	r2, #0
 8005b00:	601a      	str	r2, [r3, #0]
	RCC->ICSCR = 0x00000000;
 8005b02:	4b2e      	ldr	r3, [pc, #184]	; (8005bbc <RCC_voidInit+0xc4>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	605a      	str	r2, [r3, #4]
	RCC->CFGR = 0x00000000;
 8005b08:	4b2c      	ldr	r3, [pc, #176]	; (8005bbc <RCC_voidInit+0xc4>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	609a      	str	r2, [r3, #8]
	RCC->PLLCFGR = 0x00000000;
 8005b0e:	4b2b      	ldr	r3, [pc, #172]	; (8005bbc <RCC_voidInit+0xc4>)
 8005b10:	2200      	movs	r2, #0
 8005b12:	60da      	str	r2, [r3, #12]
	RCC->BDCR = 0x00000000;
 8005b14:	4b29      	ldr	r3, [pc, #164]	; (8005bbc <RCC_voidInit+0xc4>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	RCC->CSR = 0x00000000;
 8005b1c:	4b27      	ldr	r3, [pc, #156]	; (8005bbc <RCC_voidInit+0xc4>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	RCC->CRRCR = 0x00000000;
 8005b24:	4b25      	ldr	r3, [pc, #148]	; (8005bbc <RCC_voidInit+0xc4>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	/*Turn HSI48 RC oscillator */
	RCC->CRRCR |=(RCC_HSI48<<0);
 8005b2c:	4b23      	ldr	r3, [pc, #140]	; (8005bbc <RCC_voidInit+0xc4>)
 8005b2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b32:	4a22      	ldr	r2, [pc, #136]	; (8005bbc <RCC_voidInit+0xc4>)
 8005b34:	f043 0301 	orr.w	r3, r3, #1
 8005b38:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	/*Turn on the different clocks*/
	RCC->CR |= (RCC_HSI_ON<<8);			//HSI Clock ON
 8005b3c:	4b1f      	ldr	r3, [pc, #124]	; (8005bbc <RCC_voidInit+0xc4>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a1e      	ldr	r2, [pc, #120]	; (8005bbc <RCC_voidInit+0xc4>)
 8005b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b46:	6013      	str	r3, [r2, #0]
	RCC->CR |= (RCC_HSIKER_ON<<9);		//HSIKER Clock ON
 8005b48:	4b1c      	ldr	r3, [pc, #112]	; (8005bbc <RCC_voidInit+0xc4>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a1b      	ldr	r2, [pc, #108]	; (8005bbc <RCC_voidInit+0xc4>)
 8005b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b52:	6013      	str	r3, [r2, #0]
	RCC->CR |= (RCC_HSE_ON<<16);		//HSE Clock ON
 8005b54:	4b19      	ldr	r3, [pc, #100]	; (8005bbc <RCC_voidInit+0xc4>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a18      	ldr	r2, [pc, #96]	; (8005bbc <RCC_voidInit+0xc4>)
 8005b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b5e:	6013      	str	r3, [r2, #0]
	RCC->CR |= (RCC_HSEBYP_ON<<18);		//HSE BYP ON
 8005b60:	4b16      	ldr	r3, [pc, #88]	; (8005bbc <RCC_voidInit+0xc4>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a15      	ldr	r2, [pc, #84]	; (8005bbc <RCC_voidInit+0xc4>)
 8005b66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b6a:	6013      	str	r3, [r2, #0]
	//RCC->CR |= (RCC_PLL_ON<<24);		//PLL Clock ON


	/*HSI Trimming Value Adjust*/
	RCC->ICSCR |= (RCC_HSITRIM_VAL<<24);
 8005b6c:	4b13      	ldr	r3, [pc, #76]	; (8005bbc <RCC_voidInit+0xc4>)
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	4a12      	ldr	r2, [pc, #72]	; (8005bbc <RCC_voidInit+0xc4>)
 8005b72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b76:	6053      	str	r3, [r2, #4]

	/*Select System Clock*/
	RCC->CFGR |= (RCC_SYSCLK_SEL<<0);
 8005b78:	4b10      	ldr	r3, [pc, #64]	; (8005bbc <RCC_voidInit+0xc4>)
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	4a0f      	ldr	r2, [pc, #60]	; (8005bbc <RCC_voidInit+0xc4>)
 8005b7e:	f043 0301 	orr.w	r3, r3, #1
 8005b82:	6093      	str	r3, [r2, #8]
	/*Select Micro-controller Output Clock*/
	RCC->CFGR |= (RCC_MCO_SEL<<24);
 8005b84:	4b0d      	ldr	r3, [pc, #52]	; (8005bbc <RCC_voidInit+0xc4>)
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	4a0c      	ldr	r2, [pc, #48]	; (8005bbc <RCC_voidInit+0xc4>)
 8005b8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b8e:	6093      	str	r3, [r2, #8]

	/*Select Micro-controller Output Prescaler*/
	RCC->CFGR |= (RCC_MCO_PRE<<28);
 8005b90:	4b0a      	ldr	r3, [pc, #40]	; (8005bbc <RCC_voidInit+0xc4>)
 8005b92:	4a0a      	ldr	r2, [pc, #40]	; (8005bbc <RCC_voidInit+0xc4>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	6093      	str	r3, [r2, #8]
	/*Select AHB Prescaler*/
	RCC->CFGR |= (RCC_AHB_PRE<<4);
 8005b98:	4b08      	ldr	r3, [pc, #32]	; (8005bbc <RCC_voidInit+0xc4>)
 8005b9a:	4a08      	ldr	r2, [pc, #32]	; (8005bbc <RCC_voidInit+0xc4>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	6093      	str	r3, [r2, #8]
	/*Select APB1 Prescaler*/
	RCC->CFGR |= (RCC_APB1_PRE<<8);
 8005ba0:	4b06      	ldr	r3, [pc, #24]	; (8005bbc <RCC_voidInit+0xc4>)
 8005ba2:	4a06      	ldr	r2, [pc, #24]	; (8005bbc <RCC_voidInit+0xc4>)
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	6093      	str	r3, [r2, #8]
	/*Select APB2 Prescaler*/
	RCC->CFGR |= (RCC_APB2_PRE<<11);
 8005ba8:	4b04      	ldr	r3, [pc, #16]	; (8005bbc <RCC_voidInit+0xc4>)
 8005baa:	4a04      	ldr	r2, [pc, #16]	; (8005bbc <RCC_voidInit+0xc4>)
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	6093      	str	r3, [r2, #8]



}
 8005bb0:	bf00      	nop
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	40021000 	.word	0x40021000

08005bc0 <RCC_voidPeripheralClockEnable>:
void RCC_voidPeripheralClockEnable(u8 A_u8BusName, RCC_Peripheral_t A_tPeripheral)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	460a      	mov	r2, r1
 8005bca:	71fb      	strb	r3, [r7, #7]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	71bb      	strb	r3, [r7, #6]
	switch(A_u8BusName)
 8005bd0:	79fb      	ldrb	r3, [r7, #7]
 8005bd2:	2b05      	cmp	r3, #5
 8005bd4:	d850      	bhi.n	8005c78 <RCC_voidPeripheralClockEnable+0xb8>
 8005bd6:	a201      	add	r2, pc, #4	; (adr r2, 8005bdc <RCC_voidPeripheralClockEnable+0x1c>)
 8005bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bdc:	08005bf5 	.word	0x08005bf5
 8005be0:	08005c0b 	.word	0x08005c0b
 8005be4:	08005c21 	.word	0x08005c21
 8005be8:	08005c37 	.word	0x08005c37
 8005bec:	08005c4d 	.word	0x08005c4d
 8005bf0:	08005c63 	.word	0x08005c63
	{
		case RCC_AHB1:
			SET_BIT(RCC->AHB1ENR, A_tPeripheral);
 8005bf4:	4b23      	ldr	r3, [pc, #140]	; (8005c84 <RCC_voidPeripheralClockEnable+0xc4>)
 8005bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bf8:	79ba      	ldrb	r2, [r7, #6]
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8005c00:	4611      	mov	r1, r2
 8005c02:	4a20      	ldr	r2, [pc, #128]	; (8005c84 <RCC_voidPeripheralClockEnable+0xc4>)
 8005c04:	430b      	orrs	r3, r1
 8005c06:	6493      	str	r3, [r2, #72]	; 0x48
			break;
 8005c08:	e036      	b.n	8005c78 <RCC_voidPeripheralClockEnable+0xb8>

		case RCC_AHB2:
			SET_BIT(RCC->AHB2ENR, A_tPeripheral);
 8005c0a:	4b1e      	ldr	r3, [pc, #120]	; (8005c84 <RCC_voidPeripheralClockEnable+0xc4>)
 8005c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c0e:	79ba      	ldrb	r2, [r7, #6]
 8005c10:	2101      	movs	r1, #1
 8005c12:	fa01 f202 	lsl.w	r2, r1, r2
 8005c16:	4611      	mov	r1, r2
 8005c18:	4a1a      	ldr	r2, [pc, #104]	; (8005c84 <RCC_voidPeripheralClockEnable+0xc4>)
 8005c1a:	430b      	orrs	r3, r1
 8005c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
			break;
 8005c1e:	e02b      	b.n	8005c78 <RCC_voidPeripheralClockEnable+0xb8>

		case RCC_AHB3:
			SET_BIT(RCC->AHB3ENR, A_tPeripheral);
 8005c20:	4b18      	ldr	r3, [pc, #96]	; (8005c84 <RCC_voidPeripheralClockEnable+0xc4>)
 8005c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c24:	79ba      	ldrb	r2, [r7, #6]
 8005c26:	2101      	movs	r1, #1
 8005c28:	fa01 f202 	lsl.w	r2, r1, r2
 8005c2c:	4611      	mov	r1, r2
 8005c2e:	4a15      	ldr	r2, [pc, #84]	; (8005c84 <RCC_voidPeripheralClockEnable+0xc4>)
 8005c30:	430b      	orrs	r3, r1
 8005c32:	6513      	str	r3, [r2, #80]	; 0x50
			break;
 8005c34:	e020      	b.n	8005c78 <RCC_voidPeripheralClockEnable+0xb8>

		case RCC_APB1_1:
			SET_BIT(RCC->APB1ENR1, A_tPeripheral);
 8005c36:	4b13      	ldr	r3, [pc, #76]	; (8005c84 <RCC_voidPeripheralClockEnable+0xc4>)
 8005c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c3a:	79ba      	ldrb	r2, [r7, #6]
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8005c42:	4611      	mov	r1, r2
 8005c44:	4a0f      	ldr	r2, [pc, #60]	; (8005c84 <RCC_voidPeripheralClockEnable+0xc4>)
 8005c46:	430b      	orrs	r3, r1
 8005c48:	6593      	str	r3, [r2, #88]	; 0x58
			break;
 8005c4a:	e015      	b.n	8005c78 <RCC_voidPeripheralClockEnable+0xb8>

		case RCC_APB1_2:
			SET_BIT(RCC->APB1ENR2, A_tPeripheral);
 8005c4c:	4b0d      	ldr	r3, [pc, #52]	; (8005c84 <RCC_voidPeripheralClockEnable+0xc4>)
 8005c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c50:	79ba      	ldrb	r2, [r7, #6]
 8005c52:	2101      	movs	r1, #1
 8005c54:	fa01 f202 	lsl.w	r2, r1, r2
 8005c58:	4611      	mov	r1, r2
 8005c5a:	4a0a      	ldr	r2, [pc, #40]	; (8005c84 <RCC_voidPeripheralClockEnable+0xc4>)
 8005c5c:	430b      	orrs	r3, r1
 8005c5e:	65d3      	str	r3, [r2, #92]	; 0x5c
			break;
 8005c60:	e00a      	b.n	8005c78 <RCC_voidPeripheralClockEnable+0xb8>

		case RCC_APB2:
			SET_BIT(RCC->APB2ENR, A_tPeripheral);
 8005c62:	4b08      	ldr	r3, [pc, #32]	; (8005c84 <RCC_voidPeripheralClockEnable+0xc4>)
 8005c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c66:	79ba      	ldrb	r2, [r7, #6]
 8005c68:	2101      	movs	r1, #1
 8005c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8005c6e:	4611      	mov	r1, r2
 8005c70:	4a04      	ldr	r2, [pc, #16]	; (8005c84 <RCC_voidPeripheralClockEnable+0xc4>)
 8005c72:	430b      	orrs	r3, r1
 8005c74:	6613      	str	r3, [r2, #96]	; 0x60
			break;
 8005c76:	bf00      	nop
	}
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	40021000 	.word	0x40021000

08005c88 <RCC_voidPeripheralClockCfg>:
			SET_BIT(RCC->APB2RSTR, A_tPeripheral);
			break;
	}
}
void RCC_voidPeripheralClockCfg(u8 A_u8RegName, RCC_Peripheral_Cfg_t A_tCfgPeripheral)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	4603      	mov	r3, r0
 8005c90:	460a      	mov	r2, r1
 8005c92:	71fb      	strb	r3, [r7, #7]
 8005c94:	4613      	mov	r3, r2
 8005c96:	71bb      	strb	r3, [r7, #6]
	switch(A_u8RegName)
 8005c98:	79fb      	ldrb	r3, [r7, #7]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d003      	beq.n	8005ca6 <RCC_voidPeripheralClockCfg+0x1e>
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	f000 80cd 	beq.w	8005e3e <RCC_voidPeripheralClockCfg+0x1b6>
					RCC->CCIPR2 |= (RCC_QSPI_CLK<<QSPI_Cfg);
					break;
			}
			break;
	}
}
 8005ca4:	e0e3      	b.n	8005e6e <RCC_voidPeripheralClockCfg+0x1e6>
			switch(A_tCfgPeripheral)
 8005ca6:	79bb      	ldrb	r3, [r7, #6]
 8005ca8:	2b1e      	cmp	r3, #30
 8005caa:	f200 80df 	bhi.w	8005e6c <RCC_voidPeripheralClockCfg+0x1e4>
 8005cae:	a201      	add	r2, pc, #4	; (adr r2, 8005cb4 <RCC_voidPeripheralClockCfg+0x2c>)
 8005cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb4:	08005d31 	.word	0x08005d31
 8005cb8:	08005e6d 	.word	0x08005e6d
 8005cbc:	08005d43 	.word	0x08005d43
 8005cc0:	08005e6d 	.word	0x08005e6d
 8005cc4:	08005d55 	.word	0x08005d55
 8005cc8:	08005e6d 	.word	0x08005e6d
 8005ccc:	08005d67 	.word	0x08005d67
 8005cd0:	08005e6d 	.word	0x08005e6d
 8005cd4:	08005d79 	.word	0x08005d79
 8005cd8:	08005e6d 	.word	0x08005e6d
 8005cdc:	08005d8b 	.word	0x08005d8b
 8005ce0:	08005e6d 	.word	0x08005e6d
 8005ce4:	08005d9d 	.word	0x08005d9d
 8005ce8:	08005e6d 	.word	0x08005e6d
 8005cec:	08005daf 	.word	0x08005daf
 8005cf0:	08005e6d 	.word	0x08005e6d
 8005cf4:	08005dc1 	.word	0x08005dc1
 8005cf8:	08005e6d 	.word	0x08005e6d
 8005cfc:	08005dd3 	.word	0x08005dd3
 8005d00:	08005e6d 	.word	0x08005e6d
 8005d04:	08005de1 	.word	0x08005de1
 8005d08:	08005e6d 	.word	0x08005e6d
 8005d0c:	08005def 	.word	0x08005def
 8005d10:	08005e6d 	.word	0x08005e6d
 8005d14:	08005dfd 	.word	0x08005dfd
 8005d18:	08005e6d 	.word	0x08005e6d
 8005d1c:	08005e0b 	.word	0x08005e0b
 8005d20:	08005e6d 	.word	0x08005e6d
 8005d24:	08005e19 	.word	0x08005e19
 8005d28:	08005e6d 	.word	0x08005e6d
 8005d2c:	08005e2b 	.word	0x08005e2b
					RCC->CCIPR |= (RCC_USART1_CLK<<USART1_Cfg);
 8005d30:	4b52      	ldr	r3, [pc, #328]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d36:	4a51      	ldr	r2, [pc, #324]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005d38:	f043 0301 	orr.w	r3, r3, #1
 8005d3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005d40:	e07c      	b.n	8005e3c <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_USART2_CLK<<USART2_Cfg);
 8005d42:	4b4e      	ldr	r3, [pc, #312]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d48:	4a4c      	ldr	r2, [pc, #304]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005d4a:	f043 0304 	orr.w	r3, r3, #4
 8005d4e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005d52:	e073      	b.n	8005e3c <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_USART3_CLK<<USART3_Cfg);
 8005d54:	4b49      	ldr	r3, [pc, #292]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5a:	4a48      	ldr	r2, [pc, #288]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005d5c:	f043 0310 	orr.w	r3, r3, #16
 8005d60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005d64:	e06a      	b.n	8005e3c <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_USART4_CLK<<USART4_Cfg);
 8005d66:	4b45      	ldr	r3, [pc, #276]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d6c:	4a43      	ldr	r2, [pc, #268]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005d6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d72:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005d76:	e061      	b.n	8005e3c <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_USART5_CLK<<USART5_Cfg);
 8005d78:	4b40      	ldr	r3, [pc, #256]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7e:	4a3f      	ldr	r2, [pc, #252]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005d88:	e058      	b.n	8005e3c <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_LPUSART_CLK<<LPUART1_Cfg);
 8005d8a:	4b3c      	ldr	r3, [pc, #240]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d90:	4a3a      	ldr	r2, [pc, #232]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d96:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005d9a:	e04f      	b.n	8005e3c <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_I2C1_CLK<<I2C1_Cfg);
 8005d9c:	4b37      	ldr	r3, [pc, #220]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da2:	4a36      	ldr	r2, [pc, #216]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005da4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005dac:	e046      	b.n	8005e3c <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_I2C2_CLK<<I2C2_Cfg);
 8005dae:	4b33      	ldr	r3, [pc, #204]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db4:	4a31      	ldr	r2, [pc, #196]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005db6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005dba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005dbe:	e03d      	b.n	8005e3c <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_I2C3_CLK<<I2C3_Cfg);
 8005dc0:	4b2e      	ldr	r3, [pc, #184]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc6:	4a2d      	ldr	r2, [pc, #180]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005dd0:	e034      	b.n	8005e3c <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_LPTIM1_CLK<<LPTIM1_Cfg);
 8005dd2:	4b2a      	ldr	r3, [pc, #168]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005dd4:	4a29      	ldr	r2, [pc, #164]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dda:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005dde:	e02d      	b.n	8005e3c <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_SAI1_CLK<<SAI1_Cfg);
 8005de0:	4b26      	ldr	r3, [pc, #152]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005de2:	4a26      	ldr	r2, [pc, #152]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005dec:	e026      	b.n	8005e3c <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_I2S23_CLK<<I2S23_Cfg);
 8005dee:	4b23      	ldr	r3, [pc, #140]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005df0:	4a22      	ldr	r2, [pc, #136]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005dfa:	e01f      	b.n	8005e3c <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_FDCAN_CLK<<FDCAN_Cfg);
 8005dfc:	4b1f      	ldr	r3, [pc, #124]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005dfe:	4a1f      	ldr	r2, [pc, #124]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005e08:	e018      	b.n	8005e3c <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_CLK48_CLK<<CLK48_Cfg);
 8005e0a:	4b1c      	ldr	r3, [pc, #112]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005e0c:	4a1b      	ldr	r2, [pc, #108]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e12:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005e16:	e011      	b.n	8005e3c <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_ADC12_CLK<<ADC12_Cfg);
 8005e18:	4b18      	ldr	r3, [pc, #96]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e1e:	4a17      	ldr	r2, [pc, #92]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005e20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005e28:	e008      	b.n	8005e3c <RCC_voidPeripheralClockCfg+0x1b4>
					RCC->CCIPR |= (RCC_ADC345_CLK<<ADC345_Cfg);
 8005e2a:	4b14      	ldr	r3, [pc, #80]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e30:	4a12      	ldr	r2, [pc, #72]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005e32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e36:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
					break;
 8005e3a:	bf00      	nop
			break;
 8005e3c:	e016      	b.n	8005e6c <RCC_voidPeripheralClockCfg+0x1e4>
			switch(A_tCfgPeripheral)
 8005e3e:	79bb      	ldrb	r3, [r7, #6]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d002      	beq.n	8005e4a <RCC_voidPeripheralClockCfg+0x1c2>
 8005e44:	2b14      	cmp	r3, #20
 8005e46:	d009      	beq.n	8005e5c <RCC_voidPeripheralClockCfg+0x1d4>
			break;
 8005e48:	e011      	b.n	8005e6e <RCC_voidPeripheralClockCfg+0x1e6>
					RCC->CCIPR2 |= (RCC_I2C4_CLK<<I2C4_Cfg);
 8005e4a:	4b0c      	ldr	r3, [pc, #48]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005e4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e50:	4a0a      	ldr	r2, [pc, #40]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005e52:	f043 0301 	orr.w	r3, r3, #1
 8005e56:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
					break;
 8005e5a:	e006      	b.n	8005e6a <RCC_voidPeripheralClockCfg+0x1e2>
					RCC->CCIPR2 |= (RCC_QSPI_CLK<<QSPI_Cfg);
 8005e5c:	4b07      	ldr	r3, [pc, #28]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005e5e:	4a07      	ldr	r2, [pc, #28]	; (8005e7c <RCC_voidPeripheralClockCfg+0x1f4>)
 8005e60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e64:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
					break;
 8005e68:	bf00      	nop
			break;
 8005e6a:	e000      	b.n	8005e6e <RCC_voidPeripheralClockCfg+0x1e6>
			break;
 8005e6c:	bf00      	nop
}
 8005e6e:	bf00      	nop
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	40021000 	.word	0x40021000

08005e80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005e8c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005e90:	f002 f8fc 	bl	800808c <USBD_static_malloc>
 8005e94:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d105      	bne.n	8005ea8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	e066      	b.n	8005f76 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	7c1b      	ldrb	r3, [r3, #16]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d119      	bne.n	8005eec <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005eb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ebc:	2202      	movs	r2, #2
 8005ebe:	2181      	movs	r1, #129	; 0x81
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f001 ff8a 	bl	8007dda <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005ecc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f001 ff80 	bl	8007dda <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2210      	movs	r2, #16
 8005ee6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005eea:	e016      	b.n	8005f1a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005eec:	2340      	movs	r3, #64	; 0x40
 8005eee:	2202      	movs	r2, #2
 8005ef0:	2181      	movs	r1, #129	; 0x81
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f001 ff71 	bl	8007dda <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005efe:	2340      	movs	r3, #64	; 0x40
 8005f00:	2202      	movs	r2, #2
 8005f02:	2101      	movs	r1, #1
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f001 ff68 	bl	8007dda <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2210      	movs	r2, #16
 8005f16:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005f1a:	2308      	movs	r3, #8
 8005f1c:	2203      	movs	r2, #3
 8005f1e:	2182      	movs	r1, #130	; 0x82
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f001 ff5a 	bl	8007dda <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	7c1b      	ldrb	r3, [r3, #16]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d109      	bne.n	8005f64 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f002 f82b 	bl	8007fb8 <USBD_LL_PrepareReceive>
 8005f62:	e007      	b.n	8005f74 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f6a:	2340      	movs	r3, #64	; 0x40
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f002 f822 	bl	8007fb8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b082      	sub	sp, #8
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
 8005f86:	460b      	mov	r3, r1
 8005f88:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005f8a:	2181      	movs	r1, #129	; 0x81
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f001 ff4a 	bl	8007e26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005f98:	2101      	movs	r1, #1
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f001 ff43 	bl	8007e26 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005fa8:	2182      	movs	r1, #130	; 0x82
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f001 ff3b 	bl	8007e26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00e      	beq.n	8005fe8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f002 f864 	bl	80080a8 <USBD_static_free>
    pdev->pClassData = NULL;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
	...

08005ff4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006004:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006006:	2300      	movs	r3, #0
 8006008:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800600a:	2300      	movs	r3, #0
 800600c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800600e:	2300      	movs	r3, #0
 8006010:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006018:	2303      	movs	r3, #3
 800601a:	e0af      	b.n	800617c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006024:	2b00      	cmp	r3, #0
 8006026:	d03f      	beq.n	80060a8 <USBD_CDC_Setup+0xb4>
 8006028:	2b20      	cmp	r3, #32
 800602a:	f040 809f 	bne.w	800616c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	88db      	ldrh	r3, [r3, #6]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d02e      	beq.n	8006094 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	b25b      	sxtb	r3, r3
 800603c:	2b00      	cmp	r3, #0
 800603e:	da16      	bge.n	800606e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	683a      	ldr	r2, [r7, #0]
 800604a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800604c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	88d2      	ldrh	r2, [r2, #6]
 8006052:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	88db      	ldrh	r3, [r3, #6]
 8006058:	2b07      	cmp	r3, #7
 800605a:	bf28      	it	cs
 800605c:	2307      	movcs	r3, #7
 800605e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	89fa      	ldrh	r2, [r7, #14]
 8006064:	4619      	mov	r1, r3
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f001 facf 	bl	800760a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800606c:	e085      	b.n	800617a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	785a      	ldrb	r2, [r3, #1]
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	88db      	ldrh	r3, [r3, #6]
 800607c:	b2da      	uxtb	r2, r3
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006084:	6939      	ldr	r1, [r7, #16]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	88db      	ldrh	r3, [r3, #6]
 800608a:	461a      	mov	r2, r3
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f001 fae8 	bl	8007662 <USBD_CtlPrepareRx>
      break;
 8006092:	e072      	b.n	800617a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	7850      	ldrb	r0, [r2, #1]
 80060a0:	2200      	movs	r2, #0
 80060a2:	6839      	ldr	r1, [r7, #0]
 80060a4:	4798      	blx	r3
      break;
 80060a6:	e068      	b.n	800617a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	785b      	ldrb	r3, [r3, #1]
 80060ac:	2b0b      	cmp	r3, #11
 80060ae:	d852      	bhi.n	8006156 <USBD_CDC_Setup+0x162>
 80060b0:	a201      	add	r2, pc, #4	; (adr r2, 80060b8 <USBD_CDC_Setup+0xc4>)
 80060b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b6:	bf00      	nop
 80060b8:	080060e9 	.word	0x080060e9
 80060bc:	08006165 	.word	0x08006165
 80060c0:	08006157 	.word	0x08006157
 80060c4:	08006157 	.word	0x08006157
 80060c8:	08006157 	.word	0x08006157
 80060cc:	08006157 	.word	0x08006157
 80060d0:	08006157 	.word	0x08006157
 80060d4:	08006157 	.word	0x08006157
 80060d8:	08006157 	.word	0x08006157
 80060dc:	08006157 	.word	0x08006157
 80060e0:	08006113 	.word	0x08006113
 80060e4:	0800613d 	.word	0x0800613d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b03      	cmp	r3, #3
 80060f2:	d107      	bne.n	8006104 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80060f4:	f107 030a 	add.w	r3, r7, #10
 80060f8:	2202      	movs	r2, #2
 80060fa:	4619      	mov	r1, r3
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f001 fa84 	bl	800760a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006102:	e032      	b.n	800616a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006104:	6839      	ldr	r1, [r7, #0]
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f001 fa0e 	bl	8007528 <USBD_CtlError>
            ret = USBD_FAIL;
 800610c:	2303      	movs	r3, #3
 800610e:	75fb      	strb	r3, [r7, #23]
          break;
 8006110:	e02b      	b.n	800616a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b03      	cmp	r3, #3
 800611c:	d107      	bne.n	800612e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800611e:	f107 030d 	add.w	r3, r7, #13
 8006122:	2201      	movs	r2, #1
 8006124:	4619      	mov	r1, r3
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f001 fa6f 	bl	800760a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800612c:	e01d      	b.n	800616a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800612e:	6839      	ldr	r1, [r7, #0]
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f001 f9f9 	bl	8007528 <USBD_CtlError>
            ret = USBD_FAIL;
 8006136:	2303      	movs	r3, #3
 8006138:	75fb      	strb	r3, [r7, #23]
          break;
 800613a:	e016      	b.n	800616a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b03      	cmp	r3, #3
 8006146:	d00f      	beq.n	8006168 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006148:	6839      	ldr	r1, [r7, #0]
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f001 f9ec 	bl	8007528 <USBD_CtlError>
            ret = USBD_FAIL;
 8006150:	2303      	movs	r3, #3
 8006152:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006154:	e008      	b.n	8006168 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006156:	6839      	ldr	r1, [r7, #0]
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f001 f9e5 	bl	8007528 <USBD_CtlError>
          ret = USBD_FAIL;
 800615e:	2303      	movs	r3, #3
 8006160:	75fb      	strb	r3, [r7, #23]
          break;
 8006162:	e002      	b.n	800616a <USBD_CDC_Setup+0x176>
          break;
 8006164:	bf00      	nop
 8006166:	e008      	b.n	800617a <USBD_CDC_Setup+0x186>
          break;
 8006168:	bf00      	nop
      }
      break;
 800616a:	e006      	b.n	800617a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800616c:	6839      	ldr	r1, [r7, #0]
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f001 f9da 	bl	8007528 <USBD_CtlError>
      ret = USBD_FAIL;
 8006174:	2303      	movs	r3, #3
 8006176:	75fb      	strb	r3, [r7, #23]
      break;
 8006178:	bf00      	nop
  }

  return (uint8_t)ret;
 800617a:	7dfb      	ldrb	r3, [r7, #23]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3718      	adds	r7, #24
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	460b      	mov	r3, r1
 800618e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006196:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d101      	bne.n	80061a6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e04f      	b.n	8006246 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061ac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80061ae:	78fa      	ldrb	r2, [r7, #3]
 80061b0:	6879      	ldr	r1, [r7, #4]
 80061b2:	4613      	mov	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4413      	add	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	440b      	add	r3, r1
 80061bc:	3318      	adds	r3, #24
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d029      	beq.n	8006218 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80061c4:	78fa      	ldrb	r2, [r7, #3]
 80061c6:	6879      	ldr	r1, [r7, #4]
 80061c8:	4613      	mov	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	440b      	add	r3, r1
 80061d2:	3318      	adds	r3, #24
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	78f9      	ldrb	r1, [r7, #3]
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	460b      	mov	r3, r1
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	440b      	add	r3, r1
 80061e0:	00db      	lsls	r3, r3, #3
 80061e2:	4403      	add	r3, r0
 80061e4:	3320      	adds	r3, #32
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80061ec:	fb01 f303 	mul.w	r3, r1, r3
 80061f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d110      	bne.n	8006218 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80061f6:	78fa      	ldrb	r2, [r7, #3]
 80061f8:	6879      	ldr	r1, [r7, #4]
 80061fa:	4613      	mov	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	440b      	add	r3, r1
 8006204:	3318      	adds	r3, #24
 8006206:	2200      	movs	r2, #0
 8006208:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800620a:	78f9      	ldrb	r1, [r7, #3]
 800620c:	2300      	movs	r3, #0
 800620e:	2200      	movs	r2, #0
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f001 feb0 	bl	8007f76 <USBD_LL_Transmit>
 8006216:	e015      	b.n	8006244 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	2200      	movs	r2, #0
 800621c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00b      	beq.n	8006244 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006240:	78fa      	ldrb	r2, [r7, #3]
 8006242:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b084      	sub	sp, #16
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
 8006256:	460b      	mov	r3, r1
 8006258:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006260:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800626c:	2303      	movs	r3, #3
 800626e:	e015      	b.n	800629c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006270:	78fb      	ldrb	r3, [r7, #3]
 8006272:	4619      	mov	r1, r3
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f001 fec0 	bl	8007ffa <USBD_LL_GetRxDataSize>
 800627a:	4602      	mov	r2, r0
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006296:	4611      	mov	r1, r2
 8006298:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062b2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e01b      	b.n	80062f6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d015      	beq.n	80062f4 <USBD_CDC_EP0_RxReady+0x50>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80062ce:	2bff      	cmp	r3, #255	; 0xff
 80062d0:	d010      	beq.n	80062f4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80062e0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80062e8:	b292      	uxth	r2, r2
 80062ea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	22ff      	movs	r2, #255	; 0xff
 80062f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
	...

08006300 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2243      	movs	r2, #67	; 0x43
 800630c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800630e:	4b03      	ldr	r3, [pc, #12]	; (800631c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006310:	4618      	mov	r0, r3
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr
 800631c:	200000b8 	.word	0x200000b8

08006320 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2243      	movs	r2, #67	; 0x43
 800632c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800632e:	4b03      	ldr	r3, [pc, #12]	; (800633c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006330:	4618      	mov	r0, r3
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	20000074 	.word	0x20000074

08006340 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2243      	movs	r2, #67	; 0x43
 800634c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800634e:	4b03      	ldr	r3, [pc, #12]	; (800635c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006350:	4618      	mov	r0, r3
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr
 800635c:	200000fc 	.word	0x200000fc

08006360 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	220a      	movs	r2, #10
 800636c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800636e:	4b03      	ldr	r3, [pc, #12]	; (800637c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006370:	4618      	mov	r0, r3
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	20000030 	.word	0x20000030

08006380 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006390:	2303      	movs	r3, #3
 8006392:	e004      	b.n	800639e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b087      	sub	sp, #28
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	60f8      	str	r0, [r7, #12]
 80063b2:	60b9      	str	r1, [r7, #8]
 80063b4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063bc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e008      	b.n	80063da <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	371c      	adds	r7, #28
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b085      	sub	sp, #20
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
 80063ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063f6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80063fe:	2303      	movs	r3, #3
 8006400:	e004      	b.n	800640c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	683a      	ldr	r2, [r7, #0]
 8006406:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3714      	adds	r7, #20
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006426:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006428:	2301      	movs	r3, #1
 800642a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006436:	2303      	movs	r3, #3
 8006438:	e01a      	b.n	8006470 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006440:	2b00      	cmp	r3, #0
 8006442:	d114      	bne.n	800646e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	2201      	movs	r2, #1
 8006448:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006462:	2181      	movs	r1, #129	; 0x81
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f001 fd86 	bl	8007f76 <USBD_LL_Transmit>

    ret = USBD_OK;
 800646a:	2300      	movs	r3, #0
 800646c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800646e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006486:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006492:	2303      	movs	r3, #3
 8006494:	e016      	b.n	80064c4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	7c1b      	ldrb	r3, [r3, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d109      	bne.n	80064b2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80064a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064a8:	2101      	movs	r1, #1
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f001 fd84 	bl	8007fb8 <USBD_LL_PrepareReceive>
 80064b0:	e007      	b.n	80064c2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80064b8:	2340      	movs	r3, #64	; 0x40
 80064ba:	2101      	movs	r1, #1
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f001 fd7b 	bl	8007fb8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b086      	sub	sp, #24
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	4613      	mov	r3, r2
 80064d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e01f      	b.n	8006524 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d003      	beq.n	800650a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2201      	movs	r2, #1
 800650e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	79fa      	ldrb	r2, [r7, #7]
 8006516:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f001 fbe3 	bl	8007ce4 <USBD_LL_Init>
 800651e:	4603      	mov	r3, r0
 8006520:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006522:	7dfb      	ldrb	r3, [r7, #23]
}
 8006524:	4618      	mov	r0, r3
 8006526:	3718      	adds	r7, #24
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006536:	2300      	movs	r3, #0
 8006538:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006540:	2303      	movs	r3, #3
 8006542:	e016      	b.n	8006572 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00b      	beq.n	8006570 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800655e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006560:	f107 020e 	add.w	r2, r7, #14
 8006564:	4610      	mov	r0, r2
 8006566:	4798      	blx	r3
 8006568:	4602      	mov	r2, r0
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b082      	sub	sp, #8
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f001 fc0e 	bl	8007da4 <USBD_LL_Start>
 8006588:	4603      	mov	r3, r0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3708      	adds	r7, #8
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006592:	b480      	push	{r7}
 8006594:	b083      	sub	sp, #12
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	460b      	mov	r3, r1
 80065b2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80065b4:	2303      	movs	r3, #3
 80065b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d009      	beq.n	80065d6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	78fa      	ldrb	r2, [r7, #3]
 80065cc:	4611      	mov	r1, r2
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	4798      	blx	r3
 80065d2:	4603      	mov	r3, r0
 80065d4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80065d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	460b      	mov	r3, r1
 80065ea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d007      	beq.n	8006606 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	78fa      	ldrb	r2, [r7, #3]
 8006600:	4611      	mov	r1, r2
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	4798      	blx	r3
  }

  return USBD_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3708      	adds	r7, #8
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006620:	6839      	ldr	r1, [r7, #0]
 8006622:	4618      	mov	r0, r3
 8006624:	f000 ff46 	bl	80074b4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006636:	461a      	mov	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006644:	f003 031f 	and.w	r3, r3, #31
 8006648:	2b02      	cmp	r3, #2
 800664a:	d01a      	beq.n	8006682 <USBD_LL_SetupStage+0x72>
 800664c:	2b02      	cmp	r3, #2
 800664e:	d822      	bhi.n	8006696 <USBD_LL_SetupStage+0x86>
 8006650:	2b00      	cmp	r3, #0
 8006652:	d002      	beq.n	800665a <USBD_LL_SetupStage+0x4a>
 8006654:	2b01      	cmp	r3, #1
 8006656:	d00a      	beq.n	800666e <USBD_LL_SetupStage+0x5e>
 8006658:	e01d      	b.n	8006696 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006660:	4619      	mov	r1, r3
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f9ee 	bl	8006a44 <USBD_StdDevReq>
 8006668:	4603      	mov	r3, r0
 800666a:	73fb      	strb	r3, [r7, #15]
      break;
 800666c:	e020      	b.n	80066b0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006674:	4619      	mov	r1, r3
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 fa52 	bl	8006b20 <USBD_StdItfReq>
 800667c:	4603      	mov	r3, r0
 800667e:	73fb      	strb	r3, [r7, #15]
      break;
 8006680:	e016      	b.n	80066b0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006688:	4619      	mov	r1, r3
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 fa91 	bl	8006bb2 <USBD_StdEPReq>
 8006690:	4603      	mov	r3, r0
 8006692:	73fb      	strb	r3, [r7, #15]
      break;
 8006694:	e00c      	b.n	80066b0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800669c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	4619      	mov	r1, r3
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f001 fbdd 	bl	8007e64 <USBD_LL_StallEP>
 80066aa:	4603      	mov	r3, r0
 80066ac:	73fb      	strb	r3, [r7, #15]
      break;
 80066ae:	bf00      	nop
  }

  return ret;
 80066b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b086      	sub	sp, #24
 80066be:	af00      	add	r7, sp, #0
 80066c0:	60f8      	str	r0, [r7, #12]
 80066c2:	460b      	mov	r3, r1
 80066c4:	607a      	str	r2, [r7, #4]
 80066c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80066c8:	7afb      	ldrb	r3, [r7, #11]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d138      	bne.n	8006740 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80066d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80066dc:	2b03      	cmp	r3, #3
 80066de:	d14a      	bne.n	8006776 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	689a      	ldr	r2, [r3, #8]
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d913      	bls.n	8006714 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	689a      	ldr	r2, [r3, #8]
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	1ad2      	subs	r2, r2, r3
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	68da      	ldr	r2, [r3, #12]
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	4293      	cmp	r3, r2
 8006704:	bf28      	it	cs
 8006706:	4613      	movcs	r3, r2
 8006708:	461a      	mov	r2, r3
 800670a:	6879      	ldr	r1, [r7, #4]
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 ffc5 	bl	800769c <USBD_CtlContinueRx>
 8006712:	e030      	b.n	8006776 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2b03      	cmp	r3, #3
 800671e:	d10b      	bne.n	8006738 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d005      	beq.n	8006738 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f000 ffc0 	bl	80076be <USBD_CtlSendStatus>
 800673e:	e01a      	b.n	8006776 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b03      	cmp	r3, #3
 800674a:	d114      	bne.n	8006776 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00e      	beq.n	8006776 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	7afa      	ldrb	r2, [r7, #11]
 8006762:	4611      	mov	r1, r2
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	4798      	blx	r3
 8006768:	4603      	mov	r3, r0
 800676a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800676c:	7dfb      	ldrb	r3, [r7, #23]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d001      	beq.n	8006776 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006772:	7dfb      	ldrb	r3, [r7, #23]
 8006774:	e000      	b.n	8006778 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3718      	adds	r7, #24
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	460b      	mov	r3, r1
 800678a:	607a      	str	r2, [r7, #4]
 800678c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800678e:	7afb      	ldrb	r3, [r7, #11]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d16b      	bne.n	800686c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	3314      	adds	r3, #20
 8006798:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d156      	bne.n	8006852 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	689a      	ldr	r2, [r3, #8]
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d914      	bls.n	80067da <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	689a      	ldr	r2, [r3, #8]
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	1ad2      	subs	r2, r2, r3
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	461a      	mov	r2, r3
 80067c4:	6879      	ldr	r1, [r7, #4]
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 ff3a 	bl	8007640 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80067cc:	2300      	movs	r3, #0
 80067ce:	2200      	movs	r2, #0
 80067d0:	2100      	movs	r1, #0
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f001 fbf0 	bl	8007fb8 <USBD_LL_PrepareReceive>
 80067d8:	e03b      	b.n	8006852 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	68da      	ldr	r2, [r3, #12]
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d11c      	bne.n	8006820 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d316      	bcc.n	8006820 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	685a      	ldr	r2, [r3, #4]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d20f      	bcs.n	8006820 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006800:	2200      	movs	r2, #0
 8006802:	2100      	movs	r1, #0
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f000 ff1b 	bl	8007640 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006812:	2300      	movs	r3, #0
 8006814:	2200      	movs	r2, #0
 8006816:	2100      	movs	r1, #0
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f001 fbcd 	bl	8007fb8 <USBD_LL_PrepareReceive>
 800681e:	e018      	b.n	8006852 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b03      	cmp	r3, #3
 800682a:	d10b      	bne.n	8006844 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d005      	beq.n	8006844 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006844:	2180      	movs	r1, #128	; 0x80
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f001 fb0c 	bl	8007e64 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f000 ff49 	bl	80076e4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006858:	2b01      	cmp	r3, #1
 800685a:	d122      	bne.n	80068a2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f7ff fe98 	bl	8006592 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800686a:	e01a      	b.n	80068a2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006872:	b2db      	uxtb	r3, r3
 8006874:	2b03      	cmp	r3, #3
 8006876:	d114      	bne.n	80068a2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00e      	beq.n	80068a2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800688a:	695b      	ldr	r3, [r3, #20]
 800688c:	7afa      	ldrb	r2, [r7, #11]
 800688e:	4611      	mov	r1, r2
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	4798      	blx	r3
 8006894:	4603      	mov	r3, r0
 8006896:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006898:	7dfb      	ldrb	r3, [r7, #23]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d001      	beq.n	80068a2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800689e:	7dfb      	ldrb	r3, [r7, #23]
 80068a0:	e000      	b.n	80068a4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3718      	adds	r7, #24
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d101      	bne.n	80068e0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80068dc:	2303      	movs	r3, #3
 80068de:	e02f      	b.n	8006940 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00f      	beq.n	800690a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d009      	beq.n	800690a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	6852      	ldr	r2, [r2, #4]
 8006902:	b2d2      	uxtb	r2, r2
 8006904:	4611      	mov	r1, r2
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800690a:	2340      	movs	r3, #64	; 0x40
 800690c:	2200      	movs	r2, #0
 800690e:	2100      	movs	r1, #0
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f001 fa62 	bl	8007dda <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2240      	movs	r2, #64	; 0x40
 8006922:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006926:	2340      	movs	r3, #64	; 0x40
 8006928:	2200      	movs	r2, #0
 800692a:	2180      	movs	r1, #128	; 0x80
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f001 fa54 	bl	8007dda <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2201      	movs	r2, #1
 8006936:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2240      	movs	r2, #64	; 0x40
 800693c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	460b      	mov	r3, r1
 8006952:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	78fa      	ldrb	r2, [r7, #3]
 8006958:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006976:	b2da      	uxtb	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2204      	movs	r2, #4
 8006982:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b04      	cmp	r3, #4
 80069a6:	d106      	bne.n	80069b6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d101      	bne.n	80069da <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e012      	b.n	8006a00 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b03      	cmp	r3, #3
 80069e4:	d10b      	bne.n	80069fe <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ec:	69db      	ldr	r3, [r3, #28]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d005      	beq.n	80069fe <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3708      	adds	r7, #8
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b087      	sub	sp, #28
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006a26:	8a3b      	ldrh	r3, [r7, #16]
 8006a28:	021b      	lsls	r3, r3, #8
 8006a2a:	b21a      	sxth	r2, r3
 8006a2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	b21b      	sxth	r3, r3
 8006a34:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006a36:	89fb      	ldrh	r3, [r7, #14]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	371c      	adds	r7, #28
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a5a:	2b40      	cmp	r3, #64	; 0x40
 8006a5c:	d005      	beq.n	8006a6a <USBD_StdDevReq+0x26>
 8006a5e:	2b40      	cmp	r3, #64	; 0x40
 8006a60:	d853      	bhi.n	8006b0a <USBD_StdDevReq+0xc6>
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00b      	beq.n	8006a7e <USBD_StdDevReq+0x3a>
 8006a66:	2b20      	cmp	r3, #32
 8006a68:	d14f      	bne.n	8006b0a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	6839      	ldr	r1, [r7, #0]
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	4798      	blx	r3
 8006a78:	4603      	mov	r3, r0
 8006a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a7c:	e04a      	b.n	8006b14 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	785b      	ldrb	r3, [r3, #1]
 8006a82:	2b09      	cmp	r3, #9
 8006a84:	d83b      	bhi.n	8006afe <USBD_StdDevReq+0xba>
 8006a86:	a201      	add	r2, pc, #4	; (adr r2, 8006a8c <USBD_StdDevReq+0x48>)
 8006a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8c:	08006ae1 	.word	0x08006ae1
 8006a90:	08006af5 	.word	0x08006af5
 8006a94:	08006aff 	.word	0x08006aff
 8006a98:	08006aeb 	.word	0x08006aeb
 8006a9c:	08006aff 	.word	0x08006aff
 8006aa0:	08006abf 	.word	0x08006abf
 8006aa4:	08006ab5 	.word	0x08006ab5
 8006aa8:	08006aff 	.word	0x08006aff
 8006aac:	08006ad7 	.word	0x08006ad7
 8006ab0:	08006ac9 	.word	0x08006ac9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006ab4:	6839      	ldr	r1, [r7, #0]
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f9de 	bl	8006e78 <USBD_GetDescriptor>
          break;
 8006abc:	e024      	b.n	8006b08 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006abe:	6839      	ldr	r1, [r7, #0]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 fb6d 	bl	80071a0 <USBD_SetAddress>
          break;
 8006ac6:	e01f      	b.n	8006b08 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006ac8:	6839      	ldr	r1, [r7, #0]
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 fbac 	bl	8007228 <USBD_SetConfig>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	73fb      	strb	r3, [r7, #15]
          break;
 8006ad4:	e018      	b.n	8006b08 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006ad6:	6839      	ldr	r1, [r7, #0]
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 fc4b 	bl	8007374 <USBD_GetConfig>
          break;
 8006ade:	e013      	b.n	8006b08 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006ae0:	6839      	ldr	r1, [r7, #0]
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 fc7c 	bl	80073e0 <USBD_GetStatus>
          break;
 8006ae8:	e00e      	b.n	8006b08 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006aea:	6839      	ldr	r1, [r7, #0]
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fcab 	bl	8007448 <USBD_SetFeature>
          break;
 8006af2:	e009      	b.n	8006b08 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fcba 	bl	8007470 <USBD_ClrFeature>
          break;
 8006afc:	e004      	b.n	8006b08 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006afe:	6839      	ldr	r1, [r7, #0]
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fd11 	bl	8007528 <USBD_CtlError>
          break;
 8006b06:	bf00      	nop
      }
      break;
 8006b08:	e004      	b.n	8006b14 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006b0a:	6839      	ldr	r1, [r7, #0]
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 fd0b 	bl	8007528 <USBD_CtlError>
      break;
 8006b12:	bf00      	nop
  }

  return ret;
 8006b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop

08006b20 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b36:	2b40      	cmp	r3, #64	; 0x40
 8006b38:	d005      	beq.n	8006b46 <USBD_StdItfReq+0x26>
 8006b3a:	2b40      	cmp	r3, #64	; 0x40
 8006b3c:	d82f      	bhi.n	8006b9e <USBD_StdItfReq+0x7e>
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d001      	beq.n	8006b46 <USBD_StdItfReq+0x26>
 8006b42:	2b20      	cmp	r3, #32
 8006b44:	d12b      	bne.n	8006b9e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d81d      	bhi.n	8006b90 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	889b      	ldrh	r3, [r3, #4]
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d813      	bhi.n	8006b86 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	6839      	ldr	r1, [r7, #0]
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	4798      	blx	r3
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	88db      	ldrh	r3, [r3, #6]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d110      	bne.n	8006b9a <USBD_StdItfReq+0x7a>
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10d      	bne.n	8006b9a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fd9d 	bl	80076be <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006b84:	e009      	b.n	8006b9a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006b86:	6839      	ldr	r1, [r7, #0]
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 fccd 	bl	8007528 <USBD_CtlError>
          break;
 8006b8e:	e004      	b.n	8006b9a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006b90:	6839      	ldr	r1, [r7, #0]
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fcc8 	bl	8007528 <USBD_CtlError>
          break;
 8006b98:	e000      	b.n	8006b9c <USBD_StdItfReq+0x7c>
          break;
 8006b9a:	bf00      	nop
      }
      break;
 8006b9c:	e004      	b.n	8006ba8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fcc1 	bl	8007528 <USBD_CtlError>
      break;
 8006ba6:	bf00      	nop
  }

  return ret;
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b084      	sub	sp, #16
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
 8006bba:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	889b      	ldrh	r3, [r3, #4]
 8006bc4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bce:	2b40      	cmp	r3, #64	; 0x40
 8006bd0:	d007      	beq.n	8006be2 <USBD_StdEPReq+0x30>
 8006bd2:	2b40      	cmp	r3, #64	; 0x40
 8006bd4:	f200 8145 	bhi.w	8006e62 <USBD_StdEPReq+0x2b0>
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00c      	beq.n	8006bf6 <USBD_StdEPReq+0x44>
 8006bdc:	2b20      	cmp	r3, #32
 8006bde:	f040 8140 	bne.w	8006e62 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	6839      	ldr	r1, [r7, #0]
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	4798      	blx	r3
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8006bf4:	e13a      	b.n	8006e6c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	785b      	ldrb	r3, [r3, #1]
 8006bfa:	2b03      	cmp	r3, #3
 8006bfc:	d007      	beq.n	8006c0e <USBD_StdEPReq+0x5c>
 8006bfe:	2b03      	cmp	r3, #3
 8006c00:	f300 8129 	bgt.w	8006e56 <USBD_StdEPReq+0x2a4>
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d07f      	beq.n	8006d08 <USBD_StdEPReq+0x156>
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d03c      	beq.n	8006c86 <USBD_StdEPReq+0xd4>
 8006c0c:	e123      	b.n	8006e56 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d002      	beq.n	8006c20 <USBD_StdEPReq+0x6e>
 8006c1a:	2b03      	cmp	r3, #3
 8006c1c:	d016      	beq.n	8006c4c <USBD_StdEPReq+0x9a>
 8006c1e:	e02c      	b.n	8006c7a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c20:	7bbb      	ldrb	r3, [r7, #14]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00d      	beq.n	8006c42 <USBD_StdEPReq+0x90>
 8006c26:	7bbb      	ldrb	r3, [r7, #14]
 8006c28:	2b80      	cmp	r3, #128	; 0x80
 8006c2a:	d00a      	beq.n	8006c42 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c2c:	7bbb      	ldrb	r3, [r7, #14]
 8006c2e:	4619      	mov	r1, r3
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f001 f917 	bl	8007e64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c36:	2180      	movs	r1, #128	; 0x80
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f001 f913 	bl	8007e64 <USBD_LL_StallEP>
 8006c3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c40:	e020      	b.n	8006c84 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006c42:	6839      	ldr	r1, [r7, #0]
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fc6f 	bl	8007528 <USBD_CtlError>
              break;
 8006c4a:	e01b      	b.n	8006c84 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	885b      	ldrh	r3, [r3, #2]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10e      	bne.n	8006c72 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006c54:	7bbb      	ldrb	r3, [r7, #14]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00b      	beq.n	8006c72 <USBD_StdEPReq+0xc0>
 8006c5a:	7bbb      	ldrb	r3, [r7, #14]
 8006c5c:	2b80      	cmp	r3, #128	; 0x80
 8006c5e:	d008      	beq.n	8006c72 <USBD_StdEPReq+0xc0>
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	88db      	ldrh	r3, [r3, #6]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d104      	bne.n	8006c72 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c68:	7bbb      	ldrb	r3, [r7, #14]
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f001 f8f9 	bl	8007e64 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 fd23 	bl	80076be <USBD_CtlSendStatus>

              break;
 8006c78:	e004      	b.n	8006c84 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006c7a:	6839      	ldr	r1, [r7, #0]
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fc53 	bl	8007528 <USBD_CtlError>
              break;
 8006c82:	bf00      	nop
          }
          break;
 8006c84:	e0ec      	b.n	8006e60 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d002      	beq.n	8006c98 <USBD_StdEPReq+0xe6>
 8006c92:	2b03      	cmp	r3, #3
 8006c94:	d016      	beq.n	8006cc4 <USBD_StdEPReq+0x112>
 8006c96:	e030      	b.n	8006cfa <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c98:	7bbb      	ldrb	r3, [r7, #14]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00d      	beq.n	8006cba <USBD_StdEPReq+0x108>
 8006c9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ca0:	2b80      	cmp	r3, #128	; 0x80
 8006ca2:	d00a      	beq.n	8006cba <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ca4:	7bbb      	ldrb	r3, [r7, #14]
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f001 f8db 	bl	8007e64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cae:	2180      	movs	r1, #128	; 0x80
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f001 f8d7 	bl	8007e64 <USBD_LL_StallEP>
 8006cb6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006cb8:	e025      	b.n	8006d06 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006cba:	6839      	ldr	r1, [r7, #0]
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 fc33 	bl	8007528 <USBD_CtlError>
              break;
 8006cc2:	e020      	b.n	8006d06 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	885b      	ldrh	r3, [r3, #2]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d11b      	bne.n	8006d04 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006ccc:	7bbb      	ldrb	r3, [r7, #14]
 8006cce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d004      	beq.n	8006ce0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006cd6:	7bbb      	ldrb	r3, [r7, #14]
 8006cd8:	4619      	mov	r1, r3
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f001 f8e1 	bl	8007ea2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fcec 	bl	80076be <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	6839      	ldr	r1, [r7, #0]
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	4798      	blx	r3
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006cf8:	e004      	b.n	8006d04 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006cfa:	6839      	ldr	r1, [r7, #0]
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 fc13 	bl	8007528 <USBD_CtlError>
              break;
 8006d02:	e000      	b.n	8006d06 <USBD_StdEPReq+0x154>
              break;
 8006d04:	bf00      	nop
          }
          break;
 8006d06:	e0ab      	b.n	8006e60 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d002      	beq.n	8006d1a <USBD_StdEPReq+0x168>
 8006d14:	2b03      	cmp	r3, #3
 8006d16:	d032      	beq.n	8006d7e <USBD_StdEPReq+0x1cc>
 8006d18:	e097      	b.n	8006e4a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d1a:	7bbb      	ldrb	r3, [r7, #14]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d007      	beq.n	8006d30 <USBD_StdEPReq+0x17e>
 8006d20:	7bbb      	ldrb	r3, [r7, #14]
 8006d22:	2b80      	cmp	r3, #128	; 0x80
 8006d24:	d004      	beq.n	8006d30 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006d26:	6839      	ldr	r1, [r7, #0]
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 fbfd 	bl	8007528 <USBD_CtlError>
                break;
 8006d2e:	e091      	b.n	8006e54 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	da0b      	bge.n	8006d50 <USBD_StdEPReq+0x19e>
 8006d38:	7bbb      	ldrb	r3, [r7, #14]
 8006d3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d3e:	4613      	mov	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	3310      	adds	r3, #16
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	3304      	adds	r3, #4
 8006d4e:	e00b      	b.n	8006d68 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d50:	7bbb      	ldrb	r3, [r7, #14]
 8006d52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d56:	4613      	mov	r3, r2
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4413      	add	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	4413      	add	r3, r2
 8006d66:	3304      	adds	r3, #4
 8006d68:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	2202      	movs	r2, #2
 8006d74:	4619      	mov	r1, r3
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 fc47 	bl	800760a <USBD_CtlSendData>
              break;
 8006d7c:	e06a      	b.n	8006e54 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006d7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	da11      	bge.n	8006daa <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006d86:	7bbb      	ldrb	r3, [r7, #14]
 8006d88:	f003 020f 	and.w	r2, r3, #15
 8006d8c:	6879      	ldr	r1, [r7, #4]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	440b      	add	r3, r1
 8006d98:	3324      	adds	r3, #36	; 0x24
 8006d9a:	881b      	ldrh	r3, [r3, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d117      	bne.n	8006dd0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006da0:	6839      	ldr	r1, [r7, #0]
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fbc0 	bl	8007528 <USBD_CtlError>
                  break;
 8006da8:	e054      	b.n	8006e54 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006daa:	7bbb      	ldrb	r3, [r7, #14]
 8006dac:	f003 020f 	and.w	r2, r3, #15
 8006db0:	6879      	ldr	r1, [r7, #4]
 8006db2:	4613      	mov	r3, r2
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4413      	add	r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	440b      	add	r3, r1
 8006dbc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006dc0:	881b      	ldrh	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d104      	bne.n	8006dd0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006dc6:	6839      	ldr	r1, [r7, #0]
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fbad 	bl	8007528 <USBD_CtlError>
                  break;
 8006dce:	e041      	b.n	8006e54 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	da0b      	bge.n	8006df0 <USBD_StdEPReq+0x23e>
 8006dd8:	7bbb      	ldrb	r3, [r7, #14]
 8006dda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006dde:	4613      	mov	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	4413      	add	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	3310      	adds	r3, #16
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	4413      	add	r3, r2
 8006dec:	3304      	adds	r3, #4
 8006dee:	e00b      	b.n	8006e08 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006df0:	7bbb      	ldrb	r3, [r7, #14]
 8006df2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006df6:	4613      	mov	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4413      	add	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	4413      	add	r3, r2
 8006e06:	3304      	adds	r3, #4
 8006e08:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006e0a:	7bbb      	ldrb	r3, [r7, #14]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d002      	beq.n	8006e16 <USBD_StdEPReq+0x264>
 8006e10:	7bbb      	ldrb	r3, [r7, #14]
 8006e12:	2b80      	cmp	r3, #128	; 0x80
 8006e14:	d103      	bne.n	8006e1e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	601a      	str	r2, [r3, #0]
 8006e1c:	e00e      	b.n	8006e3c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006e1e:	7bbb      	ldrb	r3, [r7, #14]
 8006e20:	4619      	mov	r1, r3
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f001 f85c 	bl	8007ee0 <USBD_LL_IsStallEP>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d003      	beq.n	8006e36 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	2201      	movs	r2, #1
 8006e32:	601a      	str	r2, [r3, #0]
 8006e34:	e002      	b.n	8006e3c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	2202      	movs	r2, #2
 8006e40:	4619      	mov	r1, r3
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fbe1 	bl	800760a <USBD_CtlSendData>
              break;
 8006e48:	e004      	b.n	8006e54 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006e4a:	6839      	ldr	r1, [r7, #0]
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 fb6b 	bl	8007528 <USBD_CtlError>
              break;
 8006e52:	bf00      	nop
          }
          break;
 8006e54:	e004      	b.n	8006e60 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006e56:	6839      	ldr	r1, [r7, #0]
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fb65 	bl	8007528 <USBD_CtlError>
          break;
 8006e5e:	bf00      	nop
      }
      break;
 8006e60:	e004      	b.n	8006e6c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006e62:	6839      	ldr	r1, [r7, #0]
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 fb5f 	bl	8007528 <USBD_CtlError>
      break;
 8006e6a:	bf00      	nop
  }

  return ret;
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
	...

08006e78 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e82:	2300      	movs	r3, #0
 8006e84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006e86:	2300      	movs	r3, #0
 8006e88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	885b      	ldrh	r3, [r3, #2]
 8006e92:	0a1b      	lsrs	r3, r3, #8
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	3b01      	subs	r3, #1
 8006e98:	2b0e      	cmp	r3, #14
 8006e9a:	f200 8152 	bhi.w	8007142 <USBD_GetDescriptor+0x2ca>
 8006e9e:	a201      	add	r2, pc, #4	; (adr r2, 8006ea4 <USBD_GetDescriptor+0x2c>)
 8006ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea4:	08006f15 	.word	0x08006f15
 8006ea8:	08006f2d 	.word	0x08006f2d
 8006eac:	08006f6d 	.word	0x08006f6d
 8006eb0:	08007143 	.word	0x08007143
 8006eb4:	08007143 	.word	0x08007143
 8006eb8:	080070e3 	.word	0x080070e3
 8006ebc:	0800710f 	.word	0x0800710f
 8006ec0:	08007143 	.word	0x08007143
 8006ec4:	08007143 	.word	0x08007143
 8006ec8:	08007143 	.word	0x08007143
 8006ecc:	08007143 	.word	0x08007143
 8006ed0:	08007143 	.word	0x08007143
 8006ed4:	08007143 	.word	0x08007143
 8006ed8:	08007143 	.word	0x08007143
 8006edc:	08006ee1 	.word	0x08006ee1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ee6:	69db      	ldr	r3, [r3, #28]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00b      	beq.n	8006f04 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ef2:	69db      	ldr	r3, [r3, #28]
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	7c12      	ldrb	r2, [r2, #16]
 8006ef8:	f107 0108 	add.w	r1, r7, #8
 8006efc:	4610      	mov	r0, r2
 8006efe:	4798      	blx	r3
 8006f00:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f02:	e126      	b.n	8007152 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006f04:	6839      	ldr	r1, [r7, #0]
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fb0e 	bl	8007528 <USBD_CtlError>
        err++;
 8006f0c:	7afb      	ldrb	r3, [r7, #11]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	72fb      	strb	r3, [r7, #11]
      break;
 8006f12:	e11e      	b.n	8007152 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	7c12      	ldrb	r2, [r2, #16]
 8006f20:	f107 0108 	add.w	r1, r7, #8
 8006f24:	4610      	mov	r0, r2
 8006f26:	4798      	blx	r3
 8006f28:	60f8      	str	r0, [r7, #12]
      break;
 8006f2a:	e112      	b.n	8007152 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	7c1b      	ldrb	r3, [r3, #16]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10d      	bne.n	8006f50 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f3c:	f107 0208 	add.w	r2, r7, #8
 8006f40:	4610      	mov	r0, r2
 8006f42:	4798      	blx	r3
 8006f44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006f4e:	e100      	b.n	8007152 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f58:	f107 0208 	add.w	r2, r7, #8
 8006f5c:	4610      	mov	r0, r2
 8006f5e:	4798      	blx	r3
 8006f60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	3301      	adds	r3, #1
 8006f66:	2202      	movs	r2, #2
 8006f68:	701a      	strb	r2, [r3, #0]
      break;
 8006f6a:	e0f2      	b.n	8007152 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	885b      	ldrh	r3, [r3, #2]
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b05      	cmp	r3, #5
 8006f74:	f200 80ac 	bhi.w	80070d0 <USBD_GetDescriptor+0x258>
 8006f78:	a201      	add	r2, pc, #4	; (adr r2, 8006f80 <USBD_GetDescriptor+0x108>)
 8006f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7e:	bf00      	nop
 8006f80:	08006f99 	.word	0x08006f99
 8006f84:	08006fcd 	.word	0x08006fcd
 8006f88:	08007001 	.word	0x08007001
 8006f8c:	08007035 	.word	0x08007035
 8006f90:	08007069 	.word	0x08007069
 8006f94:	0800709d 	.word	0x0800709d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00b      	beq.n	8006fbc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	7c12      	ldrb	r2, [r2, #16]
 8006fb0:	f107 0108 	add.w	r1, r7, #8
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	4798      	blx	r3
 8006fb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fba:	e091      	b.n	80070e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006fbc:	6839      	ldr	r1, [r7, #0]
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fab2 	bl	8007528 <USBD_CtlError>
            err++;
 8006fc4:	7afb      	ldrb	r3, [r7, #11]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	72fb      	strb	r3, [r7, #11]
          break;
 8006fca:	e089      	b.n	80070e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00b      	beq.n	8006ff0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	7c12      	ldrb	r2, [r2, #16]
 8006fe4:	f107 0108 	add.w	r1, r7, #8
 8006fe8:	4610      	mov	r0, r2
 8006fea:	4798      	blx	r3
 8006fec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fee:	e077      	b.n	80070e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fa98 	bl	8007528 <USBD_CtlError>
            err++;
 8006ff8:	7afb      	ldrb	r3, [r7, #11]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	72fb      	strb	r3, [r7, #11]
          break;
 8006ffe:	e06f      	b.n	80070e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00b      	beq.n	8007024 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	7c12      	ldrb	r2, [r2, #16]
 8007018:	f107 0108 	add.w	r1, r7, #8
 800701c:	4610      	mov	r0, r2
 800701e:	4798      	blx	r3
 8007020:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007022:	e05d      	b.n	80070e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007024:	6839      	ldr	r1, [r7, #0]
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fa7e 	bl	8007528 <USBD_CtlError>
            err++;
 800702c:	7afb      	ldrb	r3, [r7, #11]
 800702e:	3301      	adds	r3, #1
 8007030:	72fb      	strb	r3, [r7, #11]
          break;
 8007032:	e055      	b.n	80070e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00b      	beq.n	8007058 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	7c12      	ldrb	r2, [r2, #16]
 800704c:	f107 0108 	add.w	r1, r7, #8
 8007050:	4610      	mov	r0, r2
 8007052:	4798      	blx	r3
 8007054:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007056:	e043      	b.n	80070e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007058:	6839      	ldr	r1, [r7, #0]
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fa64 	bl	8007528 <USBD_CtlError>
            err++;
 8007060:	7afb      	ldrb	r3, [r7, #11]
 8007062:	3301      	adds	r3, #1
 8007064:	72fb      	strb	r3, [r7, #11]
          break;
 8007066:	e03b      	b.n	80070e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00b      	beq.n	800708c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800707a:	695b      	ldr	r3, [r3, #20]
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	7c12      	ldrb	r2, [r2, #16]
 8007080:	f107 0108 	add.w	r1, r7, #8
 8007084:	4610      	mov	r0, r2
 8007086:	4798      	blx	r3
 8007088:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800708a:	e029      	b.n	80070e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800708c:	6839      	ldr	r1, [r7, #0]
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fa4a 	bl	8007528 <USBD_CtlError>
            err++;
 8007094:	7afb      	ldrb	r3, [r7, #11]
 8007096:	3301      	adds	r3, #1
 8007098:	72fb      	strb	r3, [r7, #11]
          break;
 800709a:	e021      	b.n	80070e0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070a2:	699b      	ldr	r3, [r3, #24]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00b      	beq.n	80070c0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ae:	699b      	ldr	r3, [r3, #24]
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	7c12      	ldrb	r2, [r2, #16]
 80070b4:	f107 0108 	add.w	r1, r7, #8
 80070b8:	4610      	mov	r0, r2
 80070ba:	4798      	blx	r3
 80070bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070be:	e00f      	b.n	80070e0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80070c0:	6839      	ldr	r1, [r7, #0]
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fa30 	bl	8007528 <USBD_CtlError>
            err++;
 80070c8:	7afb      	ldrb	r3, [r7, #11]
 80070ca:	3301      	adds	r3, #1
 80070cc:	72fb      	strb	r3, [r7, #11]
          break;
 80070ce:	e007      	b.n	80070e0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80070d0:	6839      	ldr	r1, [r7, #0]
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fa28 	bl	8007528 <USBD_CtlError>
          err++;
 80070d8:	7afb      	ldrb	r3, [r7, #11]
 80070da:	3301      	adds	r3, #1
 80070dc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80070de:	bf00      	nop
      }
      break;
 80070e0:	e037      	b.n	8007152 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	7c1b      	ldrb	r3, [r3, #16]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d109      	bne.n	80070fe <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f2:	f107 0208 	add.w	r2, r7, #8
 80070f6:	4610      	mov	r0, r2
 80070f8:	4798      	blx	r3
 80070fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070fc:	e029      	b.n	8007152 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80070fe:	6839      	ldr	r1, [r7, #0]
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 fa11 	bl	8007528 <USBD_CtlError>
        err++;
 8007106:	7afb      	ldrb	r3, [r7, #11]
 8007108:	3301      	adds	r3, #1
 800710a:	72fb      	strb	r3, [r7, #11]
      break;
 800710c:	e021      	b.n	8007152 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	7c1b      	ldrb	r3, [r3, #16]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10d      	bne.n	8007132 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800711c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711e:	f107 0208 	add.w	r2, r7, #8
 8007122:	4610      	mov	r0, r2
 8007124:	4798      	blx	r3
 8007126:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	3301      	adds	r3, #1
 800712c:	2207      	movs	r2, #7
 800712e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007130:	e00f      	b.n	8007152 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007132:	6839      	ldr	r1, [r7, #0]
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f9f7 	bl	8007528 <USBD_CtlError>
        err++;
 800713a:	7afb      	ldrb	r3, [r7, #11]
 800713c:	3301      	adds	r3, #1
 800713e:	72fb      	strb	r3, [r7, #11]
      break;
 8007140:	e007      	b.n	8007152 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007142:	6839      	ldr	r1, [r7, #0]
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f9ef 	bl	8007528 <USBD_CtlError>
      err++;
 800714a:	7afb      	ldrb	r3, [r7, #11]
 800714c:	3301      	adds	r3, #1
 800714e:	72fb      	strb	r3, [r7, #11]
      break;
 8007150:	bf00      	nop
  }

  if (err != 0U)
 8007152:	7afb      	ldrb	r3, [r7, #11]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d11e      	bne.n	8007196 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	88db      	ldrh	r3, [r3, #6]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d016      	beq.n	800718e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007160:	893b      	ldrh	r3, [r7, #8]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00e      	beq.n	8007184 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	88da      	ldrh	r2, [r3, #6]
 800716a:	893b      	ldrh	r3, [r7, #8]
 800716c:	4293      	cmp	r3, r2
 800716e:	bf28      	it	cs
 8007170:	4613      	movcs	r3, r2
 8007172:	b29b      	uxth	r3, r3
 8007174:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007176:	893b      	ldrh	r3, [r7, #8]
 8007178:	461a      	mov	r2, r3
 800717a:	68f9      	ldr	r1, [r7, #12]
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 fa44 	bl	800760a <USBD_CtlSendData>
 8007182:	e009      	b.n	8007198 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007184:	6839      	ldr	r1, [r7, #0]
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f9ce 	bl	8007528 <USBD_CtlError>
 800718c:	e004      	b.n	8007198 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 fa95 	bl	80076be <USBD_CtlSendStatus>
 8007194:	e000      	b.n	8007198 <USBD_GetDescriptor+0x320>
    return;
 8007196:	bf00      	nop
  }
}
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop

080071a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	889b      	ldrh	r3, [r3, #4]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d131      	bne.n	8007216 <USBD_SetAddress+0x76>
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	88db      	ldrh	r3, [r3, #6]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d12d      	bne.n	8007216 <USBD_SetAddress+0x76>
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	885b      	ldrh	r3, [r3, #2]
 80071be:	2b7f      	cmp	r3, #127	; 0x7f
 80071c0:	d829      	bhi.n	8007216 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	885b      	ldrh	r3, [r3, #2]
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b03      	cmp	r3, #3
 80071d8:	d104      	bne.n	80071e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80071da:	6839      	ldr	r1, [r7, #0]
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 f9a3 	bl	8007528 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071e2:	e01d      	b.n	8007220 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	7bfa      	ldrb	r2, [r7, #15]
 80071e8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80071ec:	7bfb      	ldrb	r3, [r7, #15]
 80071ee:	4619      	mov	r1, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 fea1 	bl	8007f38 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fa61 	bl	80076be <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80071fc:	7bfb      	ldrb	r3, [r7, #15]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d004      	beq.n	800720c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2202      	movs	r2, #2
 8007206:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800720a:	e009      	b.n	8007220 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007214:	e004      	b.n	8007220 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007216:	6839      	ldr	r1, [r7, #0]
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 f985 	bl	8007528 <USBD_CtlError>
  }
}
 800721e:	bf00      	nop
 8007220:	bf00      	nop
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007232:	2300      	movs	r3, #0
 8007234:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	885b      	ldrh	r3, [r3, #2]
 800723a:	b2da      	uxtb	r2, r3
 800723c:	4b4c      	ldr	r3, [pc, #304]	; (8007370 <USBD_SetConfig+0x148>)
 800723e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007240:	4b4b      	ldr	r3, [pc, #300]	; (8007370 <USBD_SetConfig+0x148>)
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d905      	bls.n	8007254 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007248:	6839      	ldr	r1, [r7, #0]
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f96c 	bl	8007528 <USBD_CtlError>
    return USBD_FAIL;
 8007250:	2303      	movs	r3, #3
 8007252:	e088      	b.n	8007366 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800725a:	b2db      	uxtb	r3, r3
 800725c:	2b02      	cmp	r3, #2
 800725e:	d002      	beq.n	8007266 <USBD_SetConfig+0x3e>
 8007260:	2b03      	cmp	r3, #3
 8007262:	d025      	beq.n	80072b0 <USBD_SetConfig+0x88>
 8007264:	e071      	b.n	800734a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007266:	4b42      	ldr	r3, [pc, #264]	; (8007370 <USBD_SetConfig+0x148>)
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d01c      	beq.n	80072a8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800726e:	4b40      	ldr	r3, [pc, #256]	; (8007370 <USBD_SetConfig+0x148>)
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007278:	4b3d      	ldr	r3, [pc, #244]	; (8007370 <USBD_SetConfig+0x148>)
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	4619      	mov	r1, r3
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f7ff f992 	bl	80065a8 <USBD_SetClassConfig>
 8007284:	4603      	mov	r3, r0
 8007286:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007288:	7bfb      	ldrb	r3, [r7, #15]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d004      	beq.n	8007298 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800728e:	6839      	ldr	r1, [r7, #0]
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 f949 	bl	8007528 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007296:	e065      	b.n	8007364 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fa10 	bl	80076be <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2203      	movs	r2, #3
 80072a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80072a6:	e05d      	b.n	8007364 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fa08 	bl	80076be <USBD_CtlSendStatus>
      break;
 80072ae:	e059      	b.n	8007364 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80072b0:	4b2f      	ldr	r3, [pc, #188]	; (8007370 <USBD_SetConfig+0x148>)
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d112      	bne.n	80072de <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2202      	movs	r2, #2
 80072bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80072c0:	4b2b      	ldr	r3, [pc, #172]	; (8007370 <USBD_SetConfig+0x148>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	461a      	mov	r2, r3
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80072ca:	4b29      	ldr	r3, [pc, #164]	; (8007370 <USBD_SetConfig+0x148>)
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	4619      	mov	r1, r3
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f7ff f985 	bl	80065e0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f9f1 	bl	80076be <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80072dc:	e042      	b.n	8007364 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80072de:	4b24      	ldr	r3, [pc, #144]	; (8007370 <USBD_SetConfig+0x148>)
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	461a      	mov	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d02a      	beq.n	8007342 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	4619      	mov	r1, r3
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f7ff f973 	bl	80065e0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80072fa:	4b1d      	ldr	r3, [pc, #116]	; (8007370 <USBD_SetConfig+0x148>)
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	461a      	mov	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007304:	4b1a      	ldr	r3, [pc, #104]	; (8007370 <USBD_SetConfig+0x148>)
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	4619      	mov	r1, r3
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f7ff f94c 	bl	80065a8 <USBD_SetClassConfig>
 8007310:	4603      	mov	r3, r0
 8007312:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007314:	7bfb      	ldrb	r3, [r7, #15]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00f      	beq.n	800733a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800731a:	6839      	ldr	r1, [r7, #0]
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 f903 	bl	8007528 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	b2db      	uxtb	r3, r3
 8007328:	4619      	mov	r1, r3
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f7ff f958 	bl	80065e0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2202      	movs	r2, #2
 8007334:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007338:	e014      	b.n	8007364 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f9bf 	bl	80076be <USBD_CtlSendStatus>
      break;
 8007340:	e010      	b.n	8007364 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f9bb 	bl	80076be <USBD_CtlSendStatus>
      break;
 8007348:	e00c      	b.n	8007364 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800734a:	6839      	ldr	r1, [r7, #0]
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f8eb 	bl	8007528 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007352:	4b07      	ldr	r3, [pc, #28]	; (8007370 <USBD_SetConfig+0x148>)
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	4619      	mov	r1, r3
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f7ff f941 	bl	80065e0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800735e:	2303      	movs	r3, #3
 8007360:	73fb      	strb	r3, [r7, #15]
      break;
 8007362:	bf00      	nop
  }

  return ret;
 8007364:	7bfb      	ldrb	r3, [r7, #15]
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	200001c8 	.word	0x200001c8

08007374 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	88db      	ldrh	r3, [r3, #6]
 8007382:	2b01      	cmp	r3, #1
 8007384:	d004      	beq.n	8007390 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007386:	6839      	ldr	r1, [r7, #0]
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f8cd 	bl	8007528 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800738e:	e023      	b.n	80073d8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007396:	b2db      	uxtb	r3, r3
 8007398:	2b02      	cmp	r3, #2
 800739a:	dc02      	bgt.n	80073a2 <USBD_GetConfig+0x2e>
 800739c:	2b00      	cmp	r3, #0
 800739e:	dc03      	bgt.n	80073a8 <USBD_GetConfig+0x34>
 80073a0:	e015      	b.n	80073ce <USBD_GetConfig+0x5a>
 80073a2:	2b03      	cmp	r3, #3
 80073a4:	d00b      	beq.n	80073be <USBD_GetConfig+0x4a>
 80073a6:	e012      	b.n	80073ce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	3308      	adds	r3, #8
 80073b2:	2201      	movs	r2, #1
 80073b4:	4619      	mov	r1, r3
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f927 	bl	800760a <USBD_CtlSendData>
        break;
 80073bc:	e00c      	b.n	80073d8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	3304      	adds	r3, #4
 80073c2:	2201      	movs	r2, #1
 80073c4:	4619      	mov	r1, r3
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f91f 	bl	800760a <USBD_CtlSendData>
        break;
 80073cc:	e004      	b.n	80073d8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80073ce:	6839      	ldr	r1, [r7, #0]
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 f8a9 	bl	8007528 <USBD_CtlError>
        break;
 80073d6:	bf00      	nop
}
 80073d8:	bf00      	nop
 80073da:	3708      	adds	r7, #8
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	3b01      	subs	r3, #1
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d81e      	bhi.n	8007436 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	88db      	ldrh	r3, [r3, #6]
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d004      	beq.n	800740a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f890 	bl	8007528 <USBD_CtlError>
        break;
 8007408:	e01a      	b.n	8007440 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007416:	2b00      	cmp	r3, #0
 8007418:	d005      	beq.n	8007426 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	f043 0202 	orr.w	r2, r3, #2
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	330c      	adds	r3, #12
 800742a:	2202      	movs	r2, #2
 800742c:	4619      	mov	r1, r3
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f8eb 	bl	800760a <USBD_CtlSendData>
      break;
 8007434:	e004      	b.n	8007440 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007436:	6839      	ldr	r1, [r7, #0]
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f875 	bl	8007528 <USBD_CtlError>
      break;
 800743e:	bf00      	nop
  }
}
 8007440:	bf00      	nop
 8007442:	3708      	adds	r7, #8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	885b      	ldrh	r3, [r3, #2]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d106      	bne.n	8007468 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2201      	movs	r2, #1
 800745e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f92b 	bl	80076be <USBD_CtlSendStatus>
  }
}
 8007468:	bf00      	nop
 800746a:	3708      	adds	r7, #8
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007480:	b2db      	uxtb	r3, r3
 8007482:	3b01      	subs	r3, #1
 8007484:	2b02      	cmp	r3, #2
 8007486:	d80b      	bhi.n	80074a0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	885b      	ldrh	r3, [r3, #2]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d10c      	bne.n	80074aa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 f910 	bl	80076be <USBD_CtlSendStatus>
      }
      break;
 800749e:	e004      	b.n	80074aa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80074a0:	6839      	ldr	r1, [r7, #0]
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f840 	bl	8007528 <USBD_CtlError>
      break;
 80074a8:	e000      	b.n	80074ac <USBD_ClrFeature+0x3c>
      break;
 80074aa:	bf00      	nop
  }
}
 80074ac:	bf00      	nop
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	781a      	ldrb	r2, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	3301      	adds	r3, #1
 80074ce:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	781a      	ldrb	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	3301      	adds	r3, #1
 80074dc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f7ff fa92 	bl	8006a08 <SWAPBYTE>
 80074e4:	4603      	mov	r3, r0
 80074e6:	461a      	mov	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	3301      	adds	r3, #1
 80074f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	3301      	adds	r3, #1
 80074f6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f7ff fa85 	bl	8006a08 <SWAPBYTE>
 80074fe:	4603      	mov	r3, r0
 8007500:	461a      	mov	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	3301      	adds	r3, #1
 800750a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	3301      	adds	r3, #1
 8007510:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f7ff fa78 	bl	8006a08 <SWAPBYTE>
 8007518:	4603      	mov	r3, r0
 800751a:	461a      	mov	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	80da      	strh	r2, [r3, #6]
}
 8007520:	bf00      	nop
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007532:	2180      	movs	r1, #128	; 0x80
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fc95 	bl	8007e64 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800753a:	2100      	movs	r1, #0
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 fc91 	bl	8007e64 <USBD_LL_StallEP>
}
 8007542:	bf00      	nop
 8007544:	3708      	adds	r7, #8
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b086      	sub	sp, #24
 800754e:	af00      	add	r7, sp, #0
 8007550:	60f8      	str	r0, [r7, #12]
 8007552:	60b9      	str	r1, [r7, #8]
 8007554:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007556:	2300      	movs	r3, #0
 8007558:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d036      	beq.n	80075ce <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007564:	6938      	ldr	r0, [r7, #16]
 8007566:	f000 f836 	bl	80075d6 <USBD_GetLen>
 800756a:	4603      	mov	r3, r0
 800756c:	3301      	adds	r3, #1
 800756e:	b29b      	uxth	r3, r3
 8007570:	005b      	lsls	r3, r3, #1
 8007572:	b29a      	uxth	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007578:	7dfb      	ldrb	r3, [r7, #23]
 800757a:	68ba      	ldr	r2, [r7, #8]
 800757c:	4413      	add	r3, r2
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	7812      	ldrb	r2, [r2, #0]
 8007582:	701a      	strb	r2, [r3, #0]
  idx++;
 8007584:	7dfb      	ldrb	r3, [r7, #23]
 8007586:	3301      	adds	r3, #1
 8007588:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800758a:	7dfb      	ldrb	r3, [r7, #23]
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	4413      	add	r3, r2
 8007590:	2203      	movs	r2, #3
 8007592:	701a      	strb	r2, [r3, #0]
  idx++;
 8007594:	7dfb      	ldrb	r3, [r7, #23]
 8007596:	3301      	adds	r3, #1
 8007598:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800759a:	e013      	b.n	80075c4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800759c:	7dfb      	ldrb	r3, [r7, #23]
 800759e:	68ba      	ldr	r2, [r7, #8]
 80075a0:	4413      	add	r3, r2
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	7812      	ldrb	r2, [r2, #0]
 80075a6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	3301      	adds	r3, #1
 80075ac:	613b      	str	r3, [r7, #16]
    idx++;
 80075ae:	7dfb      	ldrb	r3, [r7, #23]
 80075b0:	3301      	adds	r3, #1
 80075b2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80075b4:	7dfb      	ldrb	r3, [r7, #23]
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	4413      	add	r3, r2
 80075ba:	2200      	movs	r2, #0
 80075bc:	701a      	strb	r2, [r3, #0]
    idx++;
 80075be:	7dfb      	ldrb	r3, [r7, #23]
 80075c0:	3301      	adds	r3, #1
 80075c2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d1e7      	bne.n	800759c <USBD_GetString+0x52>
 80075cc:	e000      	b.n	80075d0 <USBD_GetString+0x86>
    return;
 80075ce:	bf00      	nop
  }
}
 80075d0:	3718      	adds	r7, #24
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80075d6:	b480      	push	{r7}
 80075d8:	b085      	sub	sp, #20
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80075de:	2300      	movs	r3, #0
 80075e0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80075e6:	e005      	b.n	80075f4 <USBD_GetLen+0x1e>
  {
    len++;
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
 80075ea:	3301      	adds	r3, #1
 80075ec:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	3301      	adds	r3, #1
 80075f2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1f5      	bne.n	80075e8 <USBD_GetLen+0x12>
  }

  return len;
 80075fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3714      	adds	r7, #20
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b084      	sub	sp, #16
 800760e:	af00      	add	r7, sp, #0
 8007610:	60f8      	str	r0, [r7, #12]
 8007612:	60b9      	str	r1, [r7, #8]
 8007614:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2202      	movs	r2, #2
 800761a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	68ba      	ldr	r2, [r7, #8]
 800762e:	2100      	movs	r1, #0
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f000 fca0 	bl	8007f76 <USBD_LL_Transmit>

  return USBD_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3710      	adds	r7, #16
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}

08007640 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	2100      	movs	r1, #0
 8007652:	68f8      	ldr	r0, [r7, #12]
 8007654:	f000 fc8f 	bl	8007f76 <USBD_LL_Transmit>

  return USBD_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b084      	sub	sp, #16
 8007666:	af00      	add	r7, sp, #0
 8007668:	60f8      	str	r0, [r7, #12]
 800766a:	60b9      	str	r1, [r7, #8]
 800766c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2203      	movs	r2, #3
 8007672:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	2100      	movs	r1, #0
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 fc93 	bl	8007fb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	2100      	movs	r1, #0
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f000 fc82 	bl	8007fb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b082      	sub	sp, #8
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2204      	movs	r2, #4
 80076ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80076ce:	2300      	movs	r3, #0
 80076d0:	2200      	movs	r2, #0
 80076d2:	2100      	movs	r1, #0
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fc4e 	bl	8007f76 <USBD_LL_Transmit>

  return USBD_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3708      	adds	r7, #8
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2205      	movs	r2, #5
 80076f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076f4:	2300      	movs	r3, #0
 80076f6:	2200      	movs	r2, #0
 80076f8:	2100      	movs	r1, #0
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 fc5c 	bl	8007fb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
	...

0800770c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8007710:	2200      	movs	r2, #0
 8007712:	4912      	ldr	r1, [pc, #72]	; (800775c <MX_USB_Device_Init+0x50>)
 8007714:	4812      	ldr	r0, [pc, #72]	; (8007760 <MX_USB_Device_Init+0x54>)
 8007716:	f7fe fed9 	bl	80064cc <USBD_Init>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d001      	beq.n	8007724 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8007720:	f7f9 f80f 	bl	8000742 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8007724:	490f      	ldr	r1, [pc, #60]	; (8007764 <MX_USB_Device_Init+0x58>)
 8007726:	480e      	ldr	r0, [pc, #56]	; (8007760 <MX_USB_Device_Init+0x54>)
 8007728:	f7fe ff00 	bl	800652c <USBD_RegisterClass>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d001      	beq.n	8007736 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8007732:	f7f9 f806 	bl	8000742 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8007736:	490c      	ldr	r1, [pc, #48]	; (8007768 <MX_USB_Device_Init+0x5c>)
 8007738:	4809      	ldr	r0, [pc, #36]	; (8007760 <MX_USB_Device_Init+0x54>)
 800773a:	f7fe fe21 	bl	8006380 <USBD_CDC_RegisterInterface>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d001      	beq.n	8007748 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8007744:	f7f8 fffd 	bl	8000742 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8007748:	4805      	ldr	r0, [pc, #20]	; (8007760 <MX_USB_Device_Init+0x54>)
 800774a:	f7fe ff16 	bl	800657a <USBD_Start>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d001      	beq.n	8007758 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8007754:	f7f8 fff5 	bl	8000742 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8007758:	bf00      	nop
 800775a:	bd80      	pop	{r7, pc}
 800775c:	20000154 	.word	0x20000154
 8007760:	200001cc 	.word	0x200001cc
 8007764:	2000003c 	.word	0x2000003c
 8007768:	20000140 	.word	0x20000140

0800776c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007770:	2200      	movs	r2, #0
 8007772:	4905      	ldr	r1, [pc, #20]	; (8007788 <CDC_Init_FS+0x1c>)
 8007774:	4805      	ldr	r0, [pc, #20]	; (800778c <CDC_Init_FS+0x20>)
 8007776:	f7fe fe18 	bl	80063aa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800777a:	4905      	ldr	r1, [pc, #20]	; (8007790 <CDC_Init_FS+0x24>)
 800777c:	4803      	ldr	r0, [pc, #12]	; (800778c <CDC_Init_FS+0x20>)
 800777e:	f7fe fe32 	bl	80063e6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007782:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007784:	4618      	mov	r0, r3
 8007786:	bd80      	pop	{r7, pc}
 8007788:	20000884 	.word	0x20000884
 800778c:	200001cc 	.word	0x200001cc
 8007790:	2000049c 	.word	0x2000049c

08007794 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007794:	b480      	push	{r7}
 8007796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007798:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800779a:	4618      	mov	r0, r3
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	4603      	mov	r3, r0
 80077ac:	6039      	str	r1, [r7, #0]
 80077ae:	71fb      	strb	r3, [r7, #7]
 80077b0:	4613      	mov	r3, r2
 80077b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80077b4:	79fb      	ldrb	r3, [r7, #7]
 80077b6:	2b23      	cmp	r3, #35	; 0x23
 80077b8:	d84a      	bhi.n	8007850 <CDC_Control_FS+0xac>
 80077ba:	a201      	add	r2, pc, #4	; (adr r2, 80077c0 <CDC_Control_FS+0x1c>)
 80077bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c0:	08007851 	.word	0x08007851
 80077c4:	08007851 	.word	0x08007851
 80077c8:	08007851 	.word	0x08007851
 80077cc:	08007851 	.word	0x08007851
 80077d0:	08007851 	.word	0x08007851
 80077d4:	08007851 	.word	0x08007851
 80077d8:	08007851 	.word	0x08007851
 80077dc:	08007851 	.word	0x08007851
 80077e0:	08007851 	.word	0x08007851
 80077e4:	08007851 	.word	0x08007851
 80077e8:	08007851 	.word	0x08007851
 80077ec:	08007851 	.word	0x08007851
 80077f0:	08007851 	.word	0x08007851
 80077f4:	08007851 	.word	0x08007851
 80077f8:	08007851 	.word	0x08007851
 80077fc:	08007851 	.word	0x08007851
 8007800:	08007851 	.word	0x08007851
 8007804:	08007851 	.word	0x08007851
 8007808:	08007851 	.word	0x08007851
 800780c:	08007851 	.word	0x08007851
 8007810:	08007851 	.word	0x08007851
 8007814:	08007851 	.word	0x08007851
 8007818:	08007851 	.word	0x08007851
 800781c:	08007851 	.word	0x08007851
 8007820:	08007851 	.word	0x08007851
 8007824:	08007851 	.word	0x08007851
 8007828:	08007851 	.word	0x08007851
 800782c:	08007851 	.word	0x08007851
 8007830:	08007851 	.word	0x08007851
 8007834:	08007851 	.word	0x08007851
 8007838:	08007851 	.word	0x08007851
 800783c:	08007851 	.word	0x08007851
 8007840:	08007851 	.word	0x08007851
 8007844:	08007851 	.word	0x08007851
 8007848:	08007851 	.word	0x08007851
 800784c:	08007851 	.word	0x08007851
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007850:	bf00      	nop
  }

  return (USBD_OK);
 8007852:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007854:	4618      	mov	r0, r3
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800786a:	6879      	ldr	r1, [r7, #4]
 800786c:	4805      	ldr	r0, [pc, #20]	; (8007884 <CDC_Receive_FS+0x24>)
 800786e:	f7fe fdba 	bl	80063e6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007872:	4804      	ldr	r0, [pc, #16]	; (8007884 <CDC_Receive_FS+0x24>)
 8007874:	f7fe fe00 	bl	8006478 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007878:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800787a:	4618      	mov	r0, r3
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	200001cc 	.word	0x200001cc

08007888 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	460b      	mov	r3, r1
 8007892:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007894:	2300      	movs	r3, #0
 8007896:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007898:	4b0d      	ldr	r3, [pc, #52]	; (80078d0 <CDC_Transmit_FS+0x48>)
 800789a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800789e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d001      	beq.n	80078ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e00b      	b.n	80078c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80078ae:	887b      	ldrh	r3, [r7, #2]
 80078b0:	461a      	mov	r2, r3
 80078b2:	6879      	ldr	r1, [r7, #4]
 80078b4:	4806      	ldr	r0, [pc, #24]	; (80078d0 <CDC_Transmit_FS+0x48>)
 80078b6:	f7fe fd78 	bl	80063aa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80078ba:	4805      	ldr	r0, [pc, #20]	; (80078d0 <CDC_Transmit_FS+0x48>)
 80078bc:	f7fe fdac 	bl	8006418 <USBD_CDC_TransmitPacket>
 80078c0:	4603      	mov	r3, r0
 80078c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	200001cc 	.word	0x200001cc

080078d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	4613      	mov	r3, r2
 80078e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80078e2:	2300      	movs	r3, #0
 80078e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80078e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	371c      	adds	r7, #28
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
	...

080078f8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	4603      	mov	r3, r0
 8007900:	6039      	str	r1, [r7, #0]
 8007902:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	2212      	movs	r2, #18
 8007908:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800790a:	4b03      	ldr	r3, [pc, #12]	; (8007918 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800790c:	4618      	mov	r0, r3
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr
 8007918:	20000174 	.word	0x20000174

0800791c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	4603      	mov	r3, r0
 8007924:	6039      	str	r1, [r7, #0]
 8007926:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	2204      	movs	r2, #4
 800792c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800792e:	4b03      	ldr	r3, [pc, #12]	; (800793c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8007930:	4618      	mov	r0, r3
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr
 800793c:	20000188 	.word	0x20000188

08007940 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	4603      	mov	r3, r0
 8007948:	6039      	str	r1, [r7, #0]
 800794a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800794c:	79fb      	ldrb	r3, [r7, #7]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d105      	bne.n	800795e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	4907      	ldr	r1, [pc, #28]	; (8007974 <USBD_CDC_ProductStrDescriptor+0x34>)
 8007956:	4808      	ldr	r0, [pc, #32]	; (8007978 <USBD_CDC_ProductStrDescriptor+0x38>)
 8007958:	f7ff fdf7 	bl	800754a <USBD_GetString>
 800795c:	e004      	b.n	8007968 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	4904      	ldr	r1, [pc, #16]	; (8007974 <USBD_CDC_ProductStrDescriptor+0x34>)
 8007962:	4805      	ldr	r0, [pc, #20]	; (8007978 <USBD_CDC_ProductStrDescriptor+0x38>)
 8007964:	f7ff fdf1 	bl	800754a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007968:	4b02      	ldr	r3, [pc, #8]	; (8007974 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800796a:	4618      	mov	r0, r3
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	20000c6c 	.word	0x20000c6c
 8007978:	080081ac 	.word	0x080081ac

0800797c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	4603      	mov	r3, r0
 8007984:	6039      	str	r1, [r7, #0]
 8007986:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007988:	683a      	ldr	r2, [r7, #0]
 800798a:	4904      	ldr	r1, [pc, #16]	; (800799c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800798c:	4804      	ldr	r0, [pc, #16]	; (80079a0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800798e:	f7ff fddc 	bl	800754a <USBD_GetString>
  return USBD_StrDesc;
 8007992:	4b02      	ldr	r3, [pc, #8]	; (800799c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8007994:	4618      	mov	r0, r3
 8007996:	3708      	adds	r7, #8
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	20000c6c 	.word	0x20000c6c
 80079a0:	080081c4 	.word	0x080081c4

080079a4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	4603      	mov	r3, r0
 80079ac:	6039      	str	r1, [r7, #0]
 80079ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	221a      	movs	r2, #26
 80079b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80079b6:	f000 f843 	bl	8007a40 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80079ba:	4b02      	ldr	r3, [pc, #8]	; (80079c4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3708      	adds	r7, #8
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	2000018c 	.word	0x2000018c

080079c8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	4603      	mov	r3, r0
 80079d0:	6039      	str	r1, [r7, #0]
 80079d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80079d4:	79fb      	ldrb	r3, [r7, #7]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d105      	bne.n	80079e6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	4907      	ldr	r1, [pc, #28]	; (80079fc <USBD_CDC_ConfigStrDescriptor+0x34>)
 80079de:	4808      	ldr	r0, [pc, #32]	; (8007a00 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80079e0:	f7ff fdb3 	bl	800754a <USBD_GetString>
 80079e4:	e004      	b.n	80079f0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80079e6:	683a      	ldr	r2, [r7, #0]
 80079e8:	4904      	ldr	r1, [pc, #16]	; (80079fc <USBD_CDC_ConfigStrDescriptor+0x34>)
 80079ea:	4805      	ldr	r0, [pc, #20]	; (8007a00 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80079ec:	f7ff fdad 	bl	800754a <USBD_GetString>
  }
  return USBD_StrDesc;
 80079f0:	4b02      	ldr	r3, [pc, #8]	; (80079fc <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	20000c6c 	.word	0x20000c6c
 8007a00:	080081d8 	.word	0x080081d8

08007a04 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	6039      	str	r1, [r7, #0]
 8007a0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a10:	79fb      	ldrb	r3, [r7, #7]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d105      	bne.n	8007a22 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8007a16:	683a      	ldr	r2, [r7, #0]
 8007a18:	4907      	ldr	r1, [pc, #28]	; (8007a38 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8007a1a:	4808      	ldr	r0, [pc, #32]	; (8007a3c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8007a1c:	f7ff fd95 	bl	800754a <USBD_GetString>
 8007a20:	e004      	b.n	8007a2c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	4904      	ldr	r1, [pc, #16]	; (8007a38 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8007a26:	4805      	ldr	r0, [pc, #20]	; (8007a3c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8007a28:	f7ff fd8f 	bl	800754a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a2c:	4b02      	ldr	r3, [pc, #8]	; (8007a38 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20000c6c 	.word	0x20000c6c
 8007a3c:	080081e4 	.word	0x080081e4

08007a40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007a46:	4b0f      	ldr	r3, [pc, #60]	; (8007a84 <Get_SerialNum+0x44>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007a4c:	4b0e      	ldr	r3, [pc, #56]	; (8007a88 <Get_SerialNum+0x48>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007a52:	4b0e      	ldr	r3, [pc, #56]	; (8007a8c <Get_SerialNum+0x4c>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d009      	beq.n	8007a7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007a66:	2208      	movs	r2, #8
 8007a68:	4909      	ldr	r1, [pc, #36]	; (8007a90 <Get_SerialNum+0x50>)
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f000 f814 	bl	8007a98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007a70:	2204      	movs	r2, #4
 8007a72:	4908      	ldr	r1, [pc, #32]	; (8007a94 <Get_SerialNum+0x54>)
 8007a74:	68b8      	ldr	r0, [r7, #8]
 8007a76:	f000 f80f 	bl	8007a98 <IntToUnicode>
  }
}
 8007a7a:	bf00      	nop
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	1fff7590 	.word	0x1fff7590
 8007a88:	1fff7594 	.word	0x1fff7594
 8007a8c:	1fff7598 	.word	0x1fff7598
 8007a90:	2000018e 	.word	0x2000018e
 8007a94:	2000019e 	.word	0x2000019e

08007a98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b087      	sub	sp, #28
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007aaa:	2300      	movs	r3, #0
 8007aac:	75fb      	strb	r3, [r7, #23]
 8007aae:	e027      	b.n	8007b00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	0f1b      	lsrs	r3, r3, #28
 8007ab4:	2b09      	cmp	r3, #9
 8007ab6:	d80b      	bhi.n	8007ad0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	0f1b      	lsrs	r3, r3, #28
 8007abc:	b2da      	uxtb	r2, r3
 8007abe:	7dfb      	ldrb	r3, [r7, #23]
 8007ac0:	005b      	lsls	r3, r3, #1
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	440b      	add	r3, r1
 8007ac8:	3230      	adds	r2, #48	; 0x30
 8007aca:	b2d2      	uxtb	r2, r2
 8007acc:	701a      	strb	r2, [r3, #0]
 8007ace:	e00a      	b.n	8007ae6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	0f1b      	lsrs	r3, r3, #28
 8007ad4:	b2da      	uxtb	r2, r3
 8007ad6:	7dfb      	ldrb	r3, [r7, #23]
 8007ad8:	005b      	lsls	r3, r3, #1
 8007ada:	4619      	mov	r1, r3
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	440b      	add	r3, r1
 8007ae0:	3237      	adds	r2, #55	; 0x37
 8007ae2:	b2d2      	uxtb	r2, r2
 8007ae4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	011b      	lsls	r3, r3, #4
 8007aea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007aec:	7dfb      	ldrb	r3, [r7, #23]
 8007aee:	005b      	lsls	r3, r3, #1
 8007af0:	3301      	adds	r3, #1
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	4413      	add	r3, r2
 8007af6:	2200      	movs	r2, #0
 8007af8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007afa:	7dfb      	ldrb	r3, [r7, #23]
 8007afc:	3301      	adds	r3, #1
 8007afe:	75fb      	strb	r3, [r7, #23]
 8007b00:	7dfa      	ldrb	r2, [r7, #23]
 8007b02:	79fb      	ldrb	r3, [r7, #7]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d3d3      	bcc.n	8007ab0 <IntToUnicode+0x18>
  }
}
 8007b08:	bf00      	nop
 8007b0a:	bf00      	nop
 8007b0c:	371c      	adds	r7, #28
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
	...

08007b18 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b094      	sub	sp, #80	; 0x50
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007b20:	f107 030c 	add.w	r3, r7, #12
 8007b24:	2244      	movs	r2, #68	; 0x44
 8007b26:	2100      	movs	r1, #0
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f000 fb1f 	bl	800816c <memset>
  if(pcdHandle->Instance==USB)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a15      	ldr	r2, [pc, #84]	; (8007b88 <HAL_PCD_MspInit+0x70>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d122      	bne.n	8007b7e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007b38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b3c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007b42:	f107 030c 	add.w	r3, r7, #12
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7fa fc74 	bl	8002434 <HAL_RCCEx_PeriphCLKConfig>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d001      	beq.n	8007b56 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8007b52:	f7f8 fdf6 	bl	8000742 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007b56:	4b0d      	ldr	r3, [pc, #52]	; (8007b8c <HAL_PCD_MspInit+0x74>)
 8007b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b5a:	4a0c      	ldr	r2, [pc, #48]	; (8007b8c <HAL_PCD_MspInit+0x74>)
 8007b5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007b60:	6593      	str	r3, [r2, #88]	; 0x58
 8007b62:	4b0a      	ldr	r3, [pc, #40]	; (8007b8c <HAL_PCD_MspInit+0x74>)
 8007b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b6a:	60bb      	str	r3, [r7, #8]
 8007b6c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8007b6e:	2200      	movs	r2, #0
 8007b70:	2100      	movs	r1, #0
 8007b72:	2014      	movs	r0, #20
 8007b74:	f7f8 ff01 	bl	800097a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8007b78:	2014      	movs	r0, #20
 8007b7a:	f7f8 ff18 	bl	80009ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007b7e:	bf00      	nop
 8007b80:	3750      	adds	r7, #80	; 0x50
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	40005c00 	.word	0x40005c00
 8007b8c:	40021000 	.word	0x40021000

08007b90 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	4610      	mov	r0, r2
 8007ba8:	f7fe fd32 	bl	8006610 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8007bac:	bf00      	nop
 8007bae:	3708      	adds	r7, #8
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8007bc6:	78fa      	ldrb	r2, [r7, #3]
 8007bc8:	6879      	ldr	r1, [r7, #4]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	00db      	lsls	r3, r3, #3
 8007bd2:	440b      	add	r3, r1
 8007bd4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	78fb      	ldrb	r3, [r7, #3]
 8007bdc:	4619      	mov	r1, r3
 8007bde:	f7fe fd6c 	bl	80066ba <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8007be2:	bf00      	nop
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b082      	sub	sp, #8
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8007bfc:	78fa      	ldrb	r2, [r7, #3]
 8007bfe:	6879      	ldr	r1, [r7, #4]
 8007c00:	4613      	mov	r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4413      	add	r3, r2
 8007c06:	00db      	lsls	r3, r3, #3
 8007c08:	440b      	add	r3, r1
 8007c0a:	3324      	adds	r3, #36	; 0x24
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	78fb      	ldrb	r3, [r7, #3]
 8007c10:	4619      	mov	r1, r3
 8007c12:	f7fe fdb5 	bl	8006780 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8007c16:	bf00      	nop
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b082      	sub	sp, #8
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7fe fec9 	bl	80069c4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8007c32:	bf00      	nop
 8007c34:	3708      	adds	r7, #8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b084      	sub	sp, #16
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007c42:	2301      	movs	r3, #1
 8007c44:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	795b      	ldrb	r3, [r3, #5]
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d001      	beq.n	8007c52 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007c4e:	f7f8 fd78 	bl	8000742 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007c58:	7bfa      	ldrb	r2, [r7, #15]
 8007c5a:	4611      	mov	r1, r2
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7fe fe73 	bl	8006948 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7fe fe1f 	bl	80068ac <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8007c6e:	bf00      	nop
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
	...

08007c78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007c86:	4618      	mov	r0, r3
 8007c88:	f7fe fe6e 	bl	8006968 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	7a5b      	ldrb	r3, [r3, #9]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d005      	beq.n	8007ca0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c94:	4b04      	ldr	r3, [pc, #16]	; (8007ca8 <HAL_PCD_SuspendCallback+0x30>)
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	4a03      	ldr	r2, [pc, #12]	; (8007ca8 <HAL_PCD_SuspendCallback+0x30>)
 8007c9a:	f043 0306 	orr.w	r3, r3, #6
 8007c9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8007ca0:	bf00      	nop
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	e000ed00 	.word	0xe000ed00

08007cac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	7a5b      	ldrb	r3, [r3, #9]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d007      	beq.n	8007ccc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007cbc:	4b08      	ldr	r3, [pc, #32]	; (8007ce0 <HAL_PCD_ResumeCallback+0x34>)
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	4a07      	ldr	r2, [pc, #28]	; (8007ce0 <HAL_PCD_ResumeCallback+0x34>)
 8007cc2:	f023 0306 	bic.w	r3, r3, #6
 8007cc6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007cc8:	f000 f9f8 	bl	80080bc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7fe fe5e 	bl	8006994 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8007cd8:	bf00      	nop
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	e000ed00 	.word	0xe000ed00

08007ce4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8007cec:	4a2b      	ldr	r2, [pc, #172]	; (8007d9c <USBD_LL_Init+0xb8>)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a29      	ldr	r2, [pc, #164]	; (8007d9c <USBD_LL_Init+0xb8>)
 8007cf8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8007cfc:	4b27      	ldr	r3, [pc, #156]	; (8007d9c <USBD_LL_Init+0xb8>)
 8007cfe:	4a28      	ldr	r2, [pc, #160]	; (8007da0 <USBD_LL_Init+0xbc>)
 8007d00:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007d02:	4b26      	ldr	r3, [pc, #152]	; (8007d9c <USBD_LL_Init+0xb8>)
 8007d04:	2208      	movs	r2, #8
 8007d06:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007d08:	4b24      	ldr	r3, [pc, #144]	; (8007d9c <USBD_LL_Init+0xb8>)
 8007d0a:	2202      	movs	r2, #2
 8007d0c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007d0e:	4b23      	ldr	r3, [pc, #140]	; (8007d9c <USBD_LL_Init+0xb8>)
 8007d10:	2202      	movs	r2, #2
 8007d12:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8007d14:	4b21      	ldr	r3, [pc, #132]	; (8007d9c <USBD_LL_Init+0xb8>)
 8007d16:	2200      	movs	r2, #0
 8007d18:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007d1a:	4b20      	ldr	r3, [pc, #128]	; (8007d9c <USBD_LL_Init+0xb8>)
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007d20:	4b1e      	ldr	r3, [pc, #120]	; (8007d9c <USBD_LL_Init+0xb8>)
 8007d22:	2200      	movs	r2, #0
 8007d24:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007d26:	4b1d      	ldr	r3, [pc, #116]	; (8007d9c <USBD_LL_Init+0xb8>)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007d2c:	481b      	ldr	r0, [pc, #108]	; (8007d9c <USBD_LL_Init+0xb8>)
 8007d2e:	f7f8 fe4c 	bl	80009ca <HAL_PCD_Init>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d001      	beq.n	8007d3c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8007d38:	f7f8 fd03 	bl	8000742 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007d42:	2318      	movs	r3, #24
 8007d44:	2200      	movs	r2, #0
 8007d46:	2100      	movs	r1, #0
 8007d48:	f7fa fb06 	bl	8002358 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007d52:	2358      	movs	r3, #88	; 0x58
 8007d54:	2200      	movs	r2, #0
 8007d56:	2180      	movs	r1, #128	; 0x80
 8007d58:	f7fa fafe 	bl	8002358 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007d62:	23c0      	movs	r3, #192	; 0xc0
 8007d64:	2200      	movs	r2, #0
 8007d66:	2181      	movs	r1, #129	; 0x81
 8007d68:	f7fa faf6 	bl	8002358 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007d72:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007d76:	2200      	movs	r2, #0
 8007d78:	2101      	movs	r1, #1
 8007d7a:	f7fa faed 	bl	8002358 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007d84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d88:	2200      	movs	r2, #0
 8007d8a:	2182      	movs	r1, #130	; 0x82
 8007d8c:	f7fa fae4 	bl	8002358 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3708      	adds	r7, #8
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	20000e6c 	.word	0x20000e6c
 8007da0:	40005c00 	.word	0x40005c00

08007da4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dac:	2300      	movs	r3, #0
 8007dae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007db0:	2300      	movs	r3, #0
 8007db2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7f8 fed3 	bl	8000b66 <HAL_PCD_Start>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f000 f980 	bl	80080cc <USBD_Get_USB_Status>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b084      	sub	sp, #16
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
 8007de2:	4608      	mov	r0, r1
 8007de4:	4611      	mov	r1, r2
 8007de6:	461a      	mov	r2, r3
 8007de8:	4603      	mov	r3, r0
 8007dea:	70fb      	strb	r3, [r7, #3]
 8007dec:	460b      	mov	r3, r1
 8007dee:	70bb      	strb	r3, [r7, #2]
 8007df0:	4613      	mov	r3, r2
 8007df2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007df4:	2300      	movs	r3, #0
 8007df6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007e02:	78bb      	ldrb	r3, [r7, #2]
 8007e04:	883a      	ldrh	r2, [r7, #0]
 8007e06:	78f9      	ldrb	r1, [r7, #3]
 8007e08:	f7f9 f81a 	bl	8000e40 <HAL_PCD_EP_Open>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e10:	7bfb      	ldrb	r3, [r7, #15]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 f95a 	bl	80080cc <USBD_Get_USB_Status>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b084      	sub	sp, #16
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
 8007e2e:	460b      	mov	r3, r1
 8007e30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e36:	2300      	movs	r3, #0
 8007e38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e40:	78fa      	ldrb	r2, [r7, #3]
 8007e42:	4611      	mov	r1, r2
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7f9 f858 	bl	8000efa <HAL_PCD_EP_Close>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e4e:	7bfb      	ldrb	r3, [r7, #15]
 8007e50:	4618      	mov	r0, r3
 8007e52:	f000 f93b 	bl	80080cc <USBD_Get_USB_Status>
 8007e56:	4603      	mov	r3, r0
 8007e58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e70:	2300      	movs	r3, #0
 8007e72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e74:	2300      	movs	r3, #0
 8007e76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e7e:	78fa      	ldrb	r2, [r7, #3]
 8007e80:	4611      	mov	r1, r2
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7f9 f901 	bl	800108a <HAL_PCD_EP_SetStall>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e8c:	7bfb      	ldrb	r3, [r7, #15]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f000 f91c 	bl	80080cc <USBD_Get_USB_Status>
 8007e94:	4603      	mov	r3, r0
 8007e96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e98:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b084      	sub	sp, #16
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
 8007eaa:	460b      	mov	r3, r1
 8007eac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ebc:	78fa      	ldrb	r2, [r7, #3]
 8007ebe:	4611      	mov	r1, r2
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7f9 f934 	bl	800112e <HAL_PCD_EP_ClrStall>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007eca:	7bfb      	ldrb	r3, [r7, #15]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f000 f8fd 	bl	80080cc <USBD_Get_USB_Status>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ed6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	460b      	mov	r3, r1
 8007eea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ef2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007ef4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	da0b      	bge.n	8007f14 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007efc:	78fb      	ldrb	r3, [r7, #3]
 8007efe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f02:	68f9      	ldr	r1, [r7, #12]
 8007f04:	4613      	mov	r3, r2
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	4413      	add	r3, r2
 8007f0a:	00db      	lsls	r3, r3, #3
 8007f0c:	440b      	add	r3, r1
 8007f0e:	3312      	adds	r3, #18
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	e00b      	b.n	8007f2c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007f14:	78fb      	ldrb	r3, [r7, #3]
 8007f16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f1a:	68f9      	ldr	r1, [r7, #12]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	4413      	add	r3, r2
 8007f22:	00db      	lsls	r3, r3, #3
 8007f24:	440b      	add	r3, r1
 8007f26:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 8007f2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3714      	adds	r7, #20
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	460b      	mov	r3, r1
 8007f42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f44:	2300      	movs	r3, #0
 8007f46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f52:	78fa      	ldrb	r2, [r7, #3]
 8007f54:	4611      	mov	r1, r2
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7f8 ff4e 	bl	8000df8 <HAL_PCD_SetAddress>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f60:	7bfb      	ldrb	r3, [r7, #15]
 8007f62:	4618      	mov	r0, r3
 8007f64:	f000 f8b2 	bl	80080cc <USBD_Get_USB_Status>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b086      	sub	sp, #24
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	60f8      	str	r0, [r7, #12]
 8007f7e:	607a      	str	r2, [r7, #4]
 8007f80:	603b      	str	r3, [r7, #0]
 8007f82:	460b      	mov	r3, r1
 8007f84:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f86:	2300      	movs	r3, #0
 8007f88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007f94:	7af9      	ldrb	r1, [r7, #11]
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	f7f9 f83f 	bl	800101c <HAL_PCD_EP_Transmit>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fa2:	7dfb      	ldrb	r3, [r7, #23]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f000 f891 	bl	80080cc <USBD_Get_USB_Status>
 8007faa:	4603      	mov	r3, r0
 8007fac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007fae:	7dbb      	ldrb	r3, [r7, #22]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3718      	adds	r7, #24
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b086      	sub	sp, #24
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	607a      	str	r2, [r7, #4]
 8007fc2:	603b      	str	r3, [r7, #0]
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007fd6:	7af9      	ldrb	r1, [r7, #11]
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	f7f8 ffd5 	bl	8000f8a <HAL_PCD_EP_Receive>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fe4:	7dfb      	ldrb	r3, [r7, #23]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 f870 	bl	80080cc <USBD_Get_USB_Status>
 8007fec:	4603      	mov	r3, r0
 8007fee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ff0:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3718      	adds	r7, #24
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b082      	sub	sp, #8
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	460b      	mov	r3, r1
 8008004:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800800c:	78fa      	ldrb	r2, [r7, #3]
 800800e:	4611      	mov	r1, r2
 8008010:	4618      	mov	r0, r3
 8008012:	f7f8 ffeb 	bl	8000fec <HAL_PCD_EP_GetRxCount>
 8008016:	4603      	mov	r3, r0
}
 8008018:	4618      	mov	r0, r3
 800801a:	3708      	adds	r7, #8
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	460b      	mov	r3, r1
 800802a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800802c:	78fb      	ldrb	r3, [r7, #3]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d002      	beq.n	8008038 <HAL_PCDEx_LPM_Callback+0x18>
 8008032:	2b01      	cmp	r3, #1
 8008034:	d013      	beq.n	800805e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8008036:	e023      	b.n	8008080 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	7a5b      	ldrb	r3, [r3, #9]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d007      	beq.n	8008050 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008040:	f000 f83c 	bl	80080bc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008044:	4b10      	ldr	r3, [pc, #64]	; (8008088 <HAL_PCDEx_LPM_Callback+0x68>)
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	4a0f      	ldr	r2, [pc, #60]	; (8008088 <HAL_PCDEx_LPM_Callback+0x68>)
 800804a:	f023 0306 	bic.w	r3, r3, #6
 800804e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008056:	4618      	mov	r0, r3
 8008058:	f7fe fc9c 	bl	8006994 <USBD_LL_Resume>
    break;
 800805c:	e010      	b.n	8008080 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008064:	4618      	mov	r0, r3
 8008066:	f7fe fc7f 	bl	8006968 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	7a5b      	ldrb	r3, [r3, #9]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d005      	beq.n	800807e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008072:	4b05      	ldr	r3, [pc, #20]	; (8008088 <HAL_PCDEx_LPM_Callback+0x68>)
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	4a04      	ldr	r2, [pc, #16]	; (8008088 <HAL_PCDEx_LPM_Callback+0x68>)
 8008078:	f043 0306 	orr.w	r3, r3, #6
 800807c:	6113      	str	r3, [r2, #16]
    break;
 800807e:	bf00      	nop
}
 8008080:	bf00      	nop
 8008082:	3708      	adds	r7, #8
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	e000ed00 	.word	0xe000ed00

0800808c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008094:	4b03      	ldr	r3, [pc, #12]	; (80080a4 <USBD_static_malloc+0x18>)
}
 8008096:	4618      	mov	r0, r3
 8008098:	370c      	adds	r7, #12
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	20001148 	.word	0x20001148

080080a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]

}
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80080bc:	b480      	push	{r7}
 80080be:	af00      	add	r7, sp, #0
  //SystemClock_Config();
}
 80080c0:	bf00      	nop
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr
	...

080080cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	4603      	mov	r3, r0
 80080d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080d6:	2300      	movs	r3, #0
 80080d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80080da:	79fb      	ldrb	r3, [r7, #7]
 80080dc:	2b03      	cmp	r3, #3
 80080de:	d817      	bhi.n	8008110 <USBD_Get_USB_Status+0x44>
 80080e0:	a201      	add	r2, pc, #4	; (adr r2, 80080e8 <USBD_Get_USB_Status+0x1c>)
 80080e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e6:	bf00      	nop
 80080e8:	080080f9 	.word	0x080080f9
 80080ec:	080080ff 	.word	0x080080ff
 80080f0:	08008105 	.word	0x08008105
 80080f4:	0800810b 	.word	0x0800810b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	73fb      	strb	r3, [r7, #15]
    break;
 80080fc:	e00b      	b.n	8008116 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80080fe:	2303      	movs	r3, #3
 8008100:	73fb      	strb	r3, [r7, #15]
    break;
 8008102:	e008      	b.n	8008116 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008104:	2301      	movs	r3, #1
 8008106:	73fb      	strb	r3, [r7, #15]
    break;
 8008108:	e005      	b.n	8008116 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800810a:	2303      	movs	r3, #3
 800810c:	73fb      	strb	r3, [r7, #15]
    break;
 800810e:	e002      	b.n	8008116 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008110:	2303      	movs	r3, #3
 8008112:	73fb      	strb	r3, [r7, #15]
    break;
 8008114:	bf00      	nop
  }
  return usb_status;
 8008116:	7bfb      	ldrb	r3, [r7, #15]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3714      	adds	r7, #20
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <__libc_init_array>:
 8008124:	b570      	push	{r4, r5, r6, lr}
 8008126:	4d0d      	ldr	r5, [pc, #52]	; (800815c <__libc_init_array+0x38>)
 8008128:	4c0d      	ldr	r4, [pc, #52]	; (8008160 <__libc_init_array+0x3c>)
 800812a:	1b64      	subs	r4, r4, r5
 800812c:	10a4      	asrs	r4, r4, #2
 800812e:	2600      	movs	r6, #0
 8008130:	42a6      	cmp	r6, r4
 8008132:	d109      	bne.n	8008148 <__libc_init_array+0x24>
 8008134:	4d0b      	ldr	r5, [pc, #44]	; (8008164 <__libc_init_array+0x40>)
 8008136:	4c0c      	ldr	r4, [pc, #48]	; (8008168 <__libc_init_array+0x44>)
 8008138:	f000 f820 	bl	800817c <_init>
 800813c:	1b64      	subs	r4, r4, r5
 800813e:	10a4      	asrs	r4, r4, #2
 8008140:	2600      	movs	r6, #0
 8008142:	42a6      	cmp	r6, r4
 8008144:	d105      	bne.n	8008152 <__libc_init_array+0x2e>
 8008146:	bd70      	pop	{r4, r5, r6, pc}
 8008148:	f855 3b04 	ldr.w	r3, [r5], #4
 800814c:	4798      	blx	r3
 800814e:	3601      	adds	r6, #1
 8008150:	e7ee      	b.n	8008130 <__libc_init_array+0xc>
 8008152:	f855 3b04 	ldr.w	r3, [r5], #4
 8008156:	4798      	blx	r3
 8008158:	3601      	adds	r6, #1
 800815a:	e7f2      	b.n	8008142 <__libc_init_array+0x1e>
 800815c:	080081f4 	.word	0x080081f4
 8008160:	080081f4 	.word	0x080081f4
 8008164:	080081f4 	.word	0x080081f4
 8008168:	080081f8 	.word	0x080081f8

0800816c <memset>:
 800816c:	4402      	add	r2, r0
 800816e:	4603      	mov	r3, r0
 8008170:	4293      	cmp	r3, r2
 8008172:	d100      	bne.n	8008176 <memset+0xa>
 8008174:	4770      	bx	lr
 8008176:	f803 1b01 	strb.w	r1, [r3], #1
 800817a:	e7f9      	b.n	8008170 <memset+0x4>

0800817c <_init>:
 800817c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817e:	bf00      	nop
 8008180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008182:	bc08      	pop	{r3}
 8008184:	469e      	mov	lr, r3
 8008186:	4770      	bx	lr

08008188 <_fini>:
 8008188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818a:	bf00      	nop
 800818c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800818e:	bc08      	pop	{r3}
 8008190:	469e      	mov	lr, r3
 8008192:	4770      	bx	lr
